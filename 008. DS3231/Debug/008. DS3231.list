
008. DS3231.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005844  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  080059d4  080059d4  000159d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b78  08005b78  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005b78  08005b78  00015b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b80  08005b80  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b80  08005b80  00015b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b84  08005b84  00015b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005b88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000070  08005bf8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08005bf8  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f6ab  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022b2  00000000  00000000  0002f74b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a80  00000000  00000000  00031a00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000988  00000000  00000000  00032480  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000224aa  00000000  00000000  00032e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000aa11  00000000  00000000  000552b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c4c39  00000000  00000000  0005fcc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001248fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003118  00000000  00000000  00124978  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080059bc 	.word	0x080059bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080059bc 	.word	0x080059bc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000574:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <HAL_Init+0x40>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a0d      	ldr	r2, [pc, #52]	; (80005b0 <HAL_Init+0x40>)
 800057a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800057e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000580:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <HAL_Init+0x40>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a0a      	ldr	r2, [pc, #40]	; (80005b0 <HAL_Init+0x40>)
 8000586:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800058a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <HAL_Init+0x40>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <HAL_Init+0x40>)
 8000592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000596:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000598:	2003      	movs	r0, #3
 800059a:	f000 f94d 	bl	8000838 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800059e:	2000      	movs	r0, #0
 80005a0:	f000 f808 	bl	80005b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005a4:	f004 f8ba 	bl	800471c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005a8:	2300      	movs	r3, #0
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40023c00 	.word	0x40023c00

080005b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005bc:	4b12      	ldr	r3, [pc, #72]	; (8000608 <HAL_InitTick+0x54>)
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <HAL_InitTick+0x58>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	4619      	mov	r1, r3
 80005c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 f965 	bl	80008a2 <HAL_SYSTICK_Config>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005de:	2301      	movs	r3, #1
 80005e0:	e00e      	b.n	8000600 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2b0f      	cmp	r3, #15
 80005e6:	d80a      	bhi.n	80005fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005e8:	2200      	movs	r2, #0
 80005ea:	6879      	ldr	r1, [r7, #4]
 80005ec:	f04f 30ff 	mov.w	r0, #4294967295
 80005f0:	f000 f92d 	bl	800084e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005f4:	4a06      	ldr	r2, [pc, #24]	; (8000610 <HAL_InitTick+0x5c>)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005fa:	2300      	movs	r3, #0
 80005fc:	e000      	b.n	8000600 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
}
 8000600:	4618      	mov	r0, r3
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000008 	.word	0x20000008
 800060c:	20000004 	.word	0x20000004
 8000610:	20000000 	.word	0x20000000

08000614 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <HAL_IncTick+0x20>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	461a      	mov	r2, r3
 800061e:	4b06      	ldr	r3, [pc, #24]	; (8000638 <HAL_IncTick+0x24>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4413      	add	r3, r2
 8000624:	4a04      	ldr	r2, [pc, #16]	; (8000638 <HAL_IncTick+0x24>)
 8000626:	6013      	str	r3, [r2, #0]
}
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	20000004 	.word	0x20000004
 8000638:	20000098 	.word	0x20000098

0800063c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  return uwTick;
 8000640:	4b03      	ldr	r3, [pc, #12]	; (8000650 <HAL_GetTick+0x14>)
 8000642:	681b      	ldr	r3, [r3, #0]
}
 8000644:	4618      	mov	r0, r3
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	20000098 	.word	0x20000098

08000654 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800065c:	f7ff ffee 	bl	800063c <HAL_GetTick>
 8000660:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800066c:	d005      	beq.n	800067a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <HAL_Delay+0x40>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	461a      	mov	r2, r3
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	4413      	add	r3, r2
 8000678:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800067a:	bf00      	nop
 800067c:	f7ff ffde 	bl	800063c <HAL_GetTick>
 8000680:	4602      	mov	r2, r0
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	1ad3      	subs	r3, r2, r3
 8000686:	68fa      	ldr	r2, [r7, #12]
 8000688:	429a      	cmp	r2, r3
 800068a:	d8f7      	bhi.n	800067c <HAL_Delay+0x28>
  {
  }
}
 800068c:	bf00      	nop
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000004 	.word	0x20000004

08000698 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000698:	b480      	push	{r7}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	f003 0307 	and.w	r3, r3, #7
 80006a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <__NVIC_SetPriorityGrouping+0x44>)
 80006aa:	68db      	ldr	r3, [r3, #12]
 80006ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ae:	68ba      	ldr	r2, [r7, #8]
 80006b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006b4:	4013      	ands	r3, r2
 80006b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ca:	4a04      	ldr	r2, [pc, #16]	; (80006dc <__NVIC_SetPriorityGrouping+0x44>)
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	60d3      	str	r3, [r2, #12]
}
 80006d0:	bf00      	nop
 80006d2:	3714      	adds	r7, #20
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	e000ed00 	.word	0xe000ed00

080006e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006e4:	4b04      	ldr	r3, [pc, #16]	; (80006f8 <__NVIC_GetPriorityGrouping+0x18>)
 80006e6:	68db      	ldr	r3, [r3, #12]
 80006e8:	0a1b      	lsrs	r3, r3, #8
 80006ea:	f003 0307 	and.w	r3, r3, #7
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070a:	2b00      	cmp	r3, #0
 800070c:	db0b      	blt.n	8000726 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	f003 021f 	and.w	r2, r3, #31
 8000714:	4907      	ldr	r1, [pc, #28]	; (8000734 <__NVIC_EnableIRQ+0x38>)
 8000716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071a:	095b      	lsrs	r3, r3, #5
 800071c:	2001      	movs	r0, #1
 800071e:	fa00 f202 	lsl.w	r2, r0, r2
 8000722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000726:	bf00      	nop
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	e000e100 	.word	0xe000e100

08000738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	6039      	str	r1, [r7, #0]
 8000742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000748:	2b00      	cmp	r3, #0
 800074a:	db0a      	blt.n	8000762 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	b2da      	uxtb	r2, r3
 8000750:	490c      	ldr	r1, [pc, #48]	; (8000784 <__NVIC_SetPriority+0x4c>)
 8000752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000756:	0112      	lsls	r2, r2, #4
 8000758:	b2d2      	uxtb	r2, r2
 800075a:	440b      	add	r3, r1
 800075c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000760:	e00a      	b.n	8000778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	b2da      	uxtb	r2, r3
 8000766:	4908      	ldr	r1, [pc, #32]	; (8000788 <__NVIC_SetPriority+0x50>)
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	f003 030f 	and.w	r3, r3, #15
 800076e:	3b04      	subs	r3, #4
 8000770:	0112      	lsls	r2, r2, #4
 8000772:	b2d2      	uxtb	r2, r2
 8000774:	440b      	add	r3, r1
 8000776:	761a      	strb	r2, [r3, #24]
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	e000e100 	.word	0xe000e100
 8000788:	e000ed00 	.word	0xe000ed00

0800078c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800078c:	b480      	push	{r7}
 800078e:	b089      	sub	sp, #36	; 0x24
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	f003 0307 	and.w	r3, r3, #7
 800079e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007a0:	69fb      	ldr	r3, [r7, #28]
 80007a2:	f1c3 0307 	rsb	r3, r3, #7
 80007a6:	2b04      	cmp	r3, #4
 80007a8:	bf28      	it	cs
 80007aa:	2304      	movcs	r3, #4
 80007ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	3304      	adds	r3, #4
 80007b2:	2b06      	cmp	r3, #6
 80007b4:	d902      	bls.n	80007bc <NVIC_EncodePriority+0x30>
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	3b03      	subs	r3, #3
 80007ba:	e000      	b.n	80007be <NVIC_EncodePriority+0x32>
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c0:	f04f 32ff 	mov.w	r2, #4294967295
 80007c4:	69bb      	ldr	r3, [r7, #24]
 80007c6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ca:	43da      	mvns	r2, r3
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	401a      	ands	r2, r3
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007d4:	f04f 31ff 	mov.w	r1, #4294967295
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	fa01 f303 	lsl.w	r3, r1, r3
 80007de:	43d9      	mvns	r1, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e4:	4313      	orrs	r3, r2
         );
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3724      	adds	r7, #36	; 0x24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
	...

080007f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	3b01      	subs	r3, #1
 8000800:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000804:	d301      	bcc.n	800080a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000806:	2301      	movs	r3, #1
 8000808:	e00f      	b.n	800082a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800080a:	4a0a      	ldr	r2, [pc, #40]	; (8000834 <SysTick_Config+0x40>)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	3b01      	subs	r3, #1
 8000810:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000812:	210f      	movs	r1, #15
 8000814:	f04f 30ff 	mov.w	r0, #4294967295
 8000818:	f7ff ff8e 	bl	8000738 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800081c:	4b05      	ldr	r3, [pc, #20]	; (8000834 <SysTick_Config+0x40>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000822:	4b04      	ldr	r3, [pc, #16]	; (8000834 <SysTick_Config+0x40>)
 8000824:	2207      	movs	r2, #7
 8000826:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000828:	2300      	movs	r3, #0
}
 800082a:	4618      	mov	r0, r3
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	e000e010 	.word	0xe000e010

08000838 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f7ff ff29 	bl	8000698 <__NVIC_SetPriorityGrouping>
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}

0800084e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800084e:	b580      	push	{r7, lr}
 8000850:	b086      	sub	sp, #24
 8000852:	af00      	add	r7, sp, #0
 8000854:	4603      	mov	r3, r0
 8000856:	60b9      	str	r1, [r7, #8]
 8000858:	607a      	str	r2, [r7, #4]
 800085a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000860:	f7ff ff3e 	bl	80006e0 <__NVIC_GetPriorityGrouping>
 8000864:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	68b9      	ldr	r1, [r7, #8]
 800086a:	6978      	ldr	r0, [r7, #20]
 800086c:	f7ff ff8e 	bl	800078c <NVIC_EncodePriority>
 8000870:	4602      	mov	r2, r0
 8000872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000876:	4611      	mov	r1, r2
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff ff5d 	bl	8000738 <__NVIC_SetPriority>
}
 800087e:	bf00      	nop
 8000880:	3718      	adds	r7, #24
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b082      	sub	sp, #8
 800088a:	af00      	add	r7, sp, #0
 800088c:	4603      	mov	r3, r0
 800088e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff ff31 	bl	80006fc <__NVIC_EnableIRQ>
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b082      	sub	sp, #8
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008aa:	6878      	ldr	r0, [r7, #4]
 80008ac:	f7ff ffa2 	bl	80007f4 <SysTick_Config>
 80008b0:	4603      	mov	r3, r0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80008ba:	b480      	push	{r7}
 80008bc:	b083      	sub	sp, #12
 80008be:	af00      	add	r7, sp, #0
 80008c0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	2b02      	cmp	r3, #2
 80008cc:	d004      	beq.n	80008d8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	2280      	movs	r2, #128	; 0x80
 80008d2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80008d4:	2301      	movs	r3, #1
 80008d6:	e00c      	b.n	80008f2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2205      	movs	r2, #5
 80008dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f022 0201 	bic.w	r2, r2, #1
 80008ee:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80008f0:	2300      	movs	r3, #0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr

080008fe <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80008fe:	b480      	push	{r7}
 8000900:	b083      	sub	sp, #12
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800090c:	b2db      	uxtb	r3, r3
}
 800090e:	4618      	mov	r0, r3
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
	...

0800091c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800091c:	b480      	push	{r7}
 800091e:	b089      	sub	sp, #36	; 0x24
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800092a:	2300      	movs	r3, #0
 800092c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800092e:	2300      	movs	r3, #0
 8000930:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]
 8000936:	e16b      	b.n	8000c10 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000938:	2201      	movs	r2, #1
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	fa02 f303 	lsl.w	r3, r2, r3
 8000940:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	697a      	ldr	r2, [r7, #20]
 8000948:	4013      	ands	r3, r2
 800094a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800094c:	693a      	ldr	r2, [r7, #16]
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	429a      	cmp	r2, r3
 8000952:	f040 815a 	bne.w	8000c0a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	2b02      	cmp	r3, #2
 800095c:	d003      	beq.n	8000966 <HAL_GPIO_Init+0x4a>
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	2b12      	cmp	r3, #18
 8000964:	d123      	bne.n	80009ae <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	08da      	lsrs	r2, r3, #3
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	3208      	adds	r2, #8
 800096e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000972:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000974:	69fb      	ldr	r3, [r7, #28]
 8000976:	f003 0307 	and.w	r3, r3, #7
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	220f      	movs	r2, #15
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	43db      	mvns	r3, r3
 8000984:	69ba      	ldr	r2, [r7, #24]
 8000986:	4013      	ands	r3, r2
 8000988:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	691a      	ldr	r2, [r3, #16]
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	f003 0307 	and.w	r3, r3, #7
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	69ba      	ldr	r2, [r7, #24]
 800099c:	4313      	orrs	r3, r2
 800099e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80009a0:	69fb      	ldr	r3, [r7, #28]
 80009a2:	08da      	lsrs	r2, r3, #3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	3208      	adds	r2, #8
 80009a8:	69b9      	ldr	r1, [r7, #24]
 80009aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	2203      	movs	r2, #3
 80009ba:	fa02 f303 	lsl.w	r3, r2, r3
 80009be:	43db      	mvns	r3, r3
 80009c0:	69ba      	ldr	r2, [r7, #24]
 80009c2:	4013      	ands	r3, r2
 80009c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	f003 0203 	and.w	r2, r3, #3
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	69ba      	ldr	r2, [r7, #24]
 80009d8:	4313      	orrs	r3, r2
 80009da:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	69ba      	ldr	r2, [r7, #24]
 80009e0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d00b      	beq.n	8000a02 <HAL_GPIO_Init+0xe6>
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	2b02      	cmp	r3, #2
 80009f0:	d007      	beq.n	8000a02 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009f6:	2b11      	cmp	r3, #17
 80009f8:	d003      	beq.n	8000a02 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	2b12      	cmp	r3, #18
 8000a00:	d130      	bne.n	8000a64 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	689b      	ldr	r3, [r3, #8]
 8000a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a08:	69fb      	ldr	r3, [r7, #28]
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	2203      	movs	r2, #3
 8000a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a12:	43db      	mvns	r3, r3
 8000a14:	69ba      	ldr	r2, [r7, #24]
 8000a16:	4013      	ands	r3, r2
 8000a18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	68da      	ldr	r2, [r3, #12]
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	005b      	lsls	r3, r3, #1
 8000a22:	fa02 f303 	lsl.w	r3, r2, r3
 8000a26:	69ba      	ldr	r2, [r7, #24]
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	69ba      	ldr	r2, [r7, #24]
 8000a30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a38:	2201      	movs	r2, #1
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a40:	43db      	mvns	r3, r3
 8000a42:	69ba      	ldr	r2, [r7, #24]
 8000a44:	4013      	ands	r3, r2
 8000a46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	091b      	lsrs	r3, r3, #4
 8000a4e:	f003 0201 	and.w	r2, r3, #1
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	fa02 f303 	lsl.w	r3, r2, r3
 8000a58:	69ba      	ldr	r2, [r7, #24]
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	69ba      	ldr	r2, [r7, #24]
 8000a62:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	2203      	movs	r2, #3
 8000a70:	fa02 f303 	lsl.w	r3, r2, r3
 8000a74:	43db      	mvns	r3, r3
 8000a76:	69ba      	ldr	r2, [r7, #24]
 8000a78:	4013      	ands	r3, r2
 8000a7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	689a      	ldr	r2, [r3, #8]
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	fa02 f303 	lsl.w	r3, r2, r3
 8000a88:	69ba      	ldr	r2, [r7, #24]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	69ba      	ldr	r2, [r7, #24]
 8000a92:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	f000 80b4 	beq.w	8000c0a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	4b5f      	ldr	r3, [pc, #380]	; (8000c24 <HAL_GPIO_Init+0x308>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aaa:	4a5e      	ldr	r2, [pc, #376]	; (8000c24 <HAL_GPIO_Init+0x308>)
 8000aac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ab2:	4b5c      	ldr	r3, [pc, #368]	; (8000c24 <HAL_GPIO_Init+0x308>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000abe:	4a5a      	ldr	r2, [pc, #360]	; (8000c28 <HAL_GPIO_Init+0x30c>)
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	089b      	lsrs	r3, r3, #2
 8000ac4:	3302      	adds	r3, #2
 8000ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000acc:	69fb      	ldr	r3, [r7, #28]
 8000ace:	f003 0303 	and.w	r3, r3, #3
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	220f      	movs	r2, #15
 8000ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ada:	43db      	mvns	r3, r3
 8000adc:	69ba      	ldr	r2, [r7, #24]
 8000ade:	4013      	ands	r3, r2
 8000ae0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4a51      	ldr	r2, [pc, #324]	; (8000c2c <HAL_GPIO_Init+0x310>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d02b      	beq.n	8000b42 <HAL_GPIO_Init+0x226>
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4a50      	ldr	r2, [pc, #320]	; (8000c30 <HAL_GPIO_Init+0x314>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d025      	beq.n	8000b3e <HAL_GPIO_Init+0x222>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4a4f      	ldr	r2, [pc, #316]	; (8000c34 <HAL_GPIO_Init+0x318>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d01f      	beq.n	8000b3a <HAL_GPIO_Init+0x21e>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4a4e      	ldr	r2, [pc, #312]	; (8000c38 <HAL_GPIO_Init+0x31c>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d019      	beq.n	8000b36 <HAL_GPIO_Init+0x21a>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4a4d      	ldr	r2, [pc, #308]	; (8000c3c <HAL_GPIO_Init+0x320>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d013      	beq.n	8000b32 <HAL_GPIO_Init+0x216>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4a4c      	ldr	r2, [pc, #304]	; (8000c40 <HAL_GPIO_Init+0x324>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d00d      	beq.n	8000b2e <HAL_GPIO_Init+0x212>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4a4b      	ldr	r2, [pc, #300]	; (8000c44 <HAL_GPIO_Init+0x328>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d007      	beq.n	8000b2a <HAL_GPIO_Init+0x20e>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4a4a      	ldr	r2, [pc, #296]	; (8000c48 <HAL_GPIO_Init+0x32c>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d101      	bne.n	8000b26 <HAL_GPIO_Init+0x20a>
 8000b22:	2307      	movs	r3, #7
 8000b24:	e00e      	b.n	8000b44 <HAL_GPIO_Init+0x228>
 8000b26:	2308      	movs	r3, #8
 8000b28:	e00c      	b.n	8000b44 <HAL_GPIO_Init+0x228>
 8000b2a:	2306      	movs	r3, #6
 8000b2c:	e00a      	b.n	8000b44 <HAL_GPIO_Init+0x228>
 8000b2e:	2305      	movs	r3, #5
 8000b30:	e008      	b.n	8000b44 <HAL_GPIO_Init+0x228>
 8000b32:	2304      	movs	r3, #4
 8000b34:	e006      	b.n	8000b44 <HAL_GPIO_Init+0x228>
 8000b36:	2303      	movs	r3, #3
 8000b38:	e004      	b.n	8000b44 <HAL_GPIO_Init+0x228>
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	e002      	b.n	8000b44 <HAL_GPIO_Init+0x228>
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e000      	b.n	8000b44 <HAL_GPIO_Init+0x228>
 8000b42:	2300      	movs	r3, #0
 8000b44:	69fa      	ldr	r2, [r7, #28]
 8000b46:	f002 0203 	and.w	r2, r2, #3
 8000b4a:	0092      	lsls	r2, r2, #2
 8000b4c:	4093      	lsls	r3, r2
 8000b4e:	69ba      	ldr	r2, [r7, #24]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b54:	4934      	ldr	r1, [pc, #208]	; (8000c28 <HAL_GPIO_Init+0x30c>)
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	089b      	lsrs	r3, r3, #2
 8000b5a:	3302      	adds	r3, #2
 8000b5c:	69ba      	ldr	r2, [r7, #24]
 8000b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b62:	4b3a      	ldr	r3, [pc, #232]	; (8000c4c <HAL_GPIO_Init+0x330>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b68:	693b      	ldr	r3, [r7, #16]
 8000b6a:	43db      	mvns	r3, r3
 8000b6c:	69ba      	ldr	r2, [r7, #24]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d003      	beq.n	8000b86 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000b7e:	69ba      	ldr	r2, [r7, #24]
 8000b80:	693b      	ldr	r3, [r7, #16]
 8000b82:	4313      	orrs	r3, r2
 8000b84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b86:	4a31      	ldr	r2, [pc, #196]	; (8000c4c <HAL_GPIO_Init+0x330>)
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b8c:	4b2f      	ldr	r3, [pc, #188]	; (8000c4c <HAL_GPIO_Init+0x330>)
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	43db      	mvns	r3, r3
 8000b96:	69ba      	ldr	r2, [r7, #24]
 8000b98:	4013      	ands	r3, r2
 8000b9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d003      	beq.n	8000bb0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ba8:	69ba      	ldr	r2, [r7, #24]
 8000baa:	693b      	ldr	r3, [r7, #16]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000bb0:	4a26      	ldr	r2, [pc, #152]	; (8000c4c <HAL_GPIO_Init+0x330>)
 8000bb2:	69bb      	ldr	r3, [r7, #24]
 8000bb4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bb6:	4b25      	ldr	r3, [pc, #148]	; (8000c4c <HAL_GPIO_Init+0x330>)
 8000bb8:	689b      	ldr	r3, [r3, #8]
 8000bba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	43db      	mvns	r3, r3
 8000bc0:	69ba      	ldr	r2, [r7, #24]
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d003      	beq.n	8000bda <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000bd2:	69ba      	ldr	r2, [r7, #24]
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000bda:	4a1c      	ldr	r2, [pc, #112]	; (8000c4c <HAL_GPIO_Init+0x330>)
 8000bdc:	69bb      	ldr	r3, [r7, #24]
 8000bde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000be0:	4b1a      	ldr	r3, [pc, #104]	; (8000c4c <HAL_GPIO_Init+0x330>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	43db      	mvns	r3, r3
 8000bea:	69ba      	ldr	r2, [r7, #24]
 8000bec:	4013      	ands	r3, r2
 8000bee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d003      	beq.n	8000c04 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000bfc:	69ba      	ldr	r2, [r7, #24]
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000c04:	4a11      	ldr	r2, [pc, #68]	; (8000c4c <HAL_GPIO_Init+0x330>)
 8000c06:	69bb      	ldr	r3, [r7, #24]
 8000c08:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	61fb      	str	r3, [r7, #28]
 8000c10:	69fb      	ldr	r3, [r7, #28]
 8000c12:	2b0f      	cmp	r3, #15
 8000c14:	f67f ae90 	bls.w	8000938 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000c18:	bf00      	nop
 8000c1a:	3724      	adds	r7, #36	; 0x24
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40013800 	.word	0x40013800
 8000c2c:	40020000 	.word	0x40020000
 8000c30:	40020400 	.word	0x40020400
 8000c34:	40020800 	.word	0x40020800
 8000c38:	40020c00 	.word	0x40020c00
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	40021400 	.word	0x40021400
 8000c44:	40021800 	.word	0x40021800
 8000c48:	40021c00 	.word	0x40021c00
 8000c4c:	40013c00 	.word	0x40013c00

08000c50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d101      	bne.n	8000c62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e10f      	b.n	8000e82 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d106      	bne.n	8000c7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2200      	movs	r2, #0
 8000c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f003 fbf2 	bl	8004460 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2224      	movs	r2, #36	; 0x24
 8000c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f022 0201 	bic.w	r2, r2, #1
 8000c92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000c94:	f002 fef4 	bl	8003a80 <HAL_RCC_GetPCLK1Freq>
 8000c98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	4a7b      	ldr	r2, [pc, #492]	; (8000e8c <HAL_I2C_Init+0x23c>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d807      	bhi.n	8000cb4 <HAL_I2C_Init+0x64>
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	4a7a      	ldr	r2, [pc, #488]	; (8000e90 <HAL_I2C_Init+0x240>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	bf94      	ite	ls
 8000cac:	2301      	movls	r3, #1
 8000cae:	2300      	movhi	r3, #0
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	e006      	b.n	8000cc2 <HAL_I2C_Init+0x72>
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	4a77      	ldr	r2, [pc, #476]	; (8000e94 <HAL_I2C_Init+0x244>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	bf94      	ite	ls
 8000cbc:	2301      	movls	r3, #1
 8000cbe:	2300      	movhi	r3, #0
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e0db      	b.n	8000e82 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	4a72      	ldr	r2, [pc, #456]	; (8000e98 <HAL_I2C_Init+0x248>)
 8000cce:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd2:	0c9b      	lsrs	r3, r3, #18
 8000cd4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	68ba      	ldr	r2, [r7, #8]
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	6a1b      	ldr	r3, [r3, #32]
 8000cf0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	4a64      	ldr	r2, [pc, #400]	; (8000e8c <HAL_I2C_Init+0x23c>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d802      	bhi.n	8000d04 <HAL_I2C_Init+0xb4>
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	3301      	adds	r3, #1
 8000d02:	e009      	b.n	8000d18 <HAL_I2C_Init+0xc8>
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000d0a:	fb02 f303 	mul.w	r3, r2, r3
 8000d0e:	4a63      	ldr	r2, [pc, #396]	; (8000e9c <HAL_I2C_Init+0x24c>)
 8000d10:	fba2 2303 	umull	r2, r3, r2, r3
 8000d14:	099b      	lsrs	r3, r3, #6
 8000d16:	3301      	adds	r3, #1
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	6812      	ldr	r2, [r2, #0]
 8000d1c:	430b      	orrs	r3, r1
 8000d1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	69db      	ldr	r3, [r3, #28]
 8000d26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000d2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	4956      	ldr	r1, [pc, #344]	; (8000e8c <HAL_I2C_Init+0x23c>)
 8000d34:	428b      	cmp	r3, r1
 8000d36:	d80d      	bhi.n	8000d54 <HAL_I2C_Init+0x104>
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	1e59      	subs	r1, r3, #1
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d46:	3301      	adds	r3, #1
 8000d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d4c:	2b04      	cmp	r3, #4
 8000d4e:	bf38      	it	cc
 8000d50:	2304      	movcc	r3, #4
 8000d52:	e04f      	b.n	8000df4 <HAL_I2C_Init+0x1a4>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d111      	bne.n	8000d80 <HAL_I2C_Init+0x130>
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	1e58      	subs	r0, r3, #1
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6859      	ldr	r1, [r3, #4]
 8000d64:	460b      	mov	r3, r1
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	440b      	add	r3, r1
 8000d6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d6e:	3301      	adds	r3, #1
 8000d70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	bf0c      	ite	eq
 8000d78:	2301      	moveq	r3, #1
 8000d7a:	2300      	movne	r3, #0
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	e012      	b.n	8000da6 <HAL_I2C_Init+0x156>
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	1e58      	subs	r0, r3, #1
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6859      	ldr	r1, [r3, #4]
 8000d88:	460b      	mov	r3, r1
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	440b      	add	r3, r1
 8000d8e:	0099      	lsls	r1, r3, #2
 8000d90:	440b      	add	r3, r1
 8000d92:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d96:	3301      	adds	r3, #1
 8000d98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	bf0c      	ite	eq
 8000da0:	2301      	moveq	r3, #1
 8000da2:	2300      	movne	r3, #0
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <HAL_I2C_Init+0x15e>
 8000daa:	2301      	movs	r3, #1
 8000dac:	e022      	b.n	8000df4 <HAL_I2C_Init+0x1a4>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d10e      	bne.n	8000dd4 <HAL_I2C_Init+0x184>
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	1e58      	subs	r0, r3, #1
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6859      	ldr	r1, [r3, #4]
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	440b      	add	r3, r1
 8000dc4:	fbb0 f3f3 	udiv	r3, r0, r3
 8000dc8:	3301      	adds	r3, #1
 8000dca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dd2:	e00f      	b.n	8000df4 <HAL_I2C_Init+0x1a4>
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	1e58      	subs	r0, r3, #1
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6859      	ldr	r1, [r3, #4]
 8000ddc:	460b      	mov	r3, r1
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	440b      	add	r3, r1
 8000de2:	0099      	lsls	r1, r3, #2
 8000de4:	440b      	add	r3, r1
 8000de6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000dea:	3301      	adds	r3, #1
 8000dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000df0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000df4:	6879      	ldr	r1, [r7, #4]
 8000df6:	6809      	ldr	r1, [r1, #0]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	69da      	ldr	r2, [r3, #28]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6a1b      	ldr	r3, [r3, #32]
 8000e0e:	431a      	orrs	r2, r3
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	430a      	orrs	r2, r1
 8000e16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000e22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	6911      	ldr	r1, [r2, #16]
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	68d2      	ldr	r2, [r2, #12]
 8000e2e:	4311      	orrs	r1, r2
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	6812      	ldr	r2, [r2, #0]
 8000e34:	430b      	orrs	r3, r1
 8000e36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	68db      	ldr	r3, [r3, #12]
 8000e3e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	695a      	ldr	r2, [r3, #20]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	699b      	ldr	r3, [r3, #24]
 8000e4a:	431a      	orrs	r2, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	430a      	orrs	r2, r1
 8000e52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f042 0201 	orr.w	r2, r2, #1
 8000e62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2200      	movs	r2, #0
 8000e68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2220      	movs	r2, #32
 8000e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	000186a0 	.word	0x000186a0
 8000e90:	001e847f 	.word	0x001e847f
 8000e94:	003d08ff 	.word	0x003d08ff
 8000e98:	431bde83 	.word	0x431bde83
 8000e9c:	10624dd3 	.word	0x10624dd3

08000ea0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b088      	sub	sp, #32
 8000ea4:	af02      	add	r7, sp, #8
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	607a      	str	r2, [r7, #4]
 8000eaa:	461a      	mov	r2, r3
 8000eac:	460b      	mov	r3, r1
 8000eae:	817b      	strh	r3, [r7, #10]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000eb4:	f7ff fbc2 	bl	800063c <HAL_GetTick>
 8000eb8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	2b20      	cmp	r3, #32
 8000ec4:	f040 80e0 	bne.w	8001088 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	2319      	movs	r3, #25
 8000ece:	2201      	movs	r2, #1
 8000ed0:	4970      	ldr	r1, [pc, #448]	; (8001094 <HAL_I2C_Master_Transmit+0x1f4>)
 8000ed2:	68f8      	ldr	r0, [r7, #12]
 8000ed4:	f001 fff9 	bl	8002eca <I2C_WaitOnFlagUntilTimeout>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	e0d3      	b.n	800108a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d101      	bne.n	8000ef0 <HAL_I2C_Master_Transmit+0x50>
 8000eec:	2302      	movs	r3, #2
 8000eee:	e0cc      	b.n	800108a <HAL_I2C_Master_Transmit+0x1ea>
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d007      	beq.n	8000f16 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f042 0201 	orr.w	r2, r2, #1
 8000f14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f24:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	2221      	movs	r2, #33	; 0x21
 8000f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	2210      	movs	r2, #16
 8000f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	893a      	ldrh	r2, [r7, #8]
 8000f46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	4a50      	ldr	r2, [pc, #320]	; (8001098 <HAL_I2C_Master_Transmit+0x1f8>)
 8000f56:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000f58:	8979      	ldrh	r1, [r7, #10]
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	6a3a      	ldr	r2, [r7, #32]
 8000f5e:	68f8      	ldr	r0, [r7, #12]
 8000f60:	f001 fe18 	bl	8002b94 <I2C_MasterRequestWrite>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e08d      	b.n	800108a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	695b      	ldr	r3, [r3, #20]
 8000f78:	613b      	str	r3, [r7, #16]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	613b      	str	r3, [r7, #16]
 8000f82:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8000f84:	e066      	b.n	8001054 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f86:	697a      	ldr	r2, [r7, #20]
 8000f88:	6a39      	ldr	r1, [r7, #32]
 8000f8a:	68f8      	ldr	r0, [r7, #12]
 8000f8c:	f002 f873 	bl	8003076 <I2C_WaitOnTXEFlagUntilTimeout>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d00d      	beq.n	8000fb2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	2b04      	cmp	r3, #4
 8000f9c:	d107      	bne.n	8000fae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e06b      	b.n	800108a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb6:	781a      	ldrb	r2, [r3, #0]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc2:	1c5a      	adds	r2, r3, #1
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	b29a      	uxth	r2, r3
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	b29a      	uxth	r2, r3
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	695b      	ldr	r3, [r3, #20]
 8000fe8:	f003 0304 	and.w	r3, r3, #4
 8000fec:	2b04      	cmp	r3, #4
 8000fee:	d11b      	bne.n	8001028 <HAL_I2C_Master_Transmit+0x188>
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d017      	beq.n	8001028 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffc:	781a      	ldrb	r2, [r3, #0]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001008:	1c5a      	adds	r2, r3, #1
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001012:	b29b      	uxth	r3, r3
 8001014:	3b01      	subs	r3, #1
 8001016:	b29a      	uxth	r2, r3
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001020:	3b01      	subs	r3, #1
 8001022:	b29a      	uxth	r2, r3
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001028:	697a      	ldr	r2, [r7, #20]
 800102a:	6a39      	ldr	r1, [r7, #32]
 800102c:	68f8      	ldr	r0, [r7, #12]
 800102e:	f002 f863 	bl	80030f8 <I2C_WaitOnBTFFlagUntilTimeout>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d00d      	beq.n	8001054 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103c:	2b04      	cmp	r3, #4
 800103e:	d107      	bne.n	8001050 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800104e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e01a      	b.n	800108a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001058:	2b00      	cmp	r3, #0
 800105a:	d194      	bne.n	8000f86 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800106a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2220      	movs	r2, #32
 8001070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	2200      	movs	r2, #0
 8001078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	2200      	movs	r2, #0
 8001080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001084:	2300      	movs	r3, #0
 8001086:	e000      	b.n	800108a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001088:	2302      	movs	r3, #2
  }
}
 800108a:	4618      	mov	r0, r3
 800108c:	3718      	adds	r7, #24
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	00100002 	.word	0x00100002
 8001098:	ffff0000 	.word	0xffff0000

0800109c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08c      	sub	sp, #48	; 0x30
 80010a0:	af02      	add	r7, sp, #8
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	607a      	str	r2, [r7, #4]
 80010a6:	461a      	mov	r2, r3
 80010a8:	460b      	mov	r3, r1
 80010aa:	817b      	strh	r3, [r7, #10]
 80010ac:	4613      	mov	r3, r2
 80010ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80010b0:	f7ff fac4 	bl	800063c <HAL_GetTick>
 80010b4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b20      	cmp	r3, #32
 80010c0:	f040 820b 	bne.w	80014da <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80010c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	2319      	movs	r3, #25
 80010ca:	2201      	movs	r2, #1
 80010cc:	497c      	ldr	r1, [pc, #496]	; (80012c0 <HAL_I2C_Master_Receive+0x224>)
 80010ce:	68f8      	ldr	r0, [r7, #12]
 80010d0:	f001 fefb 	bl	8002eca <I2C_WaitOnFlagUntilTimeout>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80010da:	2302      	movs	r3, #2
 80010dc:	e1fe      	b.n	80014dc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d101      	bne.n	80010ec <HAL_I2C_Master_Receive+0x50>
 80010e8:	2302      	movs	r3, #2
 80010ea:	e1f7      	b.n	80014dc <HAL_I2C_Master_Receive+0x440>
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2201      	movs	r2, #1
 80010f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d007      	beq.n	8001112 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f042 0201 	orr.w	r2, r2, #1
 8001110:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001120:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	2222      	movs	r2, #34	; 0x22
 8001126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2210      	movs	r2, #16
 800112e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2200      	movs	r2, #0
 8001136:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	893a      	ldrh	r2, [r7, #8]
 8001142:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001148:	b29a      	uxth	r2, r3
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	4a5c      	ldr	r2, [pc, #368]	; (80012c4 <HAL_I2C_Master_Receive+0x228>)
 8001152:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001154:	8979      	ldrh	r1, [r7, #10]
 8001156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001158:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800115a:	68f8      	ldr	r0, [r7, #12]
 800115c:	f001 fd90 	bl	8002c80 <I2C_MasterRequestRead>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e1b8      	b.n	80014dc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800116e:	2b00      	cmp	r3, #0
 8001170:	d113      	bne.n	800119a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001172:	2300      	movs	r3, #0
 8001174:	623b      	str	r3, [r7, #32]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	695b      	ldr	r3, [r3, #20]
 800117c:	623b      	str	r3, [r7, #32]
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	623b      	str	r3, [r7, #32]
 8001186:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	e18c      	b.n	80014b4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d11b      	bne.n	80011da <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	61fb      	str	r3, [r7, #28]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	61fb      	str	r3, [r7, #28]
 80011c6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	e16c      	b.n	80014b4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d11b      	bne.n	800121a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011f0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001200:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001202:	2300      	movs	r3, #0
 8001204:	61bb      	str	r3, [r7, #24]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	695b      	ldr	r3, [r3, #20]
 800120c:	61bb      	str	r3, [r7, #24]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	61bb      	str	r3, [r7, #24]
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	e14c      	b.n	80014b4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001228:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800122a:	2300      	movs	r3, #0
 800122c:	617b      	str	r3, [r7, #20]
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	695b      	ldr	r3, [r3, #20]
 8001234:	617b      	str	r3, [r7, #20]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	617b      	str	r3, [r7, #20]
 800123e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001240:	e138      	b.n	80014b4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001246:	2b03      	cmp	r3, #3
 8001248:	f200 80f1 	bhi.w	800142e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001250:	2b01      	cmp	r3, #1
 8001252:	d123      	bne.n	800129c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001256:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001258:	68f8      	ldr	r0, [r7, #12]
 800125a:	f001 ff8e 	bl	800317a <I2C_WaitOnRXNEFlagUntilTimeout>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e139      	b.n	80014dc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	691a      	ldr	r2, [r3, #16]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127a:	1c5a      	adds	r2, r3, #1
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001284:	3b01      	subs	r3, #1
 8001286:	b29a      	uxth	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001290:	b29b      	uxth	r3, r3
 8001292:	3b01      	subs	r3, #1
 8001294:	b29a      	uxth	r2, r3
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	855a      	strh	r2, [r3, #42]	; 0x2a
 800129a:	e10b      	b.n	80014b4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d14e      	bne.n	8001342 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80012a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012aa:	2200      	movs	r2, #0
 80012ac:	4906      	ldr	r1, [pc, #24]	; (80012c8 <HAL_I2C_Master_Receive+0x22c>)
 80012ae:	68f8      	ldr	r0, [r7, #12]
 80012b0:	f001 fe0b 	bl	8002eca <I2C_WaitOnFlagUntilTimeout>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d008      	beq.n	80012cc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e10e      	b.n	80014dc <HAL_I2C_Master_Receive+0x440>
 80012be:	bf00      	nop
 80012c0:	00100002 	.word	0x00100002
 80012c4:	ffff0000 	.word	0xffff0000
 80012c8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	691a      	ldr	r2, [r3, #16]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e6:	b2d2      	uxtb	r2, r2
 80012e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ee:	1c5a      	adds	r2, r3, #1
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012f8:	3b01      	subs	r3, #1
 80012fa:	b29a      	uxth	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001304:	b29b      	uxth	r3, r3
 8001306:	3b01      	subs	r3, #1
 8001308:	b29a      	uxth	r2, r3
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	691a      	ldr	r2, [r3, #16]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001318:	b2d2      	uxtb	r2, r2
 800131a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001320:	1c5a      	adds	r2, r3, #1
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800132a:	3b01      	subs	r3, #1
 800132c:	b29a      	uxth	r2, r3
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001336:	b29b      	uxth	r3, r3
 8001338:	3b01      	subs	r3, #1
 800133a:	b29a      	uxth	r2, r3
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001340:	e0b8      	b.n	80014b4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001348:	2200      	movs	r2, #0
 800134a:	4966      	ldr	r1, [pc, #408]	; (80014e4 <HAL_I2C_Master_Receive+0x448>)
 800134c:	68f8      	ldr	r0, [r7, #12]
 800134e:	f001 fdbc 	bl	8002eca <I2C_WaitOnFlagUntilTimeout>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e0bf      	b.n	80014dc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800136a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	691a      	ldr	r2, [r3, #16]
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001376:	b2d2      	uxtb	r2, r2
 8001378:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137e:	1c5a      	adds	r2, r3, #1
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001388:	3b01      	subs	r3, #1
 800138a:	b29a      	uxth	r2, r3
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001394:	b29b      	uxth	r3, r3
 8001396:	3b01      	subs	r3, #1
 8001398:	b29a      	uxth	r2, r3
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013a4:	2200      	movs	r2, #0
 80013a6:	494f      	ldr	r1, [pc, #316]	; (80014e4 <HAL_I2C_Master_Receive+0x448>)
 80013a8:	68f8      	ldr	r0, [r7, #12]
 80013aa:	f001 fd8e 	bl	8002eca <I2C_WaitOnFlagUntilTimeout>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e091      	b.n	80014dc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	691a      	ldr	r2, [r3, #16]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d2:	b2d2      	uxtb	r2, r2
 80013d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013da:	1c5a      	adds	r2, r3, #1
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013e4:	3b01      	subs	r3, #1
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	3b01      	subs	r3, #1
 80013f4:	b29a      	uxth	r2, r3
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	691a      	ldr	r2, [r3, #16]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001404:	b2d2      	uxtb	r2, r2
 8001406:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800140c:	1c5a      	adds	r2, r3, #1
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001416:	3b01      	subs	r3, #1
 8001418:	b29a      	uxth	r2, r3
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001422:	b29b      	uxth	r3, r3
 8001424:	3b01      	subs	r3, #1
 8001426:	b29a      	uxth	r2, r3
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800142c:	e042      	b.n	80014b4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800142e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001430:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001432:	68f8      	ldr	r0, [r7, #12]
 8001434:	f001 fea1 	bl	800317a <I2C_WaitOnRXNEFlagUntilTimeout>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e04c      	b.n	80014dc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	691a      	ldr	r2, [r3, #16]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144c:	b2d2      	uxtb	r2, r2
 800144e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001454:	1c5a      	adds	r2, r3, #1
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800145e:	3b01      	subs	r3, #1
 8001460:	b29a      	uxth	r2, r3
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800146a:	b29b      	uxth	r3, r3
 800146c:	3b01      	subs	r3, #1
 800146e:	b29a      	uxth	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	2b04      	cmp	r3, #4
 8001480:	d118      	bne.n	80014b4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	691a      	ldr	r2, [r3, #16]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001494:	1c5a      	adds	r2, r3, #1
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800149e:	3b01      	subs	r3, #1
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	3b01      	subs	r3, #1
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	f47f aec2 	bne.w	8001242 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2220      	movs	r2, #32
 80014c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80014d6:	2300      	movs	r3, #0
 80014d8:	e000      	b.n	80014dc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80014da:	2302      	movs	r3, #2
  }
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3728      	adds	r7, #40	; 0x28
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	00010004 	.word	0x00010004

080014e8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b088      	sub	sp, #32
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80014f0:	2300      	movs	r3, #0
 80014f2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001500:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001508:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001510:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001512:	7bfb      	ldrb	r3, [r7, #15]
 8001514:	2b10      	cmp	r3, #16
 8001516:	d003      	beq.n	8001520 <HAL_I2C_EV_IRQHandler+0x38>
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	2b40      	cmp	r3, #64	; 0x40
 800151c:	f040 80b6 	bne.w	800168c <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	695b      	ldr	r3, [r3, #20]
 800152e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	2b00      	cmp	r3, #0
 8001538:	d10d      	bne.n	8001556 <HAL_I2C_EV_IRQHandler+0x6e>
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001540:	d003      	beq.n	800154a <HAL_I2C_EV_IRQHandler+0x62>
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001548:	d101      	bne.n	800154e <HAL_I2C_EV_IRQHandler+0x66>
 800154a:	2301      	movs	r3, #1
 800154c:	e000      	b.n	8001550 <HAL_I2C_EV_IRQHandler+0x68>
 800154e:	2300      	movs	r3, #0
 8001550:	2b01      	cmp	r3, #1
 8001552:	f000 8127 	beq.w	80017a4 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	f003 0301 	and.w	r3, r3, #1
 800155c:	2b00      	cmp	r3, #0
 800155e:	d00c      	beq.n	800157a <HAL_I2C_EV_IRQHandler+0x92>
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	0a5b      	lsrs	r3, r3, #9
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	2b00      	cmp	r3, #0
 800156a:	d006      	beq.n	800157a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f001 fe89 	bl	8003284 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f000 fd13 	bl	8001f9e <I2C_Master_SB>
 8001578:	e087      	b.n	800168a <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	08db      	lsrs	r3, r3, #3
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	2b00      	cmp	r3, #0
 8001584:	d009      	beq.n	800159a <HAL_I2C_EV_IRQHandler+0xb2>
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	0a5b      	lsrs	r3, r3, #9
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	2b00      	cmp	r3, #0
 8001590:	d003      	beq.n	800159a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f000 fd89 	bl	80020aa <I2C_Master_ADD10>
 8001598:	e077      	b.n	800168a <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	085b      	lsrs	r3, r3, #1
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d009      	beq.n	80015ba <HAL_I2C_EV_IRQHandler+0xd2>
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	0a5b      	lsrs	r3, r3, #9
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d003      	beq.n	80015ba <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 fda3 	bl	80020fe <I2C_Master_ADDR>
 80015b8:	e067      	b.n	800168a <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	089b      	lsrs	r3, r3, #2
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d030      	beq.n	8001628 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015d4:	f000 80e8 	beq.w	80017a8 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	09db      	lsrs	r3, r3, #7
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d00f      	beq.n	8001604 <HAL_I2C_EV_IRQHandler+0x11c>
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	0a9b      	lsrs	r3, r3, #10
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d009      	beq.n	8001604 <HAL_I2C_EV_IRQHandler+0x11c>
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	089b      	lsrs	r3, r3, #2
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d103      	bne.n	8001604 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f000 f9f4 	bl	80019ea <I2C_MasterTransmit_TXE>
 8001602:	e042      	b.n	800168a <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	089b      	lsrs	r3, r3, #2
 8001608:	f003 0301 	and.w	r3, r3, #1
 800160c:	2b00      	cmp	r3, #0
 800160e:	f000 80cb 	beq.w	80017a8 <HAL_I2C_EV_IRQHandler+0x2c0>
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	0a5b      	lsrs	r3, r3, #9
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	2b00      	cmp	r3, #0
 800161c:	f000 80c4 	beq.w	80017a8 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f000 fada 	bl	8001bda <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001626:	e0bf      	b.n	80017a8 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001632:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001636:	f000 80b7 	beq.w	80017a8 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	099b      	lsrs	r3, r3, #6
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	2b00      	cmp	r3, #0
 8001644:	d00f      	beq.n	8001666 <HAL_I2C_EV_IRQHandler+0x17e>
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	0a9b      	lsrs	r3, r3, #10
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	2b00      	cmp	r3, #0
 8001650:	d009      	beq.n	8001666 <HAL_I2C_EV_IRQHandler+0x17e>
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	089b      	lsrs	r3, r3, #2
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b00      	cmp	r3, #0
 800165c:	d103      	bne.n	8001666 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 fb31 	bl	8001cc6 <I2C_MasterReceive_RXNE>
 8001664:	e011      	b.n	800168a <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	089b      	lsrs	r3, r3, #2
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	2b00      	cmp	r3, #0
 8001670:	f000 809a 	beq.w	80017a8 <HAL_I2C_EV_IRQHandler+0x2c0>
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	0a5b      	lsrs	r3, r3, #9
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	2b00      	cmp	r3, #0
 800167e:	f000 8093 	beq.w	80017a8 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f000 fba1 	bl	8001dca <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001688:	e08e      	b.n	80017a8 <HAL_I2C_EV_IRQHandler+0x2c0>
 800168a:	e08d      	b.n	80017a8 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001690:	2b00      	cmp	r3, #0
 8001692:	d004      	beq.n	800169e <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	61fb      	str	r3, [r7, #28]
 800169c:	e007      	b.n	80016ae <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	695b      	ldr	r3, [r3, #20]
 80016ac:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	085b      	lsrs	r3, r3, #1
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d012      	beq.n	80016e0 <HAL_I2C_EV_IRQHandler+0x1f8>
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	0a5b      	lsrs	r3, r3, #9
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d00c      	beq.n	80016e0 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80016d6:	69b9      	ldr	r1, [r7, #24]
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f000 ff5f 	bl	800259c <I2C_Slave_ADDR>
 80016de:	e066      	b.n	80017ae <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	091b      	lsrs	r3, r3, #4
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d009      	beq.n	8001700 <HAL_I2C_EV_IRQHandler+0x218>
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	0a5b      	lsrs	r3, r3, #9
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d003      	beq.n	8001700 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f000 ff93 	bl	8002624 <I2C_Slave_STOPF>
 80016fe:	e056      	b.n	80017ae <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001700:	7bbb      	ldrb	r3, [r7, #14]
 8001702:	2b21      	cmp	r3, #33	; 0x21
 8001704:	d002      	beq.n	800170c <HAL_I2C_EV_IRQHandler+0x224>
 8001706:	7bbb      	ldrb	r3, [r7, #14]
 8001708:	2b29      	cmp	r3, #41	; 0x29
 800170a:	d125      	bne.n	8001758 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	09db      	lsrs	r3, r3, #7
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	2b00      	cmp	r3, #0
 8001716:	d00f      	beq.n	8001738 <HAL_I2C_EV_IRQHandler+0x250>
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	0a9b      	lsrs	r3, r3, #10
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	2b00      	cmp	r3, #0
 8001722:	d009      	beq.n	8001738 <HAL_I2C_EV_IRQHandler+0x250>
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	089b      	lsrs	r3, r3, #2
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	2b00      	cmp	r3, #0
 800172e:	d103      	bne.n	8001738 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f000 fe75 	bl	8002420 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001736:	e039      	b.n	80017ac <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	089b      	lsrs	r3, r3, #2
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	2b00      	cmp	r3, #0
 8001742:	d033      	beq.n	80017ac <HAL_I2C_EV_IRQHandler+0x2c4>
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	0a5b      	lsrs	r3, r3, #9
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	2b00      	cmp	r3, #0
 800174e:	d02d      	beq.n	80017ac <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f000 fea2 	bl	800249a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001756:	e029      	b.n	80017ac <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	099b      	lsrs	r3, r3, #6
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	2b00      	cmp	r3, #0
 8001762:	d00f      	beq.n	8001784 <HAL_I2C_EV_IRQHandler+0x29c>
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	0a9b      	lsrs	r3, r3, #10
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	2b00      	cmp	r3, #0
 800176e:	d009      	beq.n	8001784 <HAL_I2C_EV_IRQHandler+0x29c>
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	089b      	lsrs	r3, r3, #2
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	2b00      	cmp	r3, #0
 800177a:	d103      	bne.n	8001784 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f000 fead 	bl	80024dc <I2C_SlaveReceive_RXNE>
 8001782:	e014      	b.n	80017ae <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	089b      	lsrs	r3, r3, #2
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	2b00      	cmp	r3, #0
 800178e:	d00e      	beq.n	80017ae <HAL_I2C_EV_IRQHandler+0x2c6>
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	0a5b      	lsrs	r3, r3, #9
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	2b00      	cmp	r3, #0
 800179a:	d008      	beq.n	80017ae <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f000 fedb 	bl	8002558 <I2C_SlaveReceive_BTF>
 80017a2:	e004      	b.n	80017ae <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 80017a4:	bf00      	nop
 80017a6:	e002      	b.n	80017ae <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80017a8:	bf00      	nop
 80017aa:	e000      	b.n	80017ae <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80017ac:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80017ae:	3720      	adds	r7, #32
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08a      	sub	sp, #40	; 0x28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80017cc:	2300      	movs	r3, #0
 80017ce:	627b      	str	r3, [r7, #36]	; 0x24

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80017d0:	6a3b      	ldr	r3, [r7, #32]
 80017d2:	0a1b      	lsrs	r3, r3, #8
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d00e      	beq.n	80017fa <HAL_I2C_ER_IRQHandler+0x46>
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	0a1b      	lsrs	r3, r3, #8
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d008      	beq.n	80017fa <HAL_I2C_ER_IRQHandler+0x46>
  {
    error |= HAL_I2C_ERROR_BERR;
 80017e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ea:	f043 0301 	orr.w	r3, r3, #1
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80017f8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80017fa:	6a3b      	ldr	r3, [r7, #32]
 80017fc:	0a5b      	lsrs	r3, r3, #9
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	2b00      	cmp	r3, #0
 8001804:	d00e      	beq.n	8001824 <HAL_I2C_ER_IRQHandler+0x70>
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	0a1b      	lsrs	r3, r3, #8
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b00      	cmp	r3, #0
 8001810:	d008      	beq.n	8001824 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	f043 0302 	orr.w	r3, r3, #2
 8001818:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001822:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001824:	6a3b      	ldr	r3, [r7, #32]
 8001826:	0a9b      	lsrs	r3, r3, #10
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	2b00      	cmp	r3, #0
 800182e:	d041      	beq.n	80018b4 <HAL_I2C_ER_IRQHandler+0x100>
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	0a1b      	lsrs	r3, r3, #8
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	2b00      	cmp	r3, #0
 800183a:	d03b      	beq.n	80018b4 <HAL_I2C_ER_IRQHandler+0x100>
  {
    tmp1 = hi2c->Mode;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001842:	76fb      	strb	r3, [r7, #27]
    tmp2 = hi2c->XferCount;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001848:	b29b      	uxth	r3, r3
 800184a:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001852:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001858:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800185a:	7efb      	ldrb	r3, [r7, #27]
 800185c:	2b20      	cmp	r3, #32
 800185e:	d112      	bne.n	8001886 <HAL_I2C_ER_IRQHandler+0xd2>
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10f      	bne.n	8001886 <HAL_I2C_ER_IRQHandler+0xd2>
 8001866:	7cfb      	ldrb	r3, [r7, #19]
 8001868:	2b21      	cmp	r3, #33	; 0x21
 800186a:	d008      	beq.n	800187e <HAL_I2C_ER_IRQHandler+0xca>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800186c:	7cfb      	ldrb	r3, [r7, #19]
 800186e:	2b29      	cmp	r3, #41	; 0x29
 8001870:	d005      	beq.n	800187e <HAL_I2C_ER_IRQHandler+0xca>
 8001872:	7cfb      	ldrb	r3, [r7, #19]
 8001874:	2b28      	cmp	r3, #40	; 0x28
 8001876:	d106      	bne.n	8001886 <HAL_I2C_ER_IRQHandler+0xd2>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2b21      	cmp	r3, #33	; 0x21
 800187c:	d103      	bne.n	8001886 <HAL_I2C_ER_IRQHandler+0xd2>
    {
      I2C_Slave_AF(hi2c);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f001 f800 	bl	8002884 <I2C_Slave_AF>
 8001884:	e016      	b.n	80018b4 <HAL_I2C_ER_IRQHandler+0x100>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800188e:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001892:	f043 0304 	orr.w	r3, r3, #4
 8001896:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	2b10      	cmp	r3, #16
 80018a2:	d107      	bne.n	80018b4 <HAL_I2C_ER_IRQHandler+0x100>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018b2:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80018b4:	6a3b      	ldr	r3, [r7, #32]
 80018b6:	0adb      	lsrs	r3, r3, #11
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d00e      	beq.n	80018de <HAL_I2C_ER_IRQHandler+0x12a>
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	0a1b      	lsrs	r3, r3, #8
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d008      	beq.n	80018de <HAL_I2C_ER_IRQHandler+0x12a>
  {
    error |= HAL_I2C_ERROR_OVR;
 80018cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ce:	f043 0308 	orr.w	r3, r3, #8
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80018dc:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d008      	beq.n	80018f6 <HAL_I2C_ER_IRQHandler+0x142>
  {
    hi2c->ErrorCode |= error;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ea:	431a      	orrs	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f001 f837 	bl	8002964 <I2C_ITError>
  }
}
 80018f6:	bf00      	nop
 80018f8:	3728      	adds	r7, #40	; 0x28
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001926:	b480      	push	{r7}
 8001928:	b083      	sub	sp, #12
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800192e:	bf00      	nop
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800194e:	b480      	push	{r7}
 8001950:	b083      	sub	sp, #12
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
 8001956:	460b      	mov	r3, r1
 8001958:	70fb      	strb	r3, [r7, #3]
 800195a:	4613      	mov	r3, r2
 800195c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800196a:	b480      	push	{r7}
 800196c:	b083      	sub	sp, #12
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001992:	b480      	push	{r7}
 8001994:	b083      	sub	sp, #12
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019dc:	b2db      	uxtb	r3, r3
}
 80019de:	4618      	mov	r0, r3
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b084      	sub	sp, #16
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019f8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a00:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a06:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d150      	bne.n	8001ab2 <I2C_MasterTransmit_TXE+0xc8>
 8001a10:	7bfb      	ldrb	r3, [r7, #15]
 8001a12:	2b21      	cmp	r3, #33	; 0x21
 8001a14:	d14d      	bne.n	8001ab2 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	2b08      	cmp	r3, #8
 8001a1a:	d01d      	beq.n	8001a58 <I2C_MasterTransmit_TXE+0x6e>
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	2b20      	cmp	r3, #32
 8001a20:	d01a      	beq.n	8001a58 <I2C_MasterTransmit_TXE+0x6e>
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001a28:	d016      	beq.n	8001a58 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	685a      	ldr	r2, [r3, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001a38:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2211      	movs	r2, #17
 8001a3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2220      	movs	r2, #32
 8001a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7ff ff54 	bl	80018fe <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001a56:	e0bc      	b.n	8001bd2 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	685a      	ldr	r2, [r3, #4]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001a66:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a76:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2220      	movs	r2, #32
 8001a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b40      	cmp	r3, #64	; 0x40
 8001a90:	d107      	bne.n	8001aa2 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7ff ff6f 	bl	800197e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001aa0:	e097      	b.n	8001bd2 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7ff ff27 	bl	80018fe <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001ab0:	e08f      	b.n	8001bd2 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001ab2:	7bfb      	ldrb	r3, [r7, #15]
 8001ab4:	2b21      	cmp	r3, #33	; 0x21
 8001ab6:	d007      	beq.n	8001ac8 <I2C_MasterTransmit_TXE+0xde>
 8001ab8:	7bbb      	ldrb	r3, [r7, #14]
 8001aba:	2b40      	cmp	r3, #64	; 0x40
 8001abc:	f040 8089 	bne.w	8001bd2 <I2C_MasterTransmit_TXE+0x1e8>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
 8001ac2:	2b22      	cmp	r3, #34	; 0x22
 8001ac4:	f040 8085 	bne.w	8001bd2 <I2C_MasterTransmit_TXE+0x1e8>
  {
    if (hi2c->XferCount == 0U)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d108      	bne.n	8001ae4 <I2C_MasterTransmit_TXE+0xfa>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	685a      	ldr	r2, [r3, #4]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ae0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001ae2:	e076      	b.n	8001bd2 <I2C_MasterTransmit_TXE+0x1e8>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	2b40      	cmp	r3, #64	; 0x40
 8001aee:	d15d      	bne.n	8001bac <I2C_MasterTransmit_TXE+0x1c2>
        if (hi2c->EventCount == 0U)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d11d      	bne.n	8001b34 <I2C_MasterTransmit_TXE+0x14a>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d10b      	bne.n	8001b18 <I2C_MasterTransmit_TXE+0x12e>
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b04:	b2da      	uxtb	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b10:	1c9a      	adds	r2, r3, #2
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001b16:	e05c      	b.n	8001bd2 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	121b      	asrs	r3, r3, #8
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b2c:	1c5a      	adds	r2, r3, #1
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001b32:	e04e      	b.n	8001bd2 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 1U)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d10b      	bne.n	8001b54 <I2C_MasterTransmit_TXE+0x16a>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	611a      	str	r2, [r3, #16]
          hi2c->EventCount++;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b4c:	1c5a      	adds	r2, r3, #1
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001b52:	e03e      	b.n	8001bd2 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 2U)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d13a      	bne.n	8001bd2 <I2C_MasterTransmit_TXE+0x1e8>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b22      	cmp	r3, #34	; 0x22
 8001b66:	d108      	bne.n	8001b7a <I2C_MasterTransmit_TXE+0x190>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b76:	601a      	str	r2, [r3, #0]
}
 8001b78:	e02b      	b.n	8001bd2 <I2C_MasterTransmit_TXE+0x1e8>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b21      	cmp	r3, #33	; 0x21
 8001b84:	d125      	bne.n	8001bd2 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8a:	781a      	ldrb	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	611a      	str	r2, [r3, #16]
            hi2c->pBuffPtr++;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b96:	1c5a      	adds	r2, r3, #1
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	625a      	str	r2, [r3, #36]	; 0x24
            hi2c->XferCount--;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001baa:	e012      	b.n	8001bd2 <I2C_MasterTransmit_TXE+0x1e8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb0:	781a      	ldrb	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbc:	1c5a      	adds	r2, r3, #1
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001bd0:	e7ff      	b.n	8001bd2 <I2C_MasterTransmit_TXE+0x1e8>
 8001bd2:	bf00      	nop
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b084      	sub	sp, #16
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be6:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b21      	cmp	r3, #33	; 0x21
 8001bf2:	d164      	bne.n	8001cbe <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d012      	beq.n	8001c24 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c02:	781a      	ldrb	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0e:	1c5a      	adds	r2, r3, #1
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	855a      	strh	r2, [r3, #42]	; 0x2a
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
        }
      }
    }
  }
}
 8001c22:	e04c      	b.n	8001cbe <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2b08      	cmp	r3, #8
 8001c28:	d01d      	beq.n	8001c66 <I2C_MasterTransmit_BTF+0x8c>
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2b20      	cmp	r3, #32
 8001c2e:	d01a      	beq.n	8001c66 <I2C_MasterTransmit_BTF+0x8c>
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c36:	d016      	beq.n	8001c66 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001c46:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2211      	movs	r2, #17
 8001c4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2220      	movs	r2, #32
 8001c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff fe4d 	bl	80018fe <HAL_I2C_MasterTxCpltCallback>
}
 8001c64:	e02b      	b.n	8001cbe <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	685a      	ldr	r2, [r3, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001c74:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c84:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2220      	movs	r2, #32
 8001c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	2b40      	cmp	r3, #64	; 0x40
 8001c9e:	d107      	bne.n	8001cb0 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f7ff fe68 	bl	800197e <HAL_I2C_MemTxCpltCallback>
}
 8001cae:	e006      	b.n	8001cbe <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7ff fe20 	bl	80018fe <HAL_I2C_MasterTxCpltCallback>
}
 8001cbe:	bf00      	nop
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b084      	sub	sp, #16
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b22      	cmp	r3, #34	; 0x22
 8001cd8:	d173      	bne.n	8001dc2 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2b03      	cmp	r3, #3
 8001ce6:	d920      	bls.n	8001d2a <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	691a      	ldr	r2, [r3, #16]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfa:	1c5a      	adds	r2, r3, #1
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	3b01      	subs	r3, #1
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	2b03      	cmp	r3, #3
 8001d16:	d154      	bne.n	8001dc2 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d26:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8001d28:	e04b      	b.n	8001dc2 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d047      	beq.n	8001dc2 <I2C_MasterReceive_RXNE+0xfc>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d002      	beq.n	8001d3e <I2C_MasterReceive_RXNE+0x78>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d141      	bne.n	8001dc2 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d4c:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d5c:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	691a      	ldr	r2, [r3, #16]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d70:	1c5a      	adds	r2, r3, #1
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2220      	movs	r2, #32
 8001d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	2b40      	cmp	r3, #64	; 0x40
 8001d96:	d10a      	bne.n	8001dae <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7ff fdf3 	bl	8001992 <HAL_I2C_MemRxCpltCallback>
}
 8001dac:	e009      	b.n	8001dc2 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2212      	movs	r2, #18
 8001dba:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7ff fda8 	bl	8001912 <HAL_I2C_MasterRxCpltCallback>
}
 8001dc2:	bf00      	nop
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b084      	sub	sp, #16
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	d11b      	bne.n	8001e1a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001df0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	691a      	ldr	r2, [r3, #16]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfc:	b2d2      	uxtb	r2, r2
 8001dfe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e04:	1c5a      	adds	r2, r3, #1
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	3b01      	subs	r3, #1
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8001e18:	e0bd      	b.n	8001f96 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	2b03      	cmp	r3, #3
 8001e22:	d129      	bne.n	8001e78 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	685a      	ldr	r2, [r3, #4]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e32:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	d00a      	beq.n	8001e50 <I2C_MasterReceive_BTF+0x86>
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d007      	beq.n	8001e50 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e4e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	691a      	ldr	r2, [r3, #16]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5a:	b2d2      	uxtb	r2, r2
 8001e5c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e62:	1c5a      	adds	r2, r3, #1
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001e76:	e08e      	b.n	8001f96 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d176      	bne.n	8001f70 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d002      	beq.n	8001e8e <I2C_MasterReceive_BTF+0xc4>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2b10      	cmp	r3, #16
 8001e8c:	d108      	bne.n	8001ea0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	e019      	b.n	8001ed4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	d002      	beq.n	8001eac <I2C_MasterReceive_BTF+0xe2>
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d108      	bne.n	8001ebe <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	e00a      	b.n	8001ed4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2b10      	cmp	r3, #16
 8001ec2:	d007      	beq.n	8001ed4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ed2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	691a      	ldr	r2, [r3, #16]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee6:	1c5a      	adds	r2, r3, #1
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	691a      	ldr	r2, [r3, #16]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	b2d2      	uxtb	r2, r2
 8001f06:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0c:	1c5a      	adds	r2, r3, #1
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001f2e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2220      	movs	r2, #32
 8001f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b40      	cmp	r3, #64	; 0x40
 8001f42:	d10a      	bne.n	8001f5a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7ff fd1d 	bl	8001992 <HAL_I2C_MemRxCpltCallback>
}
 8001f58:	e01d      	b.n	8001f96 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2212      	movs	r2, #18
 8001f66:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f7ff fcd2 	bl	8001912 <HAL_I2C_MasterRxCpltCallback>
}
 8001f6e:	e012      	b.n	8001f96 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	691a      	ldr	r2, [r3, #16]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f82:	1c5a      	adds	r2, r3, #1
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001f96:	bf00      	nop
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b40      	cmp	r3, #64	; 0x40
 8001fb0:	d117      	bne.n	8001fe2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d109      	bne.n	8001fce <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001fca:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8001fcc:	e067      	b.n	800209e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	f043 0301 	orr.w	r3, r3, #1
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	611a      	str	r2, [r3, #16]
}
 8001fe0:	e05d      	b.n	800209e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001fea:	d133      	bne.n	8002054 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b21      	cmp	r3, #33	; 0x21
 8001ff6:	d109      	bne.n	800200c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	461a      	mov	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002008:	611a      	str	r2, [r3, #16]
 800200a:	e008      	b.n	800201e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002010:	b2db      	uxtb	r3, r3
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	b2da      	uxtb	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002022:	2b00      	cmp	r3, #0
 8002024:	d103      	bne.n	800202e <I2C_Master_SB+0x90>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800202a:	2b00      	cmp	r3, #0
 800202c:	d037      	beq.n	800209e <I2C_Master_SB+0x100>
        if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002034:	2b00      	cmp	r3, #0
 8002036:	d104      	bne.n	8002042 <I2C_Master_SB+0xa4>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800203c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800203e:	2b00      	cmp	r3, #0
 8002040:	d02d      	beq.n	800209e <I2C_Master_SB+0x100>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002050:	605a      	str	r2, [r3, #4]
}
 8002052:	e024      	b.n	800209e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002058:	2b00      	cmp	r3, #0
 800205a:	d10e      	bne.n	800207a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002060:	b29b      	uxth	r3, r3
 8002062:	11db      	asrs	r3, r3, #7
 8002064:	b2db      	uxtb	r3, r3
 8002066:	f003 0306 	and.w	r3, r3, #6
 800206a:	b2db      	uxtb	r3, r3
 800206c:	f063 030f 	orn	r3, r3, #15
 8002070:	b2da      	uxtb	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	611a      	str	r2, [r3, #16]
}
 8002078:	e011      	b.n	800209e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800207e:	2b01      	cmp	r3, #1
 8002080:	d10d      	bne.n	800209e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002086:	b29b      	uxth	r3, r3
 8002088:	11db      	asrs	r3, r3, #7
 800208a:	b2db      	uxtb	r3, r3
 800208c:	f003 0306 	and.w	r3, r3, #6
 8002090:	b2db      	uxtb	r3, r3
 8002092:	f063 030e 	orn	r3, r3, #14
 8002096:	b2da      	uxtb	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	611a      	str	r2, [r3, #16]
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d103      	bne.n	80020ce <I2C_Master_ADD10+0x24>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d011      	beq.n	80020f2 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d104      	bne.n	80020e2 <I2C_Master_ADD10+0x38>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d007      	beq.n	80020f2 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	685a      	ldr	r2, [r3, #4]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020f0:	605a      	str	r2, [r3, #4]
    }
  }
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80020fe:	b480      	push	{r7}
 8002100:	b091      	sub	sp, #68	; 0x44
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800210c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002114:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b22      	cmp	r3, #34	; 0x22
 8002126:	f040 8169 	bne.w	80023fc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10f      	bne.n	8002152 <I2C_Master_ADDR+0x54>
 8002132:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002136:	2b40      	cmp	r3, #64	; 0x40
 8002138:	d10b      	bne.n	8002152 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800213a:	2300      	movs	r3, #0
 800213c:	633b      	str	r3, [r7, #48]	; 0x30
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	633b      	str	r3, [r7, #48]	; 0x30
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	633b      	str	r3, [r7, #48]	; 0x30
 800214e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002150:	e160      	b.n	8002414 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002156:	2b00      	cmp	r3, #0
 8002158:	d11d      	bne.n	8002196 <I2C_Master_ADDR+0x98>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002162:	d118      	bne.n	8002196 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002164:	2300      	movs	r3, #0
 8002166:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002178:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002188:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800218e:	1c5a      	adds	r2, r3, #1
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	651a      	str	r2, [r3, #80]	; 0x50
 8002194:	e13e      	b.n	8002414 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800219a:	b29b      	uxth	r3, r3
 800219c:	2b00      	cmp	r3, #0
 800219e:	d113      	bne.n	80021c8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021a0:	2300      	movs	r3, #0
 80021a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80021b4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	e115      	b.n	80023f4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	f040 808a 	bne.w	80022e8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80021d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80021da:	d137      	bne.n	800224c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021ea:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021fa:	d113      	bne.n	8002224 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800220a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800220c:	2300      	movs	r3, #0
 800220e:	627b      	str	r3, [r7, #36]	; 0x24
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	627b      	str	r3, [r7, #36]	; 0x24
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	627b      	str	r3, [r7, #36]	; 0x24
 8002220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002222:	e0e7      	b.n	80023f4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002224:	2300      	movs	r3, #0
 8002226:	623b      	str	r3, [r7, #32]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	623b      	str	r3, [r7, #32]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	623b      	str	r3, [r7, #32]
 8002238:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	e0d3      	b.n	80023f4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800224c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800224e:	2b08      	cmp	r3, #8
 8002250:	d02e      	beq.n	80022b0 <I2C_Master_ADDR+0x1b2>
 8002252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002254:	2b20      	cmp	r3, #32
 8002256:	d02b      	beq.n	80022b0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800225a:	2b12      	cmp	r3, #18
 800225c:	d102      	bne.n	8002264 <I2C_Master_ADDR+0x166>
 800225e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002260:	2b01      	cmp	r3, #1
 8002262:	d125      	bne.n	80022b0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002266:	2b04      	cmp	r3, #4
 8002268:	d00e      	beq.n	8002288 <I2C_Master_ADDR+0x18a>
 800226a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800226c:	2b02      	cmp	r3, #2
 800226e:	d00b      	beq.n	8002288 <I2C_Master_ADDR+0x18a>
 8002270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002272:	2b10      	cmp	r3, #16
 8002274:	d008      	beq.n	8002288 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	e007      	b.n	8002298 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002296:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002298:	2300      	movs	r3, #0
 800229a:	61fb      	str	r3, [r7, #28]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	61fb      	str	r3, [r7, #28]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	61fb      	str	r3, [r7, #28]
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	e0a1      	b.n	80023f4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022be:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022c0:	2300      	movs	r3, #0
 80022c2:	61bb      	str	r3, [r7, #24]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	61bb      	str	r3, [r7, #24]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	61bb      	str	r3, [r7, #24]
 80022d4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	e085      	b.n	80023f4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d14d      	bne.n	800238e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80022f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022f4:	2b04      	cmp	r3, #4
 80022f6:	d016      	beq.n	8002326 <I2C_Master_ADDR+0x228>
 80022f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d013      	beq.n	8002326 <I2C_Master_ADDR+0x228>
 80022fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002300:	2b10      	cmp	r3, #16
 8002302:	d010      	beq.n	8002326 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002312:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	e007      	b.n	8002336 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002334:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002340:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002344:	d117      	bne.n	8002376 <I2C_Master_ADDR+0x278>
 8002346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002348:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800234c:	d00b      	beq.n	8002366 <I2C_Master_ADDR+0x268>
 800234e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002350:	2b01      	cmp	r3, #1
 8002352:	d008      	beq.n	8002366 <I2C_Master_ADDR+0x268>
 8002354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002356:	2b08      	cmp	r3, #8
 8002358:	d005      	beq.n	8002366 <I2C_Master_ADDR+0x268>
 800235a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800235c:	2b10      	cmp	r3, #16
 800235e:	d002      	beq.n	8002366 <I2C_Master_ADDR+0x268>
 8002360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002362:	2b20      	cmp	r3, #32
 8002364:	d107      	bne.n	8002376 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002374:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002376:	2300      	movs	r3, #0
 8002378:	617b      	str	r3, [r7, #20]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	617b      	str	r3, [r7, #20]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	617b      	str	r3, [r7, #20]
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	e032      	b.n	80023f4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800239c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023ac:	d117      	bne.n	80023de <I2C_Master_ADDR+0x2e0>
 80023ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023b4:	d00b      	beq.n	80023ce <I2C_Master_ADDR+0x2d0>
 80023b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d008      	beq.n	80023ce <I2C_Master_ADDR+0x2d0>
 80023bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023be:	2b08      	cmp	r3, #8
 80023c0:	d005      	beq.n	80023ce <I2C_Master_ADDR+0x2d0>
 80023c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023c4:	2b10      	cmp	r3, #16
 80023c6:	d002      	beq.n	80023ce <I2C_Master_ADDR+0x2d0>
 80023c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ca:	2b20      	cmp	r3, #32
 80023cc:	d107      	bne.n	80023de <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80023dc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023de:	2300      	movs	r3, #0
 80023e0:	613b      	str	r3, [r7, #16]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	613b      	str	r3, [r7, #16]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	613b      	str	r3, [r7, #16]
 80023f2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80023fa:	e00b      	b.n	8002414 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023fc:	2300      	movs	r3, #0
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	68fb      	ldr	r3, [r7, #12]
}
 8002412:	e7ff      	b.n	8002414 <I2C_Master_ADDR+0x316>
 8002414:	bf00      	nop
 8002416:	3744      	adds	r7, #68	; 0x44
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800242e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002434:	b29b      	uxth	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d02b      	beq.n	8002492 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243e:	781a      	ldrb	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244a:	1c5a      	adds	r2, r3, #1
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002454:	b29b      	uxth	r3, r3
 8002456:	3b01      	subs	r3, #1
 8002458:	b29a      	uxth	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002462:	b29b      	uxth	r3, r3
 8002464:	2b00      	cmp	r3, #0
 8002466:	d114      	bne.n	8002492 <I2C_SlaveTransmit_TXE+0x72>
 8002468:	7bfb      	ldrb	r3, [r7, #15]
 800246a:	2b29      	cmp	r3, #41	; 0x29
 800246c:	d111      	bne.n	8002492 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	685a      	ldr	r2, [r3, #4]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800247c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2221      	movs	r2, #33	; 0x21
 8002482:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2228      	movs	r2, #40	; 0x28
 8002488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f7ff fa4a 	bl	8001926 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002492:	bf00      	nop
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d011      	beq.n	80024d0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b0:	781a      	ldrb	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024bc:	1c5a      	adds	r2, r3, #1
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	3b01      	subs	r3, #1
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ea:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d02c      	beq.n	8002550 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	691a      	ldr	r2, [r3, #16]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	1c5a      	adds	r2, r3, #1
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002512:	b29b      	uxth	r3, r3
 8002514:	3b01      	subs	r3, #1
 8002516:	b29a      	uxth	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002520:	b29b      	uxth	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d114      	bne.n	8002550 <I2C_SlaveReceive_RXNE+0x74>
 8002526:	7bfb      	ldrb	r3, [r7, #15]
 8002528:	2b2a      	cmp	r3, #42	; 0x2a
 800252a:	d111      	bne.n	8002550 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800253a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2222      	movs	r2, #34	; 0x22
 8002540:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2228      	movs	r2, #40	; 0x28
 8002546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7ff f9f5 	bl	800193a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002550:	bf00      	nop
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002564:	b29b      	uxth	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d012      	beq.n	8002590 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	691a      	ldr	r2, [r3, #16]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	1c5a      	adds	r2, r3, #1
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002586:	b29b      	uxth	r3, r3
 8002588:	3b01      	subs	r3, #1
 800258a:	b29a      	uxth	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80025a6:	2300      	movs	r3, #0
 80025a8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80025b6:	2b28      	cmp	r3, #40	; 0x28
 80025b8:	d127      	bne.n	800260a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025c8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	089b      	lsrs	r3, r3, #2
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80025d6:	2301      	movs	r3, #1
 80025d8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	09db      	lsrs	r3, r3, #7
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d103      	bne.n	80025ee <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	81bb      	strh	r3, [r7, #12]
 80025ec:	e002      	b.n	80025f4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80025fc:	89ba      	ldrh	r2, [r7, #12]
 80025fe:	7bfb      	ldrb	r3, [r7, #15]
 8002600:	4619      	mov	r1, r3
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7ff f9a3 	bl	800194e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002608:	e008      	b.n	800261c <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f06f 0202 	mvn.w	r2, #2
 8002612:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800261c:	bf00      	nop
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002632:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002642:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002644:	2300      	movs	r3, #0
 8002646:	60bb      	str	r3, [r7, #8]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	60bb      	str	r3, [r7, #8]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f042 0201 	orr.w	r2, r2, #1
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002670:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800267c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002680:	d172      	bne.n	8002768 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002682:	7bfb      	ldrb	r3, [r7, #15]
 8002684:	2b22      	cmp	r3, #34	; 0x22
 8002686:	d002      	beq.n	800268e <I2C_Slave_STOPF+0x6a>
 8002688:	7bfb      	ldrb	r3, [r7, #15]
 800268a:	2b2a      	cmp	r3, #42	; 0x2a
 800268c:	d135      	bne.n	80026fa <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	b29a      	uxth	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d005      	beq.n	80026b2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	f043 0204 	orr.w	r2, r3, #4
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	685a      	ldr	r2, [r3, #4]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026c0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7fe f919 	bl	80008fe <HAL_DMA_GetState>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d049      	beq.n	8002766 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d6:	4a69      	ldr	r2, [pc, #420]	; (800287c <I2C_Slave_STOPF+0x258>)
 80026d8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026de:	4618      	mov	r0, r3
 80026e0:	f7fe f8eb 	bl	80008ba <HAL_DMA_Abort_IT>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d03d      	beq.n	8002766 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026f4:	4610      	mov	r0, r2
 80026f6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80026f8:	e035      	b.n	8002766 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	b29a      	uxth	r2, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270c:	b29b      	uxth	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d005      	beq.n	800271e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	f043 0204 	orr.w	r2, r3, #4
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800272c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002732:	4618      	mov	r0, r3
 8002734:	f7fe f8e3 	bl	80008fe <HAL_DMA_GetState>
 8002738:	4603      	mov	r3, r0
 800273a:	2b01      	cmp	r3, #1
 800273c:	d014      	beq.n	8002768 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002742:	4a4e      	ldr	r2, [pc, #312]	; (800287c <I2C_Slave_STOPF+0x258>)
 8002744:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800274a:	4618      	mov	r0, r3
 800274c:	f7fe f8b5 	bl	80008ba <HAL_DMA_Abort_IT>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d008      	beq.n	8002768 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800275a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002760:	4610      	mov	r0, r2
 8002762:	4798      	blx	r3
 8002764:	e000      	b.n	8002768 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002766:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800276c:	b29b      	uxth	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d03e      	beq.n	80027f0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	2b04      	cmp	r3, #4
 800277e:	d112      	bne.n	80027a6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	691a      	ldr	r2, [r3, #16]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002792:	1c5a      	adds	r2, r3, #1
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800279c:	b29b      	uxth	r3, r3
 800279e:	3b01      	subs	r3, #1
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027b0:	2b40      	cmp	r3, #64	; 0x40
 80027b2:	d112      	bne.n	80027da <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	691a      	ldr	r2, [r3, #16]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c6:	1c5a      	adds	r2, r3, #1
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	3b01      	subs	r3, #1
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027de:	b29b      	uxth	r3, r3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d005      	beq.n	80027f0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e8:	f043 0204 	orr.w	r2, r3, #4
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 f8b3 	bl	8002964 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80027fe:	e039      	b.n	8002874 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002800:	7bfb      	ldrb	r3, [r7, #15]
 8002802:	2b2a      	cmp	r3, #42	; 0x2a
 8002804:	d109      	bne.n	800281a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2228      	movs	r2, #40	; 0x28
 8002810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f7ff f890 	bl	800193a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b28      	cmp	r3, #40	; 0x28
 8002824:	d111      	bne.n	800284a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a15      	ldr	r2, [pc, #84]	; (8002880 <I2C_Slave_STOPF+0x25c>)
 800282a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2220      	movs	r2, #32
 8002836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7ff f891 	bl	800196a <HAL_I2C_ListenCpltCallback>
}
 8002848:	e014      	b.n	8002874 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	2b22      	cmp	r3, #34	; 0x22
 8002850:	d002      	beq.n	8002858 <I2C_Slave_STOPF+0x234>
 8002852:	7bfb      	ldrb	r3, [r7, #15]
 8002854:	2b22      	cmp	r3, #34	; 0x22
 8002856:	d10d      	bne.n	8002874 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2220      	movs	r2, #32
 8002862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7ff f863 	bl	800193a <HAL_I2C_SlaveRxCpltCallback>
}
 8002874:	bf00      	nop
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	08002ded 	.word	0x08002ded
 8002880:	ffff0000 	.word	0xffff0000

08002884 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002892:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002898:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	2b08      	cmp	r3, #8
 800289e:	d002      	beq.n	80028a6 <I2C_Slave_AF+0x22>
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	2b20      	cmp	r3, #32
 80028a4:	d129      	bne.n	80028fa <I2C_Slave_AF+0x76>
 80028a6:	7bfb      	ldrb	r3, [r7, #15]
 80028a8:	2b28      	cmp	r3, #40	; 0x28
 80028aa:	d126      	bne.n	80028fa <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a2c      	ldr	r2, [pc, #176]	; (8002960 <I2C_Slave_AF+0xdc>)
 80028b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685a      	ldr	r2, [r3, #4]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80028c0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028ca:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028da:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2220      	movs	r2, #32
 80028e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f7ff f839 	bl	800196a <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80028f8:	e02e      	b.n	8002958 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80028fa:	7bfb      	ldrb	r3, [r7, #15]
 80028fc:	2b21      	cmp	r3, #33	; 0x21
 80028fe:	d126      	bne.n	800294e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a17      	ldr	r2, [pc, #92]	; (8002960 <I2C_Slave_AF+0xdc>)
 8002904:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2221      	movs	r2, #33	; 0x21
 800290a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2220      	movs	r2, #32
 8002910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800292a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002934:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002944:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7fe ffed 	bl	8001926 <HAL_I2C_SlaveTxCpltCallback>
}
 800294c:	e004      	b.n	8002958 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002956:	615a      	str	r2, [r3, #20]
}
 8002958:	bf00      	nop
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	ffff0000 	.word	0xffff0000

08002964 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002972:	73fb      	strb	r3, [r7, #15]

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b10      	cmp	r3, #16
 800297e:	d10a      	bne.n	8002996 <I2C_ITError+0x32>
 8002980:	7bfb      	ldrb	r3, [r7, #15]
 8002982:	2b22      	cmp	r3, #34	; 0x22
 8002984:	d107      	bne.n	8002996 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002994:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002996:	7bfb      	ldrb	r3, [r7, #15]
 8002998:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800299c:	2b28      	cmp	r3, #40	; 0x28
 800299e:	d107      	bne.n	80029b0 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2228      	movs	r2, #40	; 0x28
 80029aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80029ae:	e015      	b.n	80029dc <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029be:	d006      	beq.n	80029ce <I2C_ITError+0x6a>
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
 80029c2:	2b60      	cmp	r3, #96	; 0x60
 80029c4:	d003      	beq.n	80029ce <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2220      	movs	r2, #32
 80029ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029ea:	d162      	bne.n	8002ab2 <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	685a      	ldr	r2, [r3, #4]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029fa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d020      	beq.n	8002a4c <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a0e:	4a5f      	ldr	r2, [pc, #380]	; (8002b8c <I2C_ITError+0x228>)
 8002a10:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7fd ff4f 	bl	80008ba <HAL_DMA_Abort_IT>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 8089 	beq.w	8002b36 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f022 0201 	bic.w	r2, r2, #1
 8002a32:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2220      	movs	r2, #32
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a46:	4610      	mov	r0, r2
 8002a48:	4798      	blx	r3
 8002a4a:	e074      	b.n	8002b36 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a50:	4a4e      	ldr	r2, [pc, #312]	; (8002b8c <I2C_ITError+0x228>)
 8002a52:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7fd ff2e 	bl	80008ba <HAL_DMA_Abort_IT>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d068      	beq.n	8002b36 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a6e:	2b40      	cmp	r3, #64	; 0x40
 8002a70:	d10b      	bne.n	8002a8a <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	691a      	ldr	r2, [r3, #16]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	1c5a      	adds	r2, r3, #1
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 0201 	bic.w	r2, r2, #1
 8002a98:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2220      	movs	r2, #32
 8002a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002aac:	4610      	mov	r0, r2
 8002aae:	4798      	blx	r3
 8002ab0:	e041      	b.n	8002b36 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b60      	cmp	r3, #96	; 0x60
 8002abc:	d125      	bne.n	8002b0a <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2220      	movs	r2, #32
 8002ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad6:	2b40      	cmp	r3, #64	; 0x40
 8002ad8:	d10b      	bne.n	8002af2 <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	691a      	ldr	r2, [r3, #16]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae4:	b2d2      	uxtb	r2, r2
 8002ae6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	1c5a      	adds	r2, r3, #1
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f022 0201 	bic.w	r2, r2, #1
 8002b00:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7fe ff59 	bl	80019ba <HAL_I2C_AbortCpltCallback>
 8002b08:	e015      	b.n	8002b36 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b14:	2b40      	cmp	r3, #64	; 0x40
 8002b16:	d10b      	bne.n	8002b30 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	691a      	ldr	r2, [r3, #16]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	1c5a      	adds	r2, r3, #1
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f7fe ff38 	bl	80019a6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b3c:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	f003 0304 	and.w	r3, r3, #4
 8002b46:	2b04      	cmp	r3, #4
 8002b48:	d11b      	bne.n	8002b82 <I2C_ITError+0x21e>
 8002b4a:	7bfb      	ldrb	r3, [r7, #15]
 8002b4c:	2b28      	cmp	r3, #40	; 0x28
 8002b4e:	d118      	bne.n	8002b82 <I2C_ITError+0x21e>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b5e:	605a      	str	r2, [r3, #4]

    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a0b      	ldr	r2, [pc, #44]	; (8002b90 <I2C_ITError+0x22c>)
 8002b64:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2220      	movs	r2, #32
 8002b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f7fe fef4 	bl	800196a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002b82:	bf00      	nop
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	08002ded 	.word	0x08002ded
 8002b90:	ffff0000 	.word	0xffff0000

08002b94 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b088      	sub	sp, #32
 8002b98:	af02      	add	r7, sp, #8
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	607a      	str	r2, [r7, #4]
 8002b9e:	603b      	str	r3, [r7, #0]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	2b08      	cmp	r3, #8
 8002bae:	d006      	beq.n	8002bbe <I2C_MasterRequestWrite+0x2a>
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d003      	beq.n	8002bbe <I2C_MasterRequestWrite+0x2a>
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002bbc:	d108      	bne.n	8002bd0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	e00b      	b.n	8002be8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd4:	2b12      	cmp	r3, #18
 8002bd6:	d107      	bne.n	8002be8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002be6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f000 f968 	bl	8002eca <I2C_WaitOnFlagUntilTimeout>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e035      	b.n	8002c70 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c0c:	d108      	bne.n	8002c20 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c0e:	897b      	ldrh	r3, [r7, #10]
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	461a      	mov	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c1c:	611a      	str	r2, [r3, #16]
 8002c1e:	e01b      	b.n	8002c58 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c20:	897b      	ldrh	r3, [r7, #10]
 8002c22:	11db      	asrs	r3, r3, #7
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	f003 0306 	and.w	r3, r3, #6
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	f063 030f 	orn	r3, r3, #15
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	490e      	ldr	r1, [pc, #56]	; (8002c78 <I2C_MasterRequestWrite+0xe4>)
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 f99a 	bl	8002f78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e010      	b.n	8002c70 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c4e:	897b      	ldrh	r3, [r7, #10]
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	4907      	ldr	r1, [pc, #28]	; (8002c7c <I2C_MasterRequestWrite+0xe8>)
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f000 f98a 	bl	8002f78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e000      	b.n	8002c70 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3718      	adds	r7, #24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	00010008 	.word	0x00010008
 8002c7c:	00010002 	.word	0x00010002

08002c80 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b088      	sub	sp, #32
 8002c84:	af02      	add	r7, sp, #8
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	607a      	str	r2, [r7, #4]
 8002c8a:	603b      	str	r3, [r7, #0]
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c94:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ca4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	2b08      	cmp	r3, #8
 8002caa:	d006      	beq.n	8002cba <I2C_MasterRequestRead+0x3a>
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d003      	beq.n	8002cba <I2C_MasterRequestRead+0x3a>
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002cb8:	d108      	bne.n	8002ccc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	e00b      	b.n	8002ce4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd0:	2b11      	cmp	r3, #17
 8002cd2:	d107      	bne.n	8002ce4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ce2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	9300      	str	r3, [sp, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f000 f8ea 	bl	8002eca <I2C_WaitOnFlagUntilTimeout>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e06d      	b.n	8002ddc <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d08:	d108      	bne.n	8002d1c <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d0a:	897b      	ldrh	r3, [r7, #10]
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	f043 0301 	orr.w	r3, r3, #1
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	611a      	str	r2, [r3, #16]
 8002d1a:	e053      	b.n	8002dc4 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d1c:	897b      	ldrh	r3, [r7, #10]
 8002d1e:	11db      	asrs	r3, r3, #7
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	f003 0306 	and.w	r3, r3, #6
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	f063 030f 	orn	r3, r3, #15
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	492a      	ldr	r1, [pc, #168]	; (8002de4 <I2C_MasterRequestRead+0x164>)
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f000 f91c 	bl	8002f78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e048      	b.n	8002ddc <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d4a:	897b      	ldrh	r3, [r7, #10]
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	4923      	ldr	r1, [pc, #140]	; (8002de8 <I2C_MasterRequestRead+0x168>)
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 f90c 	bl	8002f78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e038      	b.n	8002ddc <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	613b      	str	r3, [r7, #16]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	613b      	str	r3, [r7, #16]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	613b      	str	r3, [r7, #16]
 8002d7e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d8e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f000 f894 	bl	8002eca <I2C_WaitOnFlagUntilTimeout>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e017      	b.n	8002ddc <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002dac:	897b      	ldrh	r3, [r7, #10]
 8002dae:	11db      	asrs	r3, r3, #7
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	f003 0306 	and.w	r3, r3, #6
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	f063 030e 	orn	r3, r3, #14
 8002dbc:	b2da      	uxtb	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	4907      	ldr	r1, [pc, #28]	; (8002de8 <I2C_MasterRequestRead+0x168>)
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f000 f8d4 	bl	8002f78 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e000      	b.n	8002ddc <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3718      	adds	r7, #24
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	00010008 	.word	0x00010008
 8002de8:	00010002 	.word	0x00010002

08002dec <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df8:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e00:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e06:	2200      	movs	r2, #0
 8002e08:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2c->hdmarx->XferCpltCallback = NULL;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0e:	2200      	movs	r2, #0
 8002e10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e20:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	651a      	str	r2, [r3, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e34:	2200      	movs	r2, #0
 8002e36:	651a      	str	r2, [r3, #80]	; 0x50

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0201 	bic.w	r2, r2, #1
 8002e46:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b60      	cmp	r3, #96	; 0x60
 8002e52:	d10e      	bne.n	8002e72 <I2C_DMAAbort+0x86>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2220      	movs	r2, #32
 8002e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f7fe fda5 	bl	80019ba <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002e70:	e027      	b.n	8002ec2 <I2C_DMAAbort+0xd6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e72:	7afb      	ldrb	r3, [r7, #11]
 8002e74:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002e78:	2b28      	cmp	r3, #40	; 0x28
 8002e7a:	d117      	bne.n	8002eac <I2C_DMAAbort+0xc0>
      __HAL_I2C_ENABLE(hi2c);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f042 0201 	orr.w	r2, r2, #1
 8002e8a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e9a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2228      	movs	r2, #40	; 0x28
 8002ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002eaa:	e007      	b.n	8002ebc <I2C_DMAAbort+0xd0>
      hi2c->State = HAL_I2C_STATE_READY;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f7fe fd72 	bl	80019a6 <HAL_I2C_ErrorCallback>
}
 8002ec2:	bf00      	nop
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b084      	sub	sp, #16
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	60f8      	str	r0, [r7, #12]
 8002ed2:	60b9      	str	r1, [r7, #8]
 8002ed4:	603b      	str	r3, [r7, #0]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002eda:	e025      	b.n	8002f28 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee2:	d021      	beq.n	8002f28 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ee4:	f7fd fbaa 	bl	800063c <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d302      	bcc.n	8002efa <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d116      	bne.n	8002f28 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2220      	movs	r2, #32
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f14:	f043 0220 	orr.w	r2, r3, #32
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e023      	b.n	8002f70 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	0c1b      	lsrs	r3, r3, #16
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d10d      	bne.n	8002f4e <I2C_WaitOnFlagUntilTimeout+0x84>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	43da      	mvns	r2, r3
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	bf0c      	ite	eq
 8002f44:	2301      	moveq	r3, #1
 8002f46:	2300      	movne	r3, #0
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	e00c      	b.n	8002f68 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	43da      	mvns	r2, r3
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	bf0c      	ite	eq
 8002f60:	2301      	moveq	r3, #1
 8002f62:	2300      	movne	r3, #0
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	461a      	mov	r2, r3
 8002f68:	79fb      	ldrb	r3, [r7, #7]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d0b6      	beq.n	8002edc <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
 8002f84:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f86:	e051      	b.n	800302c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f96:	d123      	bne.n	8002fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fa6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fb0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fcc:	f043 0204 	orr.w	r2, r3, #4
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e046      	b.n	800306e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe6:	d021      	beq.n	800302c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fe8:	f7fd fb28 	bl	800063c <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d302      	bcc.n	8002ffe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d116      	bne.n	800302c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2220      	movs	r2, #32
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003018:	f043 0220 	orr.w	r2, r3, #32
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e020      	b.n	800306e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	0c1b      	lsrs	r3, r3, #16
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b01      	cmp	r3, #1
 8003034:	d10c      	bne.n	8003050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	43da      	mvns	r2, r3
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	4013      	ands	r3, r2
 8003042:	b29b      	uxth	r3, r3
 8003044:	2b00      	cmp	r3, #0
 8003046:	bf14      	ite	ne
 8003048:	2301      	movne	r3, #1
 800304a:	2300      	moveq	r3, #0
 800304c:	b2db      	uxtb	r3, r3
 800304e:	e00b      	b.n	8003068 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	43da      	mvns	r2, r3
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	4013      	ands	r3, r2
 800305c:	b29b      	uxth	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	bf14      	ite	ne
 8003062:	2301      	movne	r3, #1
 8003064:	2300      	moveq	r3, #0
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2b00      	cmp	r3, #0
 800306a:	d18d      	bne.n	8002f88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b084      	sub	sp, #16
 800307a:	af00      	add	r7, sp, #0
 800307c:	60f8      	str	r0, [r7, #12]
 800307e:	60b9      	str	r1, [r7, #8]
 8003080:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003082:	e02d      	b.n	80030e0 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 f8ce 	bl	8003226 <I2C_IsAcknowledgeFailed>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e02d      	b.n	80030f0 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800309a:	d021      	beq.n	80030e0 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800309c:	f7fd face 	bl	800063c <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	68ba      	ldr	r2, [r7, #8]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d302      	bcc.n	80030b2 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d116      	bne.n	80030e0 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2220      	movs	r2, #32
 80030bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030cc:	f043 0220 	orr.w	r2, r3, #32
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e007      	b.n	80030f0 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ea:	2b80      	cmp	r3, #128	; 0x80
 80030ec:	d1ca      	bne.n	8003084 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003104:	e02d      	b.n	8003162 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f000 f88d 	bl	8003226 <I2C_IsAcknowledgeFailed>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e02d      	b.n	8003172 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311c:	d021      	beq.n	8003162 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800311e:	f7fd fa8d 	bl	800063c <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	429a      	cmp	r2, r3
 800312c:	d302      	bcc.n	8003134 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d116      	bne.n	8003162 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2220      	movs	r2, #32
 800313e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	f043 0220 	orr.w	r2, r3, #32
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e007      	b.n	8003172 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b04      	cmp	r3, #4
 800316e:	d1ca      	bne.n	8003106 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b084      	sub	sp, #16
 800317e:	af00      	add	r7, sp, #0
 8003180:	60f8      	str	r0, [r7, #12]
 8003182:	60b9      	str	r1, [r7, #8]
 8003184:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003186:	e042      	b.n	800320e <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	f003 0310 	and.w	r3, r3, #16
 8003192:	2b10      	cmp	r3, #16
 8003194:	d119      	bne.n	80031ca <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f06f 0210 	mvn.w	r2, #16
 800319e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2220      	movs	r2, #32
 80031aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e029      	b.n	800321e <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ca:	f7fd fa37 	bl	800063c <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d302      	bcc.n	80031e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d116      	bne.n	800320e <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2220      	movs	r2, #32
 80031ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	f043 0220 	orr.w	r2, r3, #32
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e007      	b.n	800321e <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003218:	2b40      	cmp	r3, #64	; 0x40
 800321a:	d1b5      	bne.n	8003188 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003226:	b480      	push	{r7}
 8003228:	b083      	sub	sp, #12
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800323c:	d11b      	bne.n	8003276 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003246:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2220      	movs	r2, #32
 8003252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	f043 0204 	orr.w	r2, r3, #4
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e000      	b.n	8003278 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003290:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003294:	d103      	bne.n	800329e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2201      	movs	r2, #1
 800329a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800329c:	e007      	b.n	80032ae <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80032a6:	d102      	bne.n	80032ae <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2208      	movs	r2, #8
 80032ac:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
	...

080032bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e22d      	b.n	800372a <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d075      	beq.n	80033c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032da:	4ba3      	ldr	r3, [pc, #652]	; (8003568 <HAL_RCC_OscConfig+0x2ac>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f003 030c 	and.w	r3, r3, #12
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	d00c      	beq.n	8003300 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032e6:	4ba0      	ldr	r3, [pc, #640]	; (8003568 <HAL_RCC_OscConfig+0x2ac>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032ee:	2b08      	cmp	r3, #8
 80032f0:	d112      	bne.n	8003318 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032f2:	4b9d      	ldr	r3, [pc, #628]	; (8003568 <HAL_RCC_OscConfig+0x2ac>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032fe:	d10b      	bne.n	8003318 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003300:	4b99      	ldr	r3, [pc, #612]	; (8003568 <HAL_RCC_OscConfig+0x2ac>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d05b      	beq.n	80033c4 <HAL_RCC_OscConfig+0x108>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d157      	bne.n	80033c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e208      	b.n	800372a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003320:	d106      	bne.n	8003330 <HAL_RCC_OscConfig+0x74>
 8003322:	4b91      	ldr	r3, [pc, #580]	; (8003568 <HAL_RCC_OscConfig+0x2ac>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a90      	ldr	r2, [pc, #576]	; (8003568 <HAL_RCC_OscConfig+0x2ac>)
 8003328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800332c:	6013      	str	r3, [r2, #0]
 800332e:	e01d      	b.n	800336c <HAL_RCC_OscConfig+0xb0>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003338:	d10c      	bne.n	8003354 <HAL_RCC_OscConfig+0x98>
 800333a:	4b8b      	ldr	r3, [pc, #556]	; (8003568 <HAL_RCC_OscConfig+0x2ac>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a8a      	ldr	r2, [pc, #552]	; (8003568 <HAL_RCC_OscConfig+0x2ac>)
 8003340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003344:	6013      	str	r3, [r2, #0]
 8003346:	4b88      	ldr	r3, [pc, #544]	; (8003568 <HAL_RCC_OscConfig+0x2ac>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a87      	ldr	r2, [pc, #540]	; (8003568 <HAL_RCC_OscConfig+0x2ac>)
 800334c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003350:	6013      	str	r3, [r2, #0]
 8003352:	e00b      	b.n	800336c <HAL_RCC_OscConfig+0xb0>
 8003354:	4b84      	ldr	r3, [pc, #528]	; (8003568 <HAL_RCC_OscConfig+0x2ac>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a83      	ldr	r2, [pc, #524]	; (8003568 <HAL_RCC_OscConfig+0x2ac>)
 800335a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800335e:	6013      	str	r3, [r2, #0]
 8003360:	4b81      	ldr	r3, [pc, #516]	; (8003568 <HAL_RCC_OscConfig+0x2ac>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a80      	ldr	r2, [pc, #512]	; (8003568 <HAL_RCC_OscConfig+0x2ac>)
 8003366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800336a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d013      	beq.n	800339c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003374:	f7fd f962 	bl	800063c <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800337c:	f7fd f95e 	bl	800063c <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b64      	cmp	r3, #100	; 0x64
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e1cd      	b.n	800372a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800338e:	4b76      	ldr	r3, [pc, #472]	; (8003568 <HAL_RCC_OscConfig+0x2ac>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d0f0      	beq.n	800337c <HAL_RCC_OscConfig+0xc0>
 800339a:	e014      	b.n	80033c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339c:	f7fd f94e 	bl	800063c <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033a4:	f7fd f94a 	bl	800063c <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b64      	cmp	r3, #100	; 0x64
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e1b9      	b.n	800372a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033b6:	4b6c      	ldr	r3, [pc, #432]	; (8003568 <HAL_RCC_OscConfig+0x2ac>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1f0      	bne.n	80033a4 <HAL_RCC_OscConfig+0xe8>
 80033c2:	e000      	b.n	80033c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d063      	beq.n	800349a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033d2:	4b65      	ldr	r3, [pc, #404]	; (8003568 <HAL_RCC_OscConfig+0x2ac>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 030c 	and.w	r3, r3, #12
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00b      	beq.n	80033f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033de:	4b62      	ldr	r3, [pc, #392]	; (8003568 <HAL_RCC_OscConfig+0x2ac>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033e6:	2b08      	cmp	r3, #8
 80033e8:	d11c      	bne.n	8003424 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ea:	4b5f      	ldr	r3, [pc, #380]	; (8003568 <HAL_RCC_OscConfig+0x2ac>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d116      	bne.n	8003424 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033f6:	4b5c      	ldr	r3, [pc, #368]	; (8003568 <HAL_RCC_OscConfig+0x2ac>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d005      	beq.n	800340e <HAL_RCC_OscConfig+0x152>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d001      	beq.n	800340e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e18d      	b.n	800372a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800340e:	4b56      	ldr	r3, [pc, #344]	; (8003568 <HAL_RCC_OscConfig+0x2ac>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	4952      	ldr	r1, [pc, #328]	; (8003568 <HAL_RCC_OscConfig+0x2ac>)
 800341e:	4313      	orrs	r3, r2
 8003420:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003422:	e03a      	b.n	800349a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d020      	beq.n	800346e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800342c:	4b4f      	ldr	r3, [pc, #316]	; (800356c <HAL_RCC_OscConfig+0x2b0>)
 800342e:	2201      	movs	r2, #1
 8003430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003432:	f7fd f903 	bl	800063c <HAL_GetTick>
 8003436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003438:	e008      	b.n	800344c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800343a:	f7fd f8ff 	bl	800063c <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d901      	bls.n	800344c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e16e      	b.n	800372a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800344c:	4b46      	ldr	r3, [pc, #280]	; (8003568 <HAL_RCC_OscConfig+0x2ac>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d0f0      	beq.n	800343a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003458:	4b43      	ldr	r3, [pc, #268]	; (8003568 <HAL_RCC_OscConfig+0x2ac>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	4940      	ldr	r1, [pc, #256]	; (8003568 <HAL_RCC_OscConfig+0x2ac>)
 8003468:	4313      	orrs	r3, r2
 800346a:	600b      	str	r3, [r1, #0]
 800346c:	e015      	b.n	800349a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800346e:	4b3f      	ldr	r3, [pc, #252]	; (800356c <HAL_RCC_OscConfig+0x2b0>)
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003474:	f7fd f8e2 	bl	800063c <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800347c:	f7fd f8de 	bl	800063c <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e14d      	b.n	800372a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800348e:	4b36      	ldr	r3, [pc, #216]	; (8003568 <HAL_RCC_OscConfig+0x2ac>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1f0      	bne.n	800347c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0308 	and.w	r3, r3, #8
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d030      	beq.n	8003508 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d016      	beq.n	80034dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034ae:	4b30      	ldr	r3, [pc, #192]	; (8003570 <HAL_RCC_OscConfig+0x2b4>)
 80034b0:	2201      	movs	r2, #1
 80034b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b4:	f7fd f8c2 	bl	800063c <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034bc:	f7fd f8be 	bl	800063c <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e12d      	b.n	800372a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ce:	4b26      	ldr	r3, [pc, #152]	; (8003568 <HAL_RCC_OscConfig+0x2ac>)
 80034d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d0f0      	beq.n	80034bc <HAL_RCC_OscConfig+0x200>
 80034da:	e015      	b.n	8003508 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034dc:	4b24      	ldr	r3, [pc, #144]	; (8003570 <HAL_RCC_OscConfig+0x2b4>)
 80034de:	2200      	movs	r2, #0
 80034e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e2:	f7fd f8ab 	bl	800063c <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034e8:	e008      	b.n	80034fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034ea:	f7fd f8a7 	bl	800063c <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e116      	b.n	800372a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034fc:	4b1a      	ldr	r3, [pc, #104]	; (8003568 <HAL_RCC_OscConfig+0x2ac>)
 80034fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d1f0      	bne.n	80034ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0304 	and.w	r3, r3, #4
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 80a0 	beq.w	8003656 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003516:	2300      	movs	r3, #0
 8003518:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800351a:	4b13      	ldr	r3, [pc, #76]	; (8003568 <HAL_RCC_OscConfig+0x2ac>)
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10f      	bne.n	8003546 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003526:	2300      	movs	r3, #0
 8003528:	60fb      	str	r3, [r7, #12]
 800352a:	4b0f      	ldr	r3, [pc, #60]	; (8003568 <HAL_RCC_OscConfig+0x2ac>)
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352e:	4a0e      	ldr	r2, [pc, #56]	; (8003568 <HAL_RCC_OscConfig+0x2ac>)
 8003530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003534:	6413      	str	r3, [r2, #64]	; 0x40
 8003536:	4b0c      	ldr	r3, [pc, #48]	; (8003568 <HAL_RCC_OscConfig+0x2ac>)
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353e:	60fb      	str	r3, [r7, #12]
 8003540:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003542:	2301      	movs	r3, #1
 8003544:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003546:	4b0b      	ldr	r3, [pc, #44]	; (8003574 <HAL_RCC_OscConfig+0x2b8>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354e:	2b00      	cmp	r3, #0
 8003550:	d121      	bne.n	8003596 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003552:	4b08      	ldr	r3, [pc, #32]	; (8003574 <HAL_RCC_OscConfig+0x2b8>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a07      	ldr	r2, [pc, #28]	; (8003574 <HAL_RCC_OscConfig+0x2b8>)
 8003558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800355c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800355e:	f7fd f86d 	bl	800063c <HAL_GetTick>
 8003562:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003564:	e011      	b.n	800358a <HAL_RCC_OscConfig+0x2ce>
 8003566:	bf00      	nop
 8003568:	40023800 	.word	0x40023800
 800356c:	42470000 	.word	0x42470000
 8003570:	42470e80 	.word	0x42470e80
 8003574:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003578:	f7fd f860 	bl	800063c <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e0cf      	b.n	800372a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800358a:	4b6a      	ldr	r3, [pc, #424]	; (8003734 <HAL_RCC_OscConfig+0x478>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003592:	2b00      	cmp	r3, #0
 8003594:	d0f0      	beq.n	8003578 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d106      	bne.n	80035ac <HAL_RCC_OscConfig+0x2f0>
 800359e:	4b66      	ldr	r3, [pc, #408]	; (8003738 <HAL_RCC_OscConfig+0x47c>)
 80035a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a2:	4a65      	ldr	r2, [pc, #404]	; (8003738 <HAL_RCC_OscConfig+0x47c>)
 80035a4:	f043 0301 	orr.w	r3, r3, #1
 80035a8:	6713      	str	r3, [r2, #112]	; 0x70
 80035aa:	e01c      	b.n	80035e6 <HAL_RCC_OscConfig+0x32a>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	2b05      	cmp	r3, #5
 80035b2:	d10c      	bne.n	80035ce <HAL_RCC_OscConfig+0x312>
 80035b4:	4b60      	ldr	r3, [pc, #384]	; (8003738 <HAL_RCC_OscConfig+0x47c>)
 80035b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b8:	4a5f      	ldr	r2, [pc, #380]	; (8003738 <HAL_RCC_OscConfig+0x47c>)
 80035ba:	f043 0304 	orr.w	r3, r3, #4
 80035be:	6713      	str	r3, [r2, #112]	; 0x70
 80035c0:	4b5d      	ldr	r3, [pc, #372]	; (8003738 <HAL_RCC_OscConfig+0x47c>)
 80035c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c4:	4a5c      	ldr	r2, [pc, #368]	; (8003738 <HAL_RCC_OscConfig+0x47c>)
 80035c6:	f043 0301 	orr.w	r3, r3, #1
 80035ca:	6713      	str	r3, [r2, #112]	; 0x70
 80035cc:	e00b      	b.n	80035e6 <HAL_RCC_OscConfig+0x32a>
 80035ce:	4b5a      	ldr	r3, [pc, #360]	; (8003738 <HAL_RCC_OscConfig+0x47c>)
 80035d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d2:	4a59      	ldr	r2, [pc, #356]	; (8003738 <HAL_RCC_OscConfig+0x47c>)
 80035d4:	f023 0301 	bic.w	r3, r3, #1
 80035d8:	6713      	str	r3, [r2, #112]	; 0x70
 80035da:	4b57      	ldr	r3, [pc, #348]	; (8003738 <HAL_RCC_OscConfig+0x47c>)
 80035dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035de:	4a56      	ldr	r2, [pc, #344]	; (8003738 <HAL_RCC_OscConfig+0x47c>)
 80035e0:	f023 0304 	bic.w	r3, r3, #4
 80035e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d015      	beq.n	800361a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ee:	f7fd f825 	bl	800063c <HAL_GetTick>
 80035f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f4:	e00a      	b.n	800360c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035f6:	f7fd f821 	bl	800063c <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	f241 3288 	movw	r2, #5000	; 0x1388
 8003604:	4293      	cmp	r3, r2
 8003606:	d901      	bls.n	800360c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e08e      	b.n	800372a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800360c:	4b4a      	ldr	r3, [pc, #296]	; (8003738 <HAL_RCC_OscConfig+0x47c>)
 800360e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d0ee      	beq.n	80035f6 <HAL_RCC_OscConfig+0x33a>
 8003618:	e014      	b.n	8003644 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800361a:	f7fd f80f 	bl	800063c <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003620:	e00a      	b.n	8003638 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003622:	f7fd f80b 	bl	800063c <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003630:	4293      	cmp	r3, r2
 8003632:	d901      	bls.n	8003638 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e078      	b.n	800372a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003638:	4b3f      	ldr	r3, [pc, #252]	; (8003738 <HAL_RCC_OscConfig+0x47c>)
 800363a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1ee      	bne.n	8003622 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003644:	7dfb      	ldrb	r3, [r7, #23]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d105      	bne.n	8003656 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800364a:	4b3b      	ldr	r3, [pc, #236]	; (8003738 <HAL_RCC_OscConfig+0x47c>)
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	4a3a      	ldr	r2, [pc, #232]	; (8003738 <HAL_RCC_OscConfig+0x47c>)
 8003650:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003654:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d064      	beq.n	8003728 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800365e:	4b36      	ldr	r3, [pc, #216]	; (8003738 <HAL_RCC_OscConfig+0x47c>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f003 030c 	and.w	r3, r3, #12
 8003666:	2b08      	cmp	r3, #8
 8003668:	d05c      	beq.n	8003724 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	2b02      	cmp	r3, #2
 8003670:	d141      	bne.n	80036f6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003672:	4b32      	ldr	r3, [pc, #200]	; (800373c <HAL_RCC_OscConfig+0x480>)
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003678:	f7fc ffe0 	bl	800063c <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003680:	f7fc ffdc 	bl	800063c <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e04b      	b.n	800372a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003692:	4b29      	ldr	r3, [pc, #164]	; (8003738 <HAL_RCC_OscConfig+0x47c>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1f0      	bne.n	8003680 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	69da      	ldr	r2, [r3, #28]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	431a      	orrs	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	019b      	lsls	r3, r3, #6
 80036ae:	431a      	orrs	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b4:	085b      	lsrs	r3, r3, #1
 80036b6:	3b01      	subs	r3, #1
 80036b8:	041b      	lsls	r3, r3, #16
 80036ba:	431a      	orrs	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c0:	061b      	lsls	r3, r3, #24
 80036c2:	491d      	ldr	r1, [pc, #116]	; (8003738 <HAL_RCC_OscConfig+0x47c>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036c8:	4b1c      	ldr	r3, [pc, #112]	; (800373c <HAL_RCC_OscConfig+0x480>)
 80036ca:	2201      	movs	r2, #1
 80036cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ce:	f7fc ffb5 	bl	800063c <HAL_GetTick>
 80036d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036d4:	e008      	b.n	80036e8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036d6:	f7fc ffb1 	bl	800063c <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d901      	bls.n	80036e8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e020      	b.n	800372a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036e8:	4b13      	ldr	r3, [pc, #76]	; (8003738 <HAL_RCC_OscConfig+0x47c>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0f0      	beq.n	80036d6 <HAL_RCC_OscConfig+0x41a>
 80036f4:	e018      	b.n	8003728 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f6:	4b11      	ldr	r3, [pc, #68]	; (800373c <HAL_RCC_OscConfig+0x480>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fc:	f7fc ff9e 	bl	800063c <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003704:	f7fc ff9a 	bl	800063c <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e009      	b.n	800372a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003716:	4b08      	ldr	r3, [pc, #32]	; (8003738 <HAL_RCC_OscConfig+0x47c>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1f0      	bne.n	8003704 <HAL_RCC_OscConfig+0x448>
 8003722:	e001      	b.n	8003728 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e000      	b.n	800372a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3718      	adds	r7, #24
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	40007000 	.word	0x40007000
 8003738:	40023800 	.word	0x40023800
 800373c:	42470060 	.word	0x42470060

08003740 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d101      	bne.n	8003754 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e0ca      	b.n	80038ea <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003754:	4b67      	ldr	r3, [pc, #412]	; (80038f4 <HAL_RCC_ClockConfig+0x1b4>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 030f 	and.w	r3, r3, #15
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	429a      	cmp	r2, r3
 8003760:	d90c      	bls.n	800377c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003762:	4b64      	ldr	r3, [pc, #400]	; (80038f4 <HAL_RCC_ClockConfig+0x1b4>)
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	b2d2      	uxtb	r2, r2
 8003768:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800376a:	4b62      	ldr	r3, [pc, #392]	; (80038f4 <HAL_RCC_ClockConfig+0x1b4>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 030f 	and.w	r3, r3, #15
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	429a      	cmp	r2, r3
 8003776:	d001      	beq.n	800377c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e0b6      	b.n	80038ea <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d020      	beq.n	80037ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0304 	and.w	r3, r3, #4
 8003790:	2b00      	cmp	r3, #0
 8003792:	d005      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003794:	4b58      	ldr	r3, [pc, #352]	; (80038f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	4a57      	ldr	r2, [pc, #348]	; (80038f8 <HAL_RCC_ClockConfig+0x1b8>)
 800379a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800379e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0308 	and.w	r3, r3, #8
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d005      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037ac:	4b52      	ldr	r3, [pc, #328]	; (80038f8 <HAL_RCC_ClockConfig+0x1b8>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	4a51      	ldr	r2, [pc, #324]	; (80038f8 <HAL_RCC_ClockConfig+0x1b8>)
 80037b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037b8:	4b4f      	ldr	r3, [pc, #316]	; (80038f8 <HAL_RCC_ClockConfig+0x1b8>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	494c      	ldr	r1, [pc, #304]	; (80038f8 <HAL_RCC_ClockConfig+0x1b8>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d044      	beq.n	8003860 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d107      	bne.n	80037ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037de:	4b46      	ldr	r3, [pc, #280]	; (80038f8 <HAL_RCC_ClockConfig+0x1b8>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d119      	bne.n	800381e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e07d      	b.n	80038ea <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d003      	beq.n	80037fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037fa:	2b03      	cmp	r3, #3
 80037fc:	d107      	bne.n	800380e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037fe:	4b3e      	ldr	r3, [pc, #248]	; (80038f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d109      	bne.n	800381e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e06d      	b.n	80038ea <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800380e:	4b3a      	ldr	r3, [pc, #232]	; (80038f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e065      	b.n	80038ea <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800381e:	4b36      	ldr	r3, [pc, #216]	; (80038f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f023 0203 	bic.w	r2, r3, #3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	4933      	ldr	r1, [pc, #204]	; (80038f8 <HAL_RCC_ClockConfig+0x1b8>)
 800382c:	4313      	orrs	r3, r2
 800382e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003830:	f7fc ff04 	bl	800063c <HAL_GetTick>
 8003834:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003836:	e00a      	b.n	800384e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003838:	f7fc ff00 	bl	800063c <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	f241 3288 	movw	r2, #5000	; 0x1388
 8003846:	4293      	cmp	r3, r2
 8003848:	d901      	bls.n	800384e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e04d      	b.n	80038ea <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800384e:	4b2a      	ldr	r3, [pc, #168]	; (80038f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 020c 	and.w	r2, r3, #12
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	429a      	cmp	r2, r3
 800385e:	d1eb      	bne.n	8003838 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003860:	4b24      	ldr	r3, [pc, #144]	; (80038f4 <HAL_RCC_ClockConfig+0x1b4>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 030f 	and.w	r3, r3, #15
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	429a      	cmp	r2, r3
 800386c:	d20c      	bcs.n	8003888 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800386e:	4b21      	ldr	r3, [pc, #132]	; (80038f4 <HAL_RCC_ClockConfig+0x1b4>)
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003876:	4b1f      	ldr	r3, [pc, #124]	; (80038f4 <HAL_RCC_ClockConfig+0x1b4>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 030f 	and.w	r3, r3, #15
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	429a      	cmp	r2, r3
 8003882:	d001      	beq.n	8003888 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e030      	b.n	80038ea <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b00      	cmp	r3, #0
 8003892:	d008      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003894:	4b18      	ldr	r3, [pc, #96]	; (80038f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	4915      	ldr	r1, [pc, #84]	; (80038f8 <HAL_RCC_ClockConfig+0x1b8>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0308 	and.w	r3, r3, #8
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d009      	beq.n	80038c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038b2:	4b11      	ldr	r3, [pc, #68]	; (80038f8 <HAL_RCC_ClockConfig+0x1b8>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	490d      	ldr	r1, [pc, #52]	; (80038f8 <HAL_RCC_ClockConfig+0x1b8>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038c6:	f000 f81d 	bl	8003904 <HAL_RCC_GetSysClockFreq>
 80038ca:	4601      	mov	r1, r0
 80038cc:	4b0a      	ldr	r3, [pc, #40]	; (80038f8 <HAL_RCC_ClockConfig+0x1b8>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	091b      	lsrs	r3, r3, #4
 80038d2:	f003 030f 	and.w	r3, r3, #15
 80038d6:	4a09      	ldr	r2, [pc, #36]	; (80038fc <HAL_RCC_ClockConfig+0x1bc>)
 80038d8:	5cd3      	ldrb	r3, [r2, r3]
 80038da:	fa21 f303 	lsr.w	r3, r1, r3
 80038de:	4a08      	ldr	r2, [pc, #32]	; (8003900 <HAL_RCC_ClockConfig+0x1c0>)
 80038e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80038e2:	2000      	movs	r0, #0
 80038e4:	f7fc fe66 	bl	80005b4 <HAL_InitTick>

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	40023c00 	.word	0x40023c00
 80038f8:	40023800 	.word	0x40023800
 80038fc:	08005ac8 	.word	0x08005ac8
 8003900:	20000008 	.word	0x20000008

08003904 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800390a:	2300      	movs	r3, #0
 800390c:	607b      	str	r3, [r7, #4]
 800390e:	2300      	movs	r3, #0
 8003910:	60fb      	str	r3, [r7, #12]
 8003912:	2300      	movs	r3, #0
 8003914:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003916:	2300      	movs	r3, #0
 8003918:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800391a:	4b50      	ldr	r3, [pc, #320]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x158>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 030c 	and.w	r3, r3, #12
 8003922:	2b04      	cmp	r3, #4
 8003924:	d007      	beq.n	8003936 <HAL_RCC_GetSysClockFreq+0x32>
 8003926:	2b08      	cmp	r3, #8
 8003928:	d008      	beq.n	800393c <HAL_RCC_GetSysClockFreq+0x38>
 800392a:	2b00      	cmp	r3, #0
 800392c:	f040 808d 	bne.w	8003a4a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003930:	4b4b      	ldr	r3, [pc, #300]	; (8003a60 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003932:	60bb      	str	r3, [r7, #8]
       break;
 8003934:	e08c      	b.n	8003a50 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003936:	4b4b      	ldr	r3, [pc, #300]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x160>)
 8003938:	60bb      	str	r3, [r7, #8]
      break;
 800393a:	e089      	b.n	8003a50 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800393c:	4b47      	ldr	r3, [pc, #284]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x158>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003944:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003946:	4b45      	ldr	r3, [pc, #276]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x158>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d023      	beq.n	800399a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003952:	4b42      	ldr	r3, [pc, #264]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x158>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	099b      	lsrs	r3, r3, #6
 8003958:	f04f 0400 	mov.w	r4, #0
 800395c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003960:	f04f 0200 	mov.w	r2, #0
 8003964:	ea03 0501 	and.w	r5, r3, r1
 8003968:	ea04 0602 	and.w	r6, r4, r2
 800396c:	4a3d      	ldr	r2, [pc, #244]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x160>)
 800396e:	fb02 f106 	mul.w	r1, r2, r6
 8003972:	2200      	movs	r2, #0
 8003974:	fb02 f205 	mul.w	r2, r2, r5
 8003978:	440a      	add	r2, r1
 800397a:	493a      	ldr	r1, [pc, #232]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x160>)
 800397c:	fba5 0101 	umull	r0, r1, r5, r1
 8003980:	1853      	adds	r3, r2, r1
 8003982:	4619      	mov	r1, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f04f 0400 	mov.w	r4, #0
 800398a:	461a      	mov	r2, r3
 800398c:	4623      	mov	r3, r4
 800398e:	f7fc fc6f 	bl	8000270 <__aeabi_uldivmod>
 8003992:	4603      	mov	r3, r0
 8003994:	460c      	mov	r4, r1
 8003996:	60fb      	str	r3, [r7, #12]
 8003998:	e049      	b.n	8003a2e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800399a:	4b30      	ldr	r3, [pc, #192]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x158>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	099b      	lsrs	r3, r3, #6
 80039a0:	f04f 0400 	mov.w	r4, #0
 80039a4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80039a8:	f04f 0200 	mov.w	r2, #0
 80039ac:	ea03 0501 	and.w	r5, r3, r1
 80039b0:	ea04 0602 	and.w	r6, r4, r2
 80039b4:	4629      	mov	r1, r5
 80039b6:	4632      	mov	r2, r6
 80039b8:	f04f 0300 	mov.w	r3, #0
 80039bc:	f04f 0400 	mov.w	r4, #0
 80039c0:	0154      	lsls	r4, r2, #5
 80039c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80039c6:	014b      	lsls	r3, r1, #5
 80039c8:	4619      	mov	r1, r3
 80039ca:	4622      	mov	r2, r4
 80039cc:	1b49      	subs	r1, r1, r5
 80039ce:	eb62 0206 	sbc.w	r2, r2, r6
 80039d2:	f04f 0300 	mov.w	r3, #0
 80039d6:	f04f 0400 	mov.w	r4, #0
 80039da:	0194      	lsls	r4, r2, #6
 80039dc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80039e0:	018b      	lsls	r3, r1, #6
 80039e2:	1a5b      	subs	r3, r3, r1
 80039e4:	eb64 0402 	sbc.w	r4, r4, r2
 80039e8:	f04f 0100 	mov.w	r1, #0
 80039ec:	f04f 0200 	mov.w	r2, #0
 80039f0:	00e2      	lsls	r2, r4, #3
 80039f2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80039f6:	00d9      	lsls	r1, r3, #3
 80039f8:	460b      	mov	r3, r1
 80039fa:	4614      	mov	r4, r2
 80039fc:	195b      	adds	r3, r3, r5
 80039fe:	eb44 0406 	adc.w	r4, r4, r6
 8003a02:	f04f 0100 	mov.w	r1, #0
 8003a06:	f04f 0200 	mov.w	r2, #0
 8003a0a:	02a2      	lsls	r2, r4, #10
 8003a0c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003a10:	0299      	lsls	r1, r3, #10
 8003a12:	460b      	mov	r3, r1
 8003a14:	4614      	mov	r4, r2
 8003a16:	4618      	mov	r0, r3
 8003a18:	4621      	mov	r1, r4
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f04f 0400 	mov.w	r4, #0
 8003a20:	461a      	mov	r2, r3
 8003a22:	4623      	mov	r3, r4
 8003a24:	f7fc fc24 	bl	8000270 <__aeabi_uldivmod>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	460c      	mov	r4, r1
 8003a2c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a2e:	4b0b      	ldr	r3, [pc, #44]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x158>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	0c1b      	lsrs	r3, r3, #16
 8003a34:	f003 0303 	and.w	r3, r3, #3
 8003a38:	3301      	adds	r3, #1
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a46:	60bb      	str	r3, [r7, #8]
      break;
 8003a48:	e002      	b.n	8003a50 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a4a:	4b05      	ldr	r3, [pc, #20]	; (8003a60 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003a4c:	60bb      	str	r3, [r7, #8]
      break;
 8003a4e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a50:	68bb      	ldr	r3, [r7, #8]
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3714      	adds	r7, #20
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40023800 	.word	0x40023800
 8003a60:	00f42400 	.word	0x00f42400
 8003a64:	017d7840 	.word	0x017d7840

08003a68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a6c:	4b03      	ldr	r3, [pc, #12]	; (8003a7c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	20000008 	.word	0x20000008

08003a80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a84:	f7ff fff0 	bl	8003a68 <HAL_RCC_GetHCLKFreq>
 8003a88:	4601      	mov	r1, r0
 8003a8a:	4b05      	ldr	r3, [pc, #20]	; (8003aa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	0a9b      	lsrs	r3, r3, #10
 8003a90:	f003 0307 	and.w	r3, r3, #7
 8003a94:	4a03      	ldr	r2, [pc, #12]	; (8003aa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a96:	5cd3      	ldrb	r3, [r2, r3]
 8003a98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	40023800 	.word	0x40023800
 8003aa4:	08005ad8 	.word	0x08005ad8

08003aa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003aac:	f7ff ffdc 	bl	8003a68 <HAL_RCC_GetHCLKFreq>
 8003ab0:	4601      	mov	r1, r0
 8003ab2:	4b05      	ldr	r3, [pc, #20]	; (8003ac8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	0b5b      	lsrs	r3, r3, #13
 8003ab8:	f003 0307 	and.w	r3, r3, #7
 8003abc:	4a03      	ldr	r2, [pc, #12]	; (8003acc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003abe:	5cd3      	ldrb	r3, [r2, r3]
 8003ac0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	08005ad8 	.word	0x08005ad8

08003ad0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e03f      	b.n	8003b62 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d106      	bne.n	8003afc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 ff74 	bl	80049e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2224      	movs	r2, #36	; 0x24
 8003b00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68da      	ldr	r2, [r3, #12]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 f90b 	bl	8003d30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	691a      	ldr	r2, [r3, #16]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	695a      	ldr	r2, [r3, #20]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68da      	ldr	r2, [r3, #12]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2220      	movs	r2, #32
 8003b54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2220      	movs	r2, #32
 8003b5c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b088      	sub	sp, #32
 8003b6e:	af02      	add	r7, sp, #8
 8003b70:	60f8      	str	r0, [r7, #12]
 8003b72:	60b9      	str	r1, [r7, #8]
 8003b74:	603b      	str	r3, [r7, #0]
 8003b76:	4613      	mov	r3, r2
 8003b78:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b20      	cmp	r3, #32
 8003b88:	f040 8083 	bne.w	8003c92 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d002      	beq.n	8003b98 <HAL_UART_Transmit+0x2e>
 8003b92:	88fb      	ldrh	r3, [r7, #6]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d101      	bne.n	8003b9c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e07b      	b.n	8003c94 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d101      	bne.n	8003baa <HAL_UART_Transmit+0x40>
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	e074      	b.n	8003c94 <HAL_UART_Transmit+0x12a>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2221      	movs	r2, #33	; 0x21
 8003bbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003bc0:	f7fc fd3c 	bl	800063c <HAL_GetTick>
 8003bc4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	88fa      	ldrh	r2, [r7, #6]
 8003bca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	88fa      	ldrh	r2, [r7, #6]
 8003bd0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003bd2:	e042      	b.n	8003c5a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bea:	d122      	bne.n	8003c32 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	9300      	str	r3, [sp, #0]
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	2180      	movs	r1, #128	; 0x80
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 f850 	bl	8003c9c <UART_WaitOnFlagUntilTimeout>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e046      	b.n	8003c94 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	881b      	ldrh	r3, [r3, #0]
 8003c0e:	461a      	mov	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c18:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d103      	bne.n	8003c2a <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	3302      	adds	r3, #2
 8003c26:	60bb      	str	r3, [r7, #8]
 8003c28:	e017      	b.n	8003c5a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	60bb      	str	r3, [r7, #8]
 8003c30:	e013      	b.n	8003c5a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	9300      	str	r3, [sp, #0]
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	2180      	movs	r1, #128	; 0x80
 8003c3c:	68f8      	ldr	r0, [r7, #12]
 8003c3e:	f000 f82d 	bl	8003c9c <UART_WaitOnFlagUntilTimeout>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d001      	beq.n	8003c4c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e023      	b.n	8003c94 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	1c5a      	adds	r2, r3, #1
 8003c50:	60ba      	str	r2, [r7, #8]
 8003c52:	781a      	ldrb	r2, [r3, #0]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1b7      	bne.n	8003bd4 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	9300      	str	r3, [sp, #0]
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	2140      	movs	r1, #64	; 0x40
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f000 f814 	bl	8003c9c <UART_WaitOnFlagUntilTimeout>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e00a      	b.n	8003c94 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2220      	movs	r2, #32
 8003c82:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	e000      	b.n	8003c94 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003c92:	2302      	movs	r3, #2
  }
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3718      	adds	r7, #24
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	603b      	str	r3, [r7, #0]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cac:	e02c      	b.n	8003d08 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb4:	d028      	beq.n	8003d08 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d007      	beq.n	8003ccc <UART_WaitOnFlagUntilTimeout+0x30>
 8003cbc:	f7fc fcbe 	bl	800063c <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d21d      	bcs.n	8003d08 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003cda:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	695a      	ldr	r2, [r3, #20]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f022 0201 	bic.w	r2, r2, #1
 8003cea:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e00f      	b.n	8003d28 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	4013      	ands	r3, r2
 8003d12:	68ba      	ldr	r2, [r7, #8]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	bf0c      	ite	eq
 8003d18:	2301      	moveq	r3, #1
 8003d1a:	2300      	movne	r3, #0
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	461a      	mov	r2, r3
 8003d20:	79fb      	ldrb	r3, [r7, #7]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d0c3      	beq.n	8003cae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d30:	b5b0      	push	{r4, r5, r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68da      	ldr	r2, [r3, #12]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	689a      	ldr	r2, [r3, #8]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	431a      	orrs	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003d70:	f023 030c 	bic.w	r3, r3, #12
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	6812      	ldr	r2, [r2, #0]
 8003d78:	68f9      	ldr	r1, [r7, #12]
 8003d7a:	430b      	orrs	r3, r1
 8003d7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	699a      	ldr	r2, [r3, #24]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	430a      	orrs	r2, r1
 8003d92:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	69db      	ldr	r3, [r3, #28]
 8003d98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d9c:	f040 80e4 	bne.w	8003f68 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4aab      	ldr	r2, [pc, #684]	; (8004054 <UART_SetConfig+0x324>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d004      	beq.n	8003db4 <UART_SetConfig+0x84>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4aaa      	ldr	r2, [pc, #680]	; (8004058 <UART_SetConfig+0x328>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d16c      	bne.n	8003e8e <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003db4:	f7ff fe78 	bl	8003aa8 <HAL_RCC_GetPCLK2Freq>
 8003db8:	4602      	mov	r2, r0
 8003dba:	4613      	mov	r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	4413      	add	r3, r2
 8003dc0:	009a      	lsls	r2, r3, #2
 8003dc2:	441a      	add	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dce:	4aa3      	ldr	r2, [pc, #652]	; (800405c <UART_SetConfig+0x32c>)
 8003dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd4:	095b      	lsrs	r3, r3, #5
 8003dd6:	011c      	lsls	r4, r3, #4
 8003dd8:	f7ff fe66 	bl	8003aa8 <HAL_RCC_GetPCLK2Freq>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	4613      	mov	r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	4413      	add	r3, r2
 8003de4:	009a      	lsls	r2, r3, #2
 8003de6:	441a      	add	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	fbb2 f5f3 	udiv	r5, r2, r3
 8003df2:	f7ff fe59 	bl	8003aa8 <HAL_RCC_GetPCLK2Freq>
 8003df6:	4602      	mov	r2, r0
 8003df8:	4613      	mov	r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	4413      	add	r3, r2
 8003dfe:	009a      	lsls	r2, r3, #2
 8003e00:	441a      	add	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	005b      	lsls	r3, r3, #1
 8003e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e0c:	4a93      	ldr	r2, [pc, #588]	; (800405c <UART_SetConfig+0x32c>)
 8003e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e12:	095b      	lsrs	r3, r3, #5
 8003e14:	2264      	movs	r2, #100	; 0x64
 8003e16:	fb02 f303 	mul.w	r3, r2, r3
 8003e1a:	1aeb      	subs	r3, r5, r3
 8003e1c:	00db      	lsls	r3, r3, #3
 8003e1e:	3332      	adds	r3, #50	; 0x32
 8003e20:	4a8e      	ldr	r2, [pc, #568]	; (800405c <UART_SetConfig+0x32c>)
 8003e22:	fba2 2303 	umull	r2, r3, r2, r3
 8003e26:	095b      	lsrs	r3, r3, #5
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e2e:	441c      	add	r4, r3
 8003e30:	f7ff fe3a 	bl	8003aa8 <HAL_RCC_GetPCLK2Freq>
 8003e34:	4602      	mov	r2, r0
 8003e36:	4613      	mov	r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	4413      	add	r3, r2
 8003e3c:	009a      	lsls	r2, r3, #2
 8003e3e:	441a      	add	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	fbb2 f5f3 	udiv	r5, r2, r3
 8003e4a:	f7ff fe2d 	bl	8003aa8 <HAL_RCC_GetPCLK2Freq>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	4613      	mov	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4413      	add	r3, r2
 8003e56:	009a      	lsls	r2, r3, #2
 8003e58:	441a      	add	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e64:	4a7d      	ldr	r2, [pc, #500]	; (800405c <UART_SetConfig+0x32c>)
 8003e66:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6a:	095b      	lsrs	r3, r3, #5
 8003e6c:	2264      	movs	r2, #100	; 0x64
 8003e6e:	fb02 f303 	mul.w	r3, r2, r3
 8003e72:	1aeb      	subs	r3, r5, r3
 8003e74:	00db      	lsls	r3, r3, #3
 8003e76:	3332      	adds	r3, #50	; 0x32
 8003e78:	4a78      	ldr	r2, [pc, #480]	; (800405c <UART_SetConfig+0x32c>)
 8003e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7e:	095b      	lsrs	r3, r3, #5
 8003e80:	f003 0207 	and.w	r2, r3, #7
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4422      	add	r2, r4
 8003e8a:	609a      	str	r2, [r3, #8]
 8003e8c:	e154      	b.n	8004138 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8003e8e:	f7ff fdf7 	bl	8003a80 <HAL_RCC_GetPCLK1Freq>
 8003e92:	4602      	mov	r2, r0
 8003e94:	4613      	mov	r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	4413      	add	r3, r2
 8003e9a:	009a      	lsls	r2, r3, #2
 8003e9c:	441a      	add	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea8:	4a6c      	ldr	r2, [pc, #432]	; (800405c <UART_SetConfig+0x32c>)
 8003eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003eae:	095b      	lsrs	r3, r3, #5
 8003eb0:	011c      	lsls	r4, r3, #4
 8003eb2:	f7ff fde5 	bl	8003a80 <HAL_RCC_GetPCLK1Freq>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	4613      	mov	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4413      	add	r3, r2
 8003ebe:	009a      	lsls	r2, r3, #2
 8003ec0:	441a      	add	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	005b      	lsls	r3, r3, #1
 8003ec8:	fbb2 f5f3 	udiv	r5, r2, r3
 8003ecc:	f7ff fdd8 	bl	8003a80 <HAL_RCC_GetPCLK1Freq>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4413      	add	r3, r2
 8003ed8:	009a      	lsls	r2, r3, #2
 8003eda:	441a      	add	r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	005b      	lsls	r3, r3, #1
 8003ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee6:	4a5d      	ldr	r2, [pc, #372]	; (800405c <UART_SetConfig+0x32c>)
 8003ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8003eec:	095b      	lsrs	r3, r3, #5
 8003eee:	2264      	movs	r2, #100	; 0x64
 8003ef0:	fb02 f303 	mul.w	r3, r2, r3
 8003ef4:	1aeb      	subs	r3, r5, r3
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	3332      	adds	r3, #50	; 0x32
 8003efa:	4a58      	ldr	r2, [pc, #352]	; (800405c <UART_SetConfig+0x32c>)
 8003efc:	fba2 2303 	umull	r2, r3, r2, r3
 8003f00:	095b      	lsrs	r3, r3, #5
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f08:	441c      	add	r4, r3
 8003f0a:	f7ff fdb9 	bl	8003a80 <HAL_RCC_GetPCLK1Freq>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	4613      	mov	r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	4413      	add	r3, r2
 8003f16:	009a      	lsls	r2, r3, #2
 8003f18:	441a      	add	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	005b      	lsls	r3, r3, #1
 8003f20:	fbb2 f5f3 	udiv	r5, r2, r3
 8003f24:	f7ff fdac 	bl	8003a80 <HAL_RCC_GetPCLK1Freq>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	4413      	add	r3, r2
 8003f30:	009a      	lsls	r2, r3, #2
 8003f32:	441a      	add	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f3e:	4a47      	ldr	r2, [pc, #284]	; (800405c <UART_SetConfig+0x32c>)
 8003f40:	fba2 2303 	umull	r2, r3, r2, r3
 8003f44:	095b      	lsrs	r3, r3, #5
 8003f46:	2264      	movs	r2, #100	; 0x64
 8003f48:	fb02 f303 	mul.w	r3, r2, r3
 8003f4c:	1aeb      	subs	r3, r5, r3
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	3332      	adds	r3, #50	; 0x32
 8003f52:	4a42      	ldr	r2, [pc, #264]	; (800405c <UART_SetConfig+0x32c>)
 8003f54:	fba2 2303 	umull	r2, r3, r2, r3
 8003f58:	095b      	lsrs	r3, r3, #5
 8003f5a:	f003 0207 	and.w	r2, r3, #7
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4422      	add	r2, r4
 8003f64:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8003f66:	e0e7      	b.n	8004138 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a39      	ldr	r2, [pc, #228]	; (8004054 <UART_SetConfig+0x324>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d004      	beq.n	8003f7c <UART_SetConfig+0x24c>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a38      	ldr	r2, [pc, #224]	; (8004058 <UART_SetConfig+0x328>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d171      	bne.n	8004060 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003f7c:	f7ff fd94 	bl	8003aa8 <HAL_RCC_GetPCLK2Freq>
 8003f80:	4602      	mov	r2, r0
 8003f82:	4613      	mov	r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4413      	add	r3, r2
 8003f88:	009a      	lsls	r2, r3, #2
 8003f8a:	441a      	add	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f96:	4a31      	ldr	r2, [pc, #196]	; (800405c <UART_SetConfig+0x32c>)
 8003f98:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9c:	095b      	lsrs	r3, r3, #5
 8003f9e:	011c      	lsls	r4, r3, #4
 8003fa0:	f7ff fd82 	bl	8003aa8 <HAL_RCC_GetPCLK2Freq>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4413      	add	r3, r2
 8003fac:	009a      	lsls	r2, r3, #2
 8003fae:	441a      	add	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	fbb2 f5f3 	udiv	r5, r2, r3
 8003fba:	f7ff fd75 	bl	8003aa8 <HAL_RCC_GetPCLK2Freq>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	4413      	add	r3, r2
 8003fc6:	009a      	lsls	r2, r3, #2
 8003fc8:	441a      	add	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd4:	4a21      	ldr	r2, [pc, #132]	; (800405c <UART_SetConfig+0x32c>)
 8003fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fda:	095b      	lsrs	r3, r3, #5
 8003fdc:	2264      	movs	r2, #100	; 0x64
 8003fde:	fb02 f303 	mul.w	r3, r2, r3
 8003fe2:	1aeb      	subs	r3, r5, r3
 8003fe4:	011b      	lsls	r3, r3, #4
 8003fe6:	3332      	adds	r3, #50	; 0x32
 8003fe8:	4a1c      	ldr	r2, [pc, #112]	; (800405c <UART_SetConfig+0x32c>)
 8003fea:	fba2 2303 	umull	r2, r3, r2, r3
 8003fee:	095b      	lsrs	r3, r3, #5
 8003ff0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ff4:	441c      	add	r4, r3
 8003ff6:	f7ff fd57 	bl	8003aa8 <HAL_RCC_GetPCLK2Freq>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	4413      	add	r3, r2
 8004002:	009a      	lsls	r2, r3, #2
 8004004:	441a      	add	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	fbb2 f5f3 	udiv	r5, r2, r3
 8004010:	f7ff fd4a 	bl	8003aa8 <HAL_RCC_GetPCLK2Freq>
 8004014:	4602      	mov	r2, r0
 8004016:	4613      	mov	r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	4413      	add	r3, r2
 800401c:	009a      	lsls	r2, r3, #2
 800401e:	441a      	add	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	fbb2 f3f3 	udiv	r3, r2, r3
 800402a:	4a0c      	ldr	r2, [pc, #48]	; (800405c <UART_SetConfig+0x32c>)
 800402c:	fba2 2303 	umull	r2, r3, r2, r3
 8004030:	095b      	lsrs	r3, r3, #5
 8004032:	2264      	movs	r2, #100	; 0x64
 8004034:	fb02 f303 	mul.w	r3, r2, r3
 8004038:	1aeb      	subs	r3, r5, r3
 800403a:	011b      	lsls	r3, r3, #4
 800403c:	3332      	adds	r3, #50	; 0x32
 800403e:	4a07      	ldr	r2, [pc, #28]	; (800405c <UART_SetConfig+0x32c>)
 8004040:	fba2 2303 	umull	r2, r3, r2, r3
 8004044:	095b      	lsrs	r3, r3, #5
 8004046:	f003 020f 	and.w	r2, r3, #15
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4422      	add	r2, r4
 8004050:	609a      	str	r2, [r3, #8]
 8004052:	e071      	b.n	8004138 <UART_SetConfig+0x408>
 8004054:	40011000 	.word	0x40011000
 8004058:	40011400 	.word	0x40011400
 800405c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004060:	f7ff fd0e 	bl	8003a80 <HAL_RCC_GetPCLK1Freq>
 8004064:	4602      	mov	r2, r0
 8004066:	4613      	mov	r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	4413      	add	r3, r2
 800406c:	009a      	lsls	r2, r3, #2
 800406e:	441a      	add	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	fbb2 f3f3 	udiv	r3, r2, r3
 800407a:	4a31      	ldr	r2, [pc, #196]	; (8004140 <UART_SetConfig+0x410>)
 800407c:	fba2 2303 	umull	r2, r3, r2, r3
 8004080:	095b      	lsrs	r3, r3, #5
 8004082:	011c      	lsls	r4, r3, #4
 8004084:	f7ff fcfc 	bl	8003a80 <HAL_RCC_GetPCLK1Freq>
 8004088:	4602      	mov	r2, r0
 800408a:	4613      	mov	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	4413      	add	r3, r2
 8004090:	009a      	lsls	r2, r3, #2
 8004092:	441a      	add	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	fbb2 f5f3 	udiv	r5, r2, r3
 800409e:	f7ff fcef 	bl	8003a80 <HAL_RCC_GetPCLK1Freq>
 80040a2:	4602      	mov	r2, r0
 80040a4:	4613      	mov	r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	4413      	add	r3, r2
 80040aa:	009a      	lsls	r2, r3, #2
 80040ac:	441a      	add	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b8:	4a21      	ldr	r2, [pc, #132]	; (8004140 <UART_SetConfig+0x410>)
 80040ba:	fba2 2303 	umull	r2, r3, r2, r3
 80040be:	095b      	lsrs	r3, r3, #5
 80040c0:	2264      	movs	r2, #100	; 0x64
 80040c2:	fb02 f303 	mul.w	r3, r2, r3
 80040c6:	1aeb      	subs	r3, r5, r3
 80040c8:	011b      	lsls	r3, r3, #4
 80040ca:	3332      	adds	r3, #50	; 0x32
 80040cc:	4a1c      	ldr	r2, [pc, #112]	; (8004140 <UART_SetConfig+0x410>)
 80040ce:	fba2 2303 	umull	r2, r3, r2, r3
 80040d2:	095b      	lsrs	r3, r3, #5
 80040d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040d8:	441c      	add	r4, r3
 80040da:	f7ff fcd1 	bl	8003a80 <HAL_RCC_GetPCLK1Freq>
 80040de:	4602      	mov	r2, r0
 80040e0:	4613      	mov	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4413      	add	r3, r2
 80040e6:	009a      	lsls	r2, r3, #2
 80040e8:	441a      	add	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	fbb2 f5f3 	udiv	r5, r2, r3
 80040f4:	f7ff fcc4 	bl	8003a80 <HAL_RCC_GetPCLK1Freq>
 80040f8:	4602      	mov	r2, r0
 80040fa:	4613      	mov	r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4413      	add	r3, r2
 8004100:	009a      	lsls	r2, r3, #2
 8004102:	441a      	add	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	fbb2 f3f3 	udiv	r3, r2, r3
 800410e:	4a0c      	ldr	r2, [pc, #48]	; (8004140 <UART_SetConfig+0x410>)
 8004110:	fba2 2303 	umull	r2, r3, r2, r3
 8004114:	095b      	lsrs	r3, r3, #5
 8004116:	2264      	movs	r2, #100	; 0x64
 8004118:	fb02 f303 	mul.w	r3, r2, r3
 800411c:	1aeb      	subs	r3, r5, r3
 800411e:	011b      	lsls	r3, r3, #4
 8004120:	3332      	adds	r3, #50	; 0x32
 8004122:	4a07      	ldr	r2, [pc, #28]	; (8004140 <UART_SetConfig+0x410>)
 8004124:	fba2 2303 	umull	r2, r3, r2, r3
 8004128:	095b      	lsrs	r3, r3, #5
 800412a:	f003 020f 	and.w	r2, r3, #15
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4422      	add	r2, r4
 8004134:	609a      	str	r2, [r3, #8]
}
 8004136:	e7ff      	b.n	8004138 <UART_SetConfig+0x408>
 8004138:	bf00      	nop
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bdb0      	pop	{r4, r5, r7, pc}
 8004140:	51eb851f 	.word	0x51eb851f

08004144 <ds3231_set_time>:
uint8_t _decode (uint8_t val);
uint8_t _encode (uint8_t val);


void ds3231_set_time (uint8_t day, uint8_t month, uint16_t year, uint8_t hour, uint8_t minute, uint8_t second, uint8_t weekday)
{
 8004144:	b590      	push	{r4, r7, lr}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	4604      	mov	r4, r0
 800414c:	4608      	mov	r0, r1
 800414e:	4611      	mov	r1, r2
 8004150:	461a      	mov	r2, r3
 8004152:	4623      	mov	r3, r4
 8004154:	71fb      	strb	r3, [r7, #7]
 8004156:	4603      	mov	r3, r0
 8004158:	71bb      	strb	r3, [r7, #6]
 800415a:	460b      	mov	r3, r1
 800415c:	80bb      	strh	r3, [r7, #4]
 800415e:	4613      	mov	r3, r2
 8004160:	70fb      	strb	r3, [r7, #3]
	uint8_t buff[8];
	buff[0] = 0x00;
 8004162:	2300      	movs	r3, #0
 8004164:	723b      	strb	r3, [r7, #8]
	buff[1] = _encode(second);
 8004166:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800416a:	4618      	mov	r0, r3
 800416c:	f000 f8fe 	bl	800436c <_encode>
 8004170:	4603      	mov	r3, r0
 8004172:	727b      	strb	r3, [r7, #9]
	buff[2] = _encode(minute);
 8004174:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004178:	4618      	mov	r0, r3
 800417a:	f000 f8f7 	bl	800436c <_encode>
 800417e:	4603      	mov	r3, r0
 8004180:	72bb      	strb	r3, [r7, #10]
	buff[3] = _encode(hour);
 8004182:	78fb      	ldrb	r3, [r7, #3]
 8004184:	4618      	mov	r0, r3
 8004186:	f000 f8f1 	bl	800436c <_encode>
 800418a:	4603      	mov	r3, r0
 800418c:	72fb      	strb	r3, [r7, #11]
	buff[4] = _encode(weekday);
 800418e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004192:	4618      	mov	r0, r3
 8004194:	f000 f8ea 	bl	800436c <_encode>
 8004198:	4603      	mov	r3, r0
 800419a:	733b      	strb	r3, [r7, #12]
	buff[5] = _encode(day);
 800419c:	79fb      	ldrb	r3, [r7, #7]
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 f8e4 	bl	800436c <_encode>
 80041a4:	4603      	mov	r3, r0
 80041a6:	737b      	strb	r3, [r7, #13]
	buff[6] = _encode(month);
 80041a8:	79bb      	ldrb	r3, [r7, #6]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 f8de 	bl	800436c <_encode>
 80041b0:	4603      	mov	r3, r0
 80041b2:	73bb      	strb	r3, [r7, #14]
	buff[7] = _encode((uint8_t) (year - 2000));
 80041b4:	88bb      	ldrh	r3, [r7, #4]
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	3330      	adds	r3, #48	; 0x30
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 f8d5 	bl	800436c <_encode>
 80041c2:	4603      	mov	r3, r0
 80041c4:	73fb      	strb	r3, [r7, #15]

	// write 8 bytes to the device (1st byte is the address of the register to start write)
	i2c_write(&hi2c1, (uint8_t) DS3231_WR_ADDRESS, (uint8_t *) buff, 7 + 1);
 80041c6:	f107 0208 	add.w	r2, r7, #8
 80041ca:	2308      	movs	r3, #8
 80041cc:	21d0      	movs	r1, #208	; 0xd0
 80041ce:	4803      	ldr	r0, [pc, #12]	; (80041dc <ds3231_set_time+0x98>)
 80041d0:	f000 f99e 	bl	8004510 <i2c_write>
}
 80041d4:	bf00      	nop
 80041d6:	3714      	adds	r7, #20
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd90      	pop	{r4, r7, pc}
 80041dc:	2000009c 	.word	0x2000009c

080041e0 <ds3231_read_time>:

rtc_t ds3231_read_time ()
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
	uint8_t buff[7] = {0x00};
 80041e8:	f107 0308 	add.w	r3, r7, #8
 80041ec:	2200      	movs	r2, #0
 80041ee:	601a      	str	r2, [r3, #0]
 80041f0:	f8c3 2003 	str.w	r2, [r3, #3]

	i2c_write(&hi2c1, (uint8_t) DS3231_WR_ADDRESS, buff, 1);  // send address
 80041f4:	f107 0208 	add.w	r2, r7, #8
 80041f8:	2301      	movs	r3, #1
 80041fa:	21d0      	movs	r1, #208	; 0xd0
 80041fc:	480d      	ldr	r0, [pc, #52]	; (8004234 <ds3231_read_time+0x54>)
 80041fe:	f000 f987 	bl	8004510 <i2c_write>

	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)
 8004202:	bf00      	nop
 8004204:	480b      	ldr	r0, [pc, #44]	; (8004234 <ds3231_read_time+0x54>)
 8004206:	f7fd fbe2 	bl	80019ce <HAL_I2C_GetState>
 800420a:	4603      	mov	r3, r0
 800420c:	2b20      	cmp	r3, #32
 800420e:	d1f9      	bne.n	8004204 <ds3231_read_time+0x24>
	{
		// wait for it to be ready
	}

	i2c_read(&hi2c1, (uint8_t) DS3231_RD_ADDRESS, (uint8_t *) buff, 7);  // send address
 8004210:	f107 0208 	add.w	r2, r7, #8
 8004214:	2307      	movs	r3, #7
 8004216:	21d1      	movs	r1, #209	; 0xd1
 8004218:	4806      	ldr	r0, [pc, #24]	; (8004234 <ds3231_read_time+0x54>)
 800421a:	f000 f99b 	bl	8004554 <i2c_read>

	return array_to_struct(buff);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f107 0208 	add.w	r2, r7, #8
 8004224:	4611      	mov	r1, r2
 8004226:	4618      	mov	r0, r3
 8004228:	f000 f806 	bl	8004238 <array_to_struct>

}
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	2000009c 	.word	0x2000009c

08004238 <array_to_struct>:


rtc_t array_to_struct (uint8_t buff[7])
{
 8004238:	b5b0      	push	{r4, r5, r7, lr}
 800423a:	b08e      	sub	sp, #56	; 0x38
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
	rtc_t rtc;
	char *weekday_name [] = {"", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"};
 8004242:	4b3c      	ldr	r3, [pc, #240]	; (8004334 <array_to_struct+0xfc>)
 8004244:	f107 040c 	add.w	r4, r7, #12
 8004248:	461d      	mov	r5, r3
 800424a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800424c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800424e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004252:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	rtc.sec   		= _decode(buff[0]);
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	4618      	mov	r0, r3
 800425c:	f000 f86c 	bl	8004338 <_decode>
 8004260:	4603      	mov	r3, r0
 8004262:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004266:	b2da      	uxtb	r2, r3
 8004268:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800426c:	f362 0305 	bfi	r3, r2, #0, #6
 8004270:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	rtc.min   		= _decode(buff[1]);
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	3301      	adds	r3, #1
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	4618      	mov	r0, r3
 800427c:	f000 f85c 	bl	8004338 <_decode>
 8004280:	4603      	mov	r3, r0
 8004282:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004286:	b2da      	uxtb	r2, r3
 8004288:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800428a:	f362 138b 	bfi	r3, r2, #6, #6
 800428e:	85bb      	strh	r3, [r7, #44]	; 0x2c
	rtc.hour  		= _decode(buff[2]);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	3302      	adds	r3, #2
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	4618      	mov	r0, r3
 8004298:	f000 f84e 	bl	8004338 <_decode>
 800429c:	4603      	mov	r3, r0
 800429e:	f003 031f 	and.w	r3, r3, #31
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a6:	f362 3310 	bfi	r3, r2, #12, #5
 80042aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	rtc.week_day	= weekday_name[_decode(buff[3])];
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	3303      	adds	r3, #3
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f000 f840 	bl	8004338 <_decode>
 80042b8:	4603      	mov	r3, r0
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80042c0:	4413      	add	r3, r2
 80042c2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80042c6:	637b      	str	r3, [r7, #52]	; 0x34
	rtc.day			= _decode(buff[4]);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	3304      	adds	r3, #4
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 f832 	bl	8004338 <_decode>
 80042d4:	4603      	mov	r3, r0
 80042d6:	f003 031f 	and.w	r3, r3, #31
 80042da:	b2da      	uxtb	r2, r3
 80042dc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80042e0:	f362 0345 	bfi	r3, r2, #1, #5
 80042e4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	rtc.month 		= _decode(buff[5]);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	3305      	adds	r3, #5
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 f822 	bl	8004338 <_decode>
 80042f4:	4603      	mov	r3, r0
 80042f6:	f003 030f 	and.w	r3, r3, #15
 80042fa:	b2da      	uxtb	r2, r3
 80042fc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80042fe:	f362 1389 	bfi	r3, r2, #6, #4
 8004302:	85fb      	strh	r3, [r7, #46]	; 0x2e
	rtc.year  		= _decode(buff[6]) + 2000;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	3306      	adds	r3, #6
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	4618      	mov	r0, r3
 800430c:	f000 f814 	bl	8004338 <_decode>
 8004310:	4603      	mov	r3, r0
 8004312:	b29b      	uxth	r3, r3
 8004314:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8004318:	b29b      	uxth	r3, r3
 800431a:	863b      	strh	r3, [r7, #48]	; 0x30

	return rtc;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	461c      	mov	r4, r3
 8004320:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004324:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004328:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	3738      	adds	r7, #56	; 0x38
 8004330:	46bd      	mov	sp, r7
 8004332:	bdb0      	pop	{r4, r5, r7, pc}
 8004334:	08005a1c 	.word	0x08005a1c

08004338 <_decode>:

uint8_t _decode (uint8_t val)
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	4603      	mov	r3, r0
 8004340:	71fb      	strb	r3, [r7, #7]
	uint8_t decoded = ((val >> 4) * 10 + (0x0F & val));
 8004342:	79fb      	ldrb	r3, [r7, #7]
 8004344:	091b      	lsrs	r3, r3, #4
 8004346:	b2db      	uxtb	r3, r3
 8004348:	461a      	mov	r2, r3
 800434a:	0092      	lsls	r2, r2, #2
 800434c:	4413      	add	r3, r2
 800434e:	005b      	lsls	r3, r3, #1
 8004350:	b2da      	uxtb	r2, r3
 8004352:	79fb      	ldrb	r3, [r7, #7]
 8004354:	f003 030f 	and.w	r3, r3, #15
 8004358:	b2db      	uxtb	r3, r3
 800435a:	4413      	add	r3, r2
 800435c:	73fb      	strb	r3, [r7, #15]
    return decoded;
 800435e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004360:	4618      	mov	r0, r3
 8004362:	3714      	adds	r7, #20
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <_encode>:

uint8_t _encode (uint8_t val)
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	4603      	mov	r3, r0
 8004374:	71fb      	strb	r3, [r7, #7]
	uint8_t encoded = ((val / 10) << 4) + (val % 10);
 8004376:	79fb      	ldrb	r3, [r7, #7]
 8004378:	4a0d      	ldr	r2, [pc, #52]	; (80043b0 <_encode+0x44>)
 800437a:	fba2 2303 	umull	r2, r3, r2, r3
 800437e:	08db      	lsrs	r3, r3, #3
 8004380:	b2db      	uxtb	r3, r3
 8004382:	011b      	lsls	r3, r3, #4
 8004384:	b2d8      	uxtb	r0, r3
 8004386:	79fa      	ldrb	r2, [r7, #7]
 8004388:	4b09      	ldr	r3, [pc, #36]	; (80043b0 <_encode+0x44>)
 800438a:	fba3 1302 	umull	r1, r3, r3, r2
 800438e:	08d9      	lsrs	r1, r3, #3
 8004390:	460b      	mov	r3, r1
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	440b      	add	r3, r1
 8004396:	005b      	lsls	r3, r3, #1
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	b2db      	uxtb	r3, r3
 800439c:	4403      	add	r3, r0
 800439e:	73fb      	strb	r3, [r7, #15]
	return encoded;
 80043a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3714      	adds	r7, #20
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	cccccccd 	.word	0xcccccccd

080043b4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80043ba:	2300      	movs	r3, #0
 80043bc:	607b      	str	r3, [r7, #4]
 80043be:	4b10      	ldr	r3, [pc, #64]	; (8004400 <MX_GPIO_Init+0x4c>)
 80043c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c2:	4a0f      	ldr	r2, [pc, #60]	; (8004400 <MX_GPIO_Init+0x4c>)
 80043c4:	f043 0301 	orr.w	r3, r3, #1
 80043c8:	6313      	str	r3, [r2, #48]	; 0x30
 80043ca:	4b0d      	ldr	r3, [pc, #52]	; (8004400 <MX_GPIO_Init+0x4c>)
 80043cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	607b      	str	r3, [r7, #4]
 80043d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80043d6:	2300      	movs	r3, #0
 80043d8:	603b      	str	r3, [r7, #0]
 80043da:	4b09      	ldr	r3, [pc, #36]	; (8004400 <MX_GPIO_Init+0x4c>)
 80043dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043de:	4a08      	ldr	r2, [pc, #32]	; (8004400 <MX_GPIO_Init+0x4c>)
 80043e0:	f043 0302 	orr.w	r3, r3, #2
 80043e4:	6313      	str	r3, [r2, #48]	; 0x30
 80043e6:	4b06      	ldr	r3, [pc, #24]	; (8004400 <MX_GPIO_Init+0x4c>)
 80043e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	603b      	str	r3, [r7, #0]
 80043f0:	683b      	ldr	r3, [r7, #0]

}
 80043f2:	bf00      	nop
 80043f4:	370c      	adds	r7, #12
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	40023800 	.word	0x40023800

08004404 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8004408:	4b12      	ldr	r3, [pc, #72]	; (8004454 <MX_I2C1_Init+0x50>)
 800440a:	4a13      	ldr	r2, [pc, #76]	; (8004458 <MX_I2C1_Init+0x54>)
 800440c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800440e:	4b11      	ldr	r3, [pc, #68]	; (8004454 <MX_I2C1_Init+0x50>)
 8004410:	4a12      	ldr	r2, [pc, #72]	; (800445c <MX_I2C1_Init+0x58>)
 8004412:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004414:	4b0f      	ldr	r3, [pc, #60]	; (8004454 <MX_I2C1_Init+0x50>)
 8004416:	2200      	movs	r2, #0
 8004418:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800441a:	4b0e      	ldr	r3, [pc, #56]	; (8004454 <MX_I2C1_Init+0x50>)
 800441c:	2200      	movs	r2, #0
 800441e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004420:	4b0c      	ldr	r3, [pc, #48]	; (8004454 <MX_I2C1_Init+0x50>)
 8004422:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004426:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004428:	4b0a      	ldr	r3, [pc, #40]	; (8004454 <MX_I2C1_Init+0x50>)
 800442a:	2200      	movs	r2, #0
 800442c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800442e:	4b09      	ldr	r3, [pc, #36]	; (8004454 <MX_I2C1_Init+0x50>)
 8004430:	2200      	movs	r2, #0
 8004432:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004434:	4b07      	ldr	r3, [pc, #28]	; (8004454 <MX_I2C1_Init+0x50>)
 8004436:	2200      	movs	r2, #0
 8004438:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800443a:	4b06      	ldr	r3, [pc, #24]	; (8004454 <MX_I2C1_Init+0x50>)
 800443c:	2200      	movs	r2, #0
 800443e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004440:	4804      	ldr	r0, [pc, #16]	; (8004454 <MX_I2C1_Init+0x50>)
 8004442:	f7fc fc05 	bl	8000c50 <HAL_I2C_Init>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d001      	beq.n	8004450 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800444c:	f000 f95e 	bl	800470c <Error_Handler>
  }

}
 8004450:	bf00      	nop
 8004452:	bd80      	pop	{r7, pc}
 8004454:	2000009c 	.word	0x2000009c
 8004458:	40005400 	.word	0x40005400
 800445c:	000186a0 	.word	0x000186a0

08004460 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b08a      	sub	sp, #40	; 0x28
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004468:	f107 0314 	add.w	r3, r7, #20
 800446c:	2200      	movs	r2, #0
 800446e:	601a      	str	r2, [r3, #0]
 8004470:	605a      	str	r2, [r3, #4]
 8004472:	609a      	str	r2, [r3, #8]
 8004474:	60da      	str	r2, [r3, #12]
 8004476:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a21      	ldr	r2, [pc, #132]	; (8004504 <HAL_I2C_MspInit+0xa4>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d13b      	bne.n	80044fa <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004482:	2300      	movs	r3, #0
 8004484:	613b      	str	r3, [r7, #16]
 8004486:	4b20      	ldr	r3, [pc, #128]	; (8004508 <HAL_I2C_MspInit+0xa8>)
 8004488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448a:	4a1f      	ldr	r2, [pc, #124]	; (8004508 <HAL_I2C_MspInit+0xa8>)
 800448c:	f043 0302 	orr.w	r3, r3, #2
 8004490:	6313      	str	r3, [r2, #48]	; 0x30
 8004492:	4b1d      	ldr	r3, [pc, #116]	; (8004508 <HAL_I2C_MspInit+0xa8>)
 8004494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	613b      	str	r3, [r7, #16]
 800449c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800449e:	23c0      	movs	r3, #192	; 0xc0
 80044a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044a2:	2312      	movs	r3, #18
 80044a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044a6:	2301      	movs	r3, #1
 80044a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044aa:	2303      	movs	r3, #3
 80044ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80044ae:	2304      	movs	r3, #4
 80044b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044b2:	f107 0314 	add.w	r3, r7, #20
 80044b6:	4619      	mov	r1, r3
 80044b8:	4814      	ldr	r0, [pc, #80]	; (800450c <HAL_I2C_MspInit+0xac>)
 80044ba:	f7fc fa2f 	bl	800091c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80044be:	2300      	movs	r3, #0
 80044c0:	60fb      	str	r3, [r7, #12]
 80044c2:	4b11      	ldr	r3, [pc, #68]	; (8004508 <HAL_I2C_MspInit+0xa8>)
 80044c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c6:	4a10      	ldr	r2, [pc, #64]	; (8004508 <HAL_I2C_MspInit+0xa8>)
 80044c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80044cc:	6413      	str	r3, [r2, #64]	; 0x40
 80044ce:	4b0e      	ldr	r3, [pc, #56]	; (8004508 <HAL_I2C_MspInit+0xa8>)
 80044d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044d6:	60fb      	str	r3, [r7, #12]
 80044d8:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80044da:	2200      	movs	r2, #0
 80044dc:	2100      	movs	r1, #0
 80044de:	201f      	movs	r0, #31
 80044e0:	f7fc f9b5 	bl	800084e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80044e4:	201f      	movs	r0, #31
 80044e6:	f7fc f9ce 	bl	8000886 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80044ea:	2200      	movs	r2, #0
 80044ec:	2100      	movs	r1, #0
 80044ee:	2020      	movs	r0, #32
 80044f0:	f7fc f9ad 	bl	800084e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80044f4:	2020      	movs	r0, #32
 80044f6:	f7fc f9c6 	bl	8000886 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80044fa:	bf00      	nop
 80044fc:	3728      	adds	r7, #40	; 0x28
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	40005400 	.word	0x40005400
 8004508:	40023800 	.word	0x40023800
 800450c:	40020400 	.word	0x40020400

08004510 <i2c_write>:
  }
} 

/* USER CODE BEGIN 1 */
void i2c_write (I2C_HandleTypeDef *hi, uint8_t dev_addr, uint8_t *buffer, uint16_t buff_size)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b086      	sub	sp, #24
 8004514:	af02      	add	r7, sp, #8
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	607a      	str	r2, [r7, #4]
 800451a:	461a      	mov	r2, r3
 800451c:	460b      	mov	r3, r1
 800451e:	72fb      	strb	r3, [r7, #11]
 8004520:	4613      	mov	r3, r2
 8004522:	813b      	strh	r3, [r7, #8]
	while (HAL_I2C_Master_Transmit(hi, dev_addr, buffer, buff_size, 0xFFFF) != HAL_OK)
 8004524:	e002      	b.n	800452c <i2c_write+0x1c>
	{
		printf("Error occurred in writing to device");
 8004526:	480a      	ldr	r0, [pc, #40]	; (8004550 <i2c_write+0x40>)
 8004528:	f000 fb00 	bl	8004b2c <iprintf>
	while (HAL_I2C_Master_Transmit(hi, dev_addr, buffer, buff_size, 0xFFFF) != HAL_OK)
 800452c:	7afb      	ldrb	r3, [r7, #11]
 800452e:	b299      	uxth	r1, r3
 8004530:	893a      	ldrh	r2, [r7, #8]
 8004532:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004536:	9300      	str	r3, [sp, #0]
 8004538:	4613      	mov	r3, r2
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	f7fc fcaf 	bl	8000ea0 <HAL_I2C_Master_Transmit>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1ee      	bne.n	8004526 <i2c_write+0x16>
	}
}
 8004548:	bf00      	nop
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	08005a3c 	.word	0x08005a3c

08004554 <i2c_read>:

void i2c_read (I2C_HandleTypeDef *hi, uint8_t dev_addr, uint8_t *buffer, uint16_t buff_size)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af02      	add	r7, sp, #8
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	607a      	str	r2, [r7, #4]
 800455e:	461a      	mov	r2, r3
 8004560:	460b      	mov	r3, r1
 8004562:	72fb      	strb	r3, [r7, #11]
 8004564:	4613      	mov	r3, r2
 8004566:	813b      	strh	r3, [r7, #8]
	while (HAL_I2C_Master_Receive(hi, dev_addr, buffer, buff_size, 0xFFFF) != HAL_OK)
 8004568:	e002      	b.n	8004570 <i2c_read+0x1c>
	{
		printf("Error occurred in reading from device");
 800456a:	480a      	ldr	r0, [pc, #40]	; (8004594 <i2c_read+0x40>)
 800456c:	f000 fade 	bl	8004b2c <iprintf>
	while (HAL_I2C_Master_Receive(hi, dev_addr, buffer, buff_size, 0xFFFF) != HAL_OK)
 8004570:	7afb      	ldrb	r3, [r7, #11]
 8004572:	b299      	uxth	r1, r3
 8004574:	893a      	ldrh	r2, [r7, #8]
 8004576:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800457a:	9300      	str	r3, [sp, #0]
 800457c:	4613      	mov	r3, r2
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f7fc fd8b 	bl	800109c <HAL_I2C_Master_Receive>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1ee      	bne.n	800456a <i2c_read+0x16>
	}
}
 800458c:	bf00      	nop
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	08005a60 	.word	0x08005a60

08004598 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b088      	sub	sp, #32
 800459c:	af04      	add	r7, sp, #16


	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800459e:	f7fb ffe7 	bl	8000570 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80045a2:	f000 f849 	bl	8004638 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80045a6:	f7ff ff05 	bl	80043b4 <MX_GPIO_Init>
	MX_I2C1_Init();
 80045aa:	f7ff ff2b 	bl	8004404 <MX_I2C1_Init>
	MX_USART2_UART_Init();
 80045ae:	f000 f9ef 	bl	8004990 <MX_USART2_UART_Init>

	printf("ALL SET!\r\n");
 80045b2:	481e      	ldr	r0, [pc, #120]	; (800462c <main+0x94>)
 80045b4:	f000 fb2e 	bl	8004c14 <puts>

	/* USER CODE BEGIN 2 */
	rtc_t rtc;
	ds3231_set_time(24, 8, 2019, 22, 30, 0, 6);
 80045b8:	2306      	movs	r3, #6
 80045ba:	9302      	str	r3, [sp, #8]
 80045bc:	2300      	movs	r3, #0
 80045be:	9301      	str	r3, [sp, #4]
 80045c0:	231e      	movs	r3, #30
 80045c2:	9300      	str	r3, [sp, #0]
 80045c4:	2316      	movs	r3, #22
 80045c6:	f240 72e3 	movw	r2, #2019	; 0x7e3
 80045ca:	2108      	movs	r1, #8
 80045cc:	2018      	movs	r0, #24
 80045ce:	f7ff fdb9 	bl	8004144 <ds3231_set_time>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */
		rtc = ds3231_read_time();
 80045d2:	1d3b      	adds	r3, r7, #4
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7ff fe03 	bl	80041e0 <ds3231_read_time>

		printf("Date: %d/%d/%d -> Weekday: %s\r\n", rtc.day, rtc.month, rtc.year, rtc.week_day);
 80045da:	79bb      	ldrb	r3, [r7, #6]
 80045dc:	f3c3 0344 	ubfx	r3, r3, #1, #5
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	4619      	mov	r1, r3
 80045e4:	88fb      	ldrh	r3, [r7, #6]
 80045e6:	f3c3 1383 	ubfx	r3, r3, #6, #4
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	461a      	mov	r2, r3
 80045ee:	893b      	ldrh	r3, [r7, #8]
 80045f0:	4618      	mov	r0, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	9300      	str	r3, [sp, #0]
 80045f6:	4603      	mov	r3, r0
 80045f8:	480d      	ldr	r0, [pc, #52]	; (8004630 <main+0x98>)
 80045fa:	f000 fa97 	bl	8004b2c <iprintf>
		printf("Time: %d:%d:%d\r\n\r\n", rtc.hour, rtc.min, rtc.sec);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f3c3 3304 	ubfx	r3, r3, #12, #5
 8004604:	b2db      	uxtb	r3, r3
 8004606:	4619      	mov	r1, r3
 8004608:	88bb      	ldrh	r3, [r7, #4]
 800460a:	f3c3 1385 	ubfx	r3, r3, #6, #6
 800460e:	b2db      	uxtb	r3, r3
 8004610:	461a      	mov	r2, r3
 8004612:	793b      	ldrb	r3, [r7, #4]
 8004614:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8004618:	b2db      	uxtb	r3, r3
 800461a:	4806      	ldr	r0, [pc, #24]	; (8004634 <main+0x9c>)
 800461c:	f000 fa86 	bl	8004b2c <iprintf>

		HAL_Delay(1000);
 8004620:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004624:	f7fc f816 	bl	8000654 <HAL_Delay>
		rtc = ds3231_read_time();
 8004628:	e7d3      	b.n	80045d2 <main+0x3a>
 800462a:	bf00      	nop
 800462c:	08005a88 	.word	0x08005a88
 8004630:	08005a94 	.word	0x08005a94
 8004634:	08005ab4 	.word	0x08005ab4

08004638 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b094      	sub	sp, #80	; 0x50
 800463c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800463e:	f107 0320 	add.w	r3, r7, #32
 8004642:	2230      	movs	r2, #48	; 0x30
 8004644:	2100      	movs	r1, #0
 8004646:	4618      	mov	r0, r3
 8004648:	f000 fa68 	bl	8004b1c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800464c:	f107 030c 	add.w	r3, r7, #12
 8004650:	2200      	movs	r2, #0
 8004652:	601a      	str	r2, [r3, #0]
 8004654:	605a      	str	r2, [r3, #4]
 8004656:	609a      	str	r2, [r3, #8]
 8004658:	60da      	str	r2, [r3, #12]
 800465a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800465c:	2300      	movs	r3, #0
 800465e:	60bb      	str	r3, [r7, #8]
 8004660:	4b28      	ldr	r3, [pc, #160]	; (8004704 <SystemClock_Config+0xcc>)
 8004662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004664:	4a27      	ldr	r2, [pc, #156]	; (8004704 <SystemClock_Config+0xcc>)
 8004666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800466a:	6413      	str	r3, [r2, #64]	; 0x40
 800466c:	4b25      	ldr	r3, [pc, #148]	; (8004704 <SystemClock_Config+0xcc>)
 800466e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004674:	60bb      	str	r3, [r7, #8]
 8004676:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004678:	2300      	movs	r3, #0
 800467a:	607b      	str	r3, [r7, #4]
 800467c:	4b22      	ldr	r3, [pc, #136]	; (8004708 <SystemClock_Config+0xd0>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a21      	ldr	r2, [pc, #132]	; (8004708 <SystemClock_Config+0xd0>)
 8004682:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004686:	6013      	str	r3, [r2, #0]
 8004688:	4b1f      	ldr	r3, [pc, #124]	; (8004708 <SystemClock_Config+0xd0>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004690:	607b      	str	r3, [r7, #4]
 8004692:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004694:	2302      	movs	r3, #2
 8004696:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004698:	2301      	movs	r3, #1
 800469a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800469c:	2310      	movs	r3, #16
 800469e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80046a0:	2302      	movs	r3, #2
 80046a2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80046a4:	2300      	movs	r3, #0
 80046a6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80046a8:	2308      	movs	r3, #8
 80046aa:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80046ac:	23a8      	movs	r3, #168	; 0xa8
 80046ae:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80046b0:	2302      	movs	r3, #2
 80046b2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80046b4:	2304      	movs	r3, #4
 80046b6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80046b8:	f107 0320 	add.w	r3, r7, #32
 80046bc:	4618      	mov	r0, r3
 80046be:	f7fe fdfd 	bl	80032bc <HAL_RCC_OscConfig>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d001      	beq.n	80046cc <SystemClock_Config+0x94>
	{
		Error_Handler();
 80046c8:	f000 f820 	bl	800470c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80046cc:	230f      	movs	r3, #15
 80046ce:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80046d0:	2302      	movs	r3, #2
 80046d2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80046d4:	2300      	movs	r3, #0
 80046d6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80046d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80046dc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80046de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046e2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80046e4:	f107 030c 	add.w	r3, r7, #12
 80046e8:	2105      	movs	r1, #5
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7ff f828 	bl	8003740 <HAL_RCC_ClockConfig>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <SystemClock_Config+0xc2>
	{
		Error_Handler();
 80046f6:	f000 f809 	bl	800470c <Error_Handler>
	}
}
 80046fa:	bf00      	nop
 80046fc:	3750      	adds	r7, #80	; 0x50
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	40023800 	.word	0x40023800
 8004708:	40007000 	.word	0x40007000

0800470c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800470c:	b480      	push	{r7}
 800470e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8004710:	bf00      	nop
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
	...

0800471c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004722:	2300      	movs	r3, #0
 8004724:	607b      	str	r3, [r7, #4]
 8004726:	4b10      	ldr	r3, [pc, #64]	; (8004768 <HAL_MspInit+0x4c>)
 8004728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472a:	4a0f      	ldr	r2, [pc, #60]	; (8004768 <HAL_MspInit+0x4c>)
 800472c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004730:	6453      	str	r3, [r2, #68]	; 0x44
 8004732:	4b0d      	ldr	r3, [pc, #52]	; (8004768 <HAL_MspInit+0x4c>)
 8004734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800473a:	607b      	str	r3, [r7, #4]
 800473c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800473e:	2300      	movs	r3, #0
 8004740:	603b      	str	r3, [r7, #0]
 8004742:	4b09      	ldr	r3, [pc, #36]	; (8004768 <HAL_MspInit+0x4c>)
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	4a08      	ldr	r2, [pc, #32]	; (8004768 <HAL_MspInit+0x4c>)
 8004748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800474c:	6413      	str	r3, [r2, #64]	; 0x40
 800474e:	4b06      	ldr	r3, [pc, #24]	; (8004768 <HAL_MspInit+0x4c>)
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004756:	603b      	str	r3, [r7, #0]
 8004758:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800475a:	bf00      	nop
 800475c:	370c      	adds	r7, #12
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	40023800 	.word	0x40023800

0800476c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800476c:	b480      	push	{r7}
 800476e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004770:	bf00      	nop
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800477a:	b480      	push	{r7}
 800477c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800477e:	e7fe      	b.n	800477e <HardFault_Handler+0x4>

08004780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004780:	b480      	push	{r7}
 8004782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004784:	e7fe      	b.n	8004784 <MemManage_Handler+0x4>

08004786 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004786:	b480      	push	{r7}
 8004788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800478a:	e7fe      	b.n	800478a <BusFault_Handler+0x4>

0800478c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800478c:	b480      	push	{r7}
 800478e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004790:	e7fe      	b.n	8004790 <UsageFault_Handler+0x4>

08004792 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004792:	b480      	push	{r7}
 8004794:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004796:	bf00      	nop
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80047a0:	b480      	push	{r7}
 80047a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80047a4:	bf00      	nop
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80047ae:	b480      	push	{r7}
 80047b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80047b2:	bf00      	nop
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80047c0:	f7fb ff28 	bl	8000614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80047c4:	bf00      	nop
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80047cc:	4802      	ldr	r0, [pc, #8]	; (80047d8 <I2C1_EV_IRQHandler+0x10>)
 80047ce:	f7fc fe8b 	bl	80014e8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80047d2:	bf00      	nop
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	2000009c 	.word	0x2000009c

080047dc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80047e0:	4802      	ldr	r0, [pc, #8]	; (80047ec <I2C1_ER_IRQHandler+0x10>)
 80047e2:	f7fc ffe7 	bl	80017b4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80047e6:	bf00      	nop
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	2000009c 	.word	0x2000009c

080047f0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80047fc:	2300      	movs	r3, #0
 80047fe:	617b      	str	r3, [r7, #20]
 8004800:	e00a      	b.n	8004818 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004802:	f3af 8000 	nop.w
 8004806:	4601      	mov	r1, r0
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	1c5a      	adds	r2, r3, #1
 800480c:	60ba      	str	r2, [r7, #8]
 800480e:	b2ca      	uxtb	r2, r1
 8004810:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	3301      	adds	r3, #1
 8004816:	617b      	str	r3, [r7, #20]
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	429a      	cmp	r2, r3
 800481e:	dbf0      	blt.n	8004802 <_read+0x12>
	}

return len;
 8004820:	687b      	ldr	r3, [r7, #4]
}
 8004822:	4618      	mov	r0, r3
 8004824:	3718      	adds	r7, #24
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
	...

0800482c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b086      	sub	sp, #24
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
	{
		__io_putchar(*ptr++);
	}
	*/

	HAL_StatusTypeDef stat = HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, 0xFFFF);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	b29a      	uxth	r2, r3
 800483c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004840:	68b9      	ldr	r1, [r7, #8]
 8004842:	4807      	ldr	r0, [pc, #28]	; (8004860 <_write+0x34>)
 8004844:	f7ff f991 	bl	8003b6a <HAL_UART_Transmit>
 8004848:	4603      	mov	r3, r0
 800484a:	75fb      	strb	r3, [r7, #23]

	return (stat == HAL_OK) ? len : 0;
 800484c:	7dfb      	ldrb	r3, [r7, #23]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <_write+0x2a>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	e000      	b.n	8004858 <_write+0x2c>
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3718      	adds	r7, #24
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	200000f0 	.word	0x200000f0

08004864 <_close>:

int _close(int file)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
	return -1;
 800486c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004870:	4618      	mov	r0, r3
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800488c:	605a      	str	r2, [r3, #4]
	return 0;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <_isatty>:

int _isatty(int file)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
	return 1;
 80048a4:	2301      	movs	r3, #1
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr

080048b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80048b2:	b480      	push	{r7}
 80048b4:	b085      	sub	sp, #20
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	60f8      	str	r0, [r7, #12]
 80048ba:	60b9      	str	r1, [r7, #8]
 80048bc:	607a      	str	r2, [r7, #4]
	return 0;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3714      	adds	r7, #20
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80048d4:	4b11      	ldr	r3, [pc, #68]	; (800491c <_sbrk+0x50>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d102      	bne.n	80048e2 <_sbrk+0x16>
		heap_end = &end;
 80048dc:	4b0f      	ldr	r3, [pc, #60]	; (800491c <_sbrk+0x50>)
 80048de:	4a10      	ldr	r2, [pc, #64]	; (8004920 <_sbrk+0x54>)
 80048e0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80048e2:	4b0e      	ldr	r3, [pc, #56]	; (800491c <_sbrk+0x50>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80048e8:	4b0c      	ldr	r3, [pc, #48]	; (800491c <_sbrk+0x50>)
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4413      	add	r3, r2
 80048f0:	466a      	mov	r2, sp
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d907      	bls.n	8004906 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80048f6:	f000 f8e7 	bl	8004ac8 <__errno>
 80048fa:	4602      	mov	r2, r0
 80048fc:	230c      	movs	r3, #12
 80048fe:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004900:	f04f 33ff 	mov.w	r3, #4294967295
 8004904:	e006      	b.n	8004914 <_sbrk+0x48>
	}

	heap_end += incr;
 8004906:	4b05      	ldr	r3, [pc, #20]	; (800491c <_sbrk+0x50>)
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4413      	add	r3, r2
 800490e:	4a03      	ldr	r2, [pc, #12]	; (800491c <_sbrk+0x50>)
 8004910:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004912:	68fb      	ldr	r3, [r7, #12]
}
 8004914:	4618      	mov	r0, r3
 8004916:	3710      	adds	r7, #16
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	2000008c 	.word	0x2000008c
 8004920:	20000138 	.word	0x20000138

08004924 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004924:	b480      	push	{r7}
 8004926:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004928:	4b16      	ldr	r3, [pc, #88]	; (8004984 <SystemInit+0x60>)
 800492a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800492e:	4a15      	ldr	r2, [pc, #84]	; (8004984 <SystemInit+0x60>)
 8004930:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004934:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004938:	4b13      	ldr	r3, [pc, #76]	; (8004988 <SystemInit+0x64>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a12      	ldr	r2, [pc, #72]	; (8004988 <SystemInit+0x64>)
 800493e:	f043 0301 	orr.w	r3, r3, #1
 8004942:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004944:	4b10      	ldr	r3, [pc, #64]	; (8004988 <SystemInit+0x64>)
 8004946:	2200      	movs	r2, #0
 8004948:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800494a:	4b0f      	ldr	r3, [pc, #60]	; (8004988 <SystemInit+0x64>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a0e      	ldr	r2, [pc, #56]	; (8004988 <SystemInit+0x64>)
 8004950:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004954:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004958:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800495a:	4b0b      	ldr	r3, [pc, #44]	; (8004988 <SystemInit+0x64>)
 800495c:	4a0b      	ldr	r2, [pc, #44]	; (800498c <SystemInit+0x68>)
 800495e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004960:	4b09      	ldr	r3, [pc, #36]	; (8004988 <SystemInit+0x64>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a08      	ldr	r2, [pc, #32]	; (8004988 <SystemInit+0x64>)
 8004966:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800496a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800496c:	4b06      	ldr	r3, [pc, #24]	; (8004988 <SystemInit+0x64>)
 800496e:	2200      	movs	r2, #0
 8004970:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004972:	4b04      	ldr	r3, [pc, #16]	; (8004984 <SystemInit+0x60>)
 8004974:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004978:	609a      	str	r2, [r3, #8]
#endif
}
 800497a:	bf00      	nop
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr
 8004984:	e000ed00 	.word	0xe000ed00
 8004988:	40023800 	.word	0x40023800
 800498c:	24003010 	.word	0x24003010

08004990 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8004994:	4b11      	ldr	r3, [pc, #68]	; (80049dc <MX_USART2_UART_Init+0x4c>)
 8004996:	4a12      	ldr	r2, [pc, #72]	; (80049e0 <MX_USART2_UART_Init+0x50>)
 8004998:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800499a:	4b10      	ldr	r3, [pc, #64]	; (80049dc <MX_USART2_UART_Init+0x4c>)
 800499c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80049a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80049a2:	4b0e      	ldr	r3, [pc, #56]	; (80049dc <MX_USART2_UART_Init+0x4c>)
 80049a4:	2200      	movs	r2, #0
 80049a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80049a8:	4b0c      	ldr	r3, [pc, #48]	; (80049dc <MX_USART2_UART_Init+0x4c>)
 80049aa:	2200      	movs	r2, #0
 80049ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80049ae:	4b0b      	ldr	r3, [pc, #44]	; (80049dc <MX_USART2_UART_Init+0x4c>)
 80049b0:	2200      	movs	r2, #0
 80049b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80049b4:	4b09      	ldr	r3, [pc, #36]	; (80049dc <MX_USART2_UART_Init+0x4c>)
 80049b6:	220c      	movs	r2, #12
 80049b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80049ba:	4b08      	ldr	r3, [pc, #32]	; (80049dc <MX_USART2_UART_Init+0x4c>)
 80049bc:	2200      	movs	r2, #0
 80049be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80049c0:	4b06      	ldr	r3, [pc, #24]	; (80049dc <MX_USART2_UART_Init+0x4c>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80049c6:	4805      	ldr	r0, [pc, #20]	; (80049dc <MX_USART2_UART_Init+0x4c>)
 80049c8:	f7ff f882 	bl	8003ad0 <HAL_UART_Init>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d001      	beq.n	80049d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80049d2:	f7ff fe9b 	bl	800470c <Error_Handler>
  }

}
 80049d6:	bf00      	nop
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	200000f0 	.word	0x200000f0
 80049e0:	40004400 	.word	0x40004400

080049e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b08a      	sub	sp, #40	; 0x28
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049ec:	f107 0314 	add.w	r3, r7, #20
 80049f0:	2200      	movs	r2, #0
 80049f2:	601a      	str	r2, [r3, #0]
 80049f4:	605a      	str	r2, [r3, #4]
 80049f6:	609a      	str	r2, [r3, #8]
 80049f8:	60da      	str	r2, [r3, #12]
 80049fa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a19      	ldr	r2, [pc, #100]	; (8004a68 <HAL_UART_MspInit+0x84>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d12b      	bne.n	8004a5e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004a06:	2300      	movs	r3, #0
 8004a08:	613b      	str	r3, [r7, #16]
 8004a0a:	4b18      	ldr	r3, [pc, #96]	; (8004a6c <HAL_UART_MspInit+0x88>)
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0e:	4a17      	ldr	r2, [pc, #92]	; (8004a6c <HAL_UART_MspInit+0x88>)
 8004a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a14:	6413      	str	r3, [r2, #64]	; 0x40
 8004a16:	4b15      	ldr	r3, [pc, #84]	; (8004a6c <HAL_UART_MspInit+0x88>)
 8004a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a1e:	613b      	str	r3, [r7, #16]
 8004a20:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a22:	2300      	movs	r3, #0
 8004a24:	60fb      	str	r3, [r7, #12]
 8004a26:	4b11      	ldr	r3, [pc, #68]	; (8004a6c <HAL_UART_MspInit+0x88>)
 8004a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2a:	4a10      	ldr	r2, [pc, #64]	; (8004a6c <HAL_UART_MspInit+0x88>)
 8004a2c:	f043 0301 	orr.w	r3, r3, #1
 8004a30:	6313      	str	r3, [r2, #48]	; 0x30
 8004a32:	4b0e      	ldr	r3, [pc, #56]	; (8004a6c <HAL_UART_MspInit+0x88>)
 8004a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	60fb      	str	r3, [r7, #12]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004a3e:	230c      	movs	r3, #12
 8004a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a42:	2302      	movs	r3, #2
 8004a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a46:	2301      	movs	r3, #1
 8004a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004a4e:	2307      	movs	r3, #7
 8004a50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a52:	f107 0314 	add.w	r3, r7, #20
 8004a56:	4619      	mov	r1, r3
 8004a58:	4805      	ldr	r0, [pc, #20]	; (8004a70 <HAL_UART_MspInit+0x8c>)
 8004a5a:	f7fb ff5f 	bl	800091c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004a5e:	bf00      	nop
 8004a60:	3728      	adds	r7, #40	; 0x28
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	40004400 	.word	0x40004400
 8004a6c:	40023800 	.word	0x40023800
 8004a70:	40020000 	.word	0x40020000

08004a74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004a74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004aac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004a78:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004a7a:	e003      	b.n	8004a84 <LoopCopyDataInit>

08004a7c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004a7c:	4b0c      	ldr	r3, [pc, #48]	; (8004ab0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004a7e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004a80:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004a82:	3104      	adds	r1, #4

08004a84 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004a84:	480b      	ldr	r0, [pc, #44]	; (8004ab4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004a86:	4b0c      	ldr	r3, [pc, #48]	; (8004ab8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004a88:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004a8a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004a8c:	d3f6      	bcc.n	8004a7c <CopyDataInit>
  ldr  r2, =_sbss
 8004a8e:	4a0b      	ldr	r2, [pc, #44]	; (8004abc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004a90:	e002      	b.n	8004a98 <LoopFillZerobss>

08004a92 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004a92:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004a94:	f842 3b04 	str.w	r3, [r2], #4

08004a98 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004a98:	4b09      	ldr	r3, [pc, #36]	; (8004ac0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004a9a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004a9c:	d3f9      	bcc.n	8004a92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004a9e:	f7ff ff41 	bl	8004924 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004aa2:	f000 f817 	bl	8004ad4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004aa6:	f7ff fd77 	bl	8004598 <main>
  bx  lr    
 8004aaa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004aac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004ab0:	08005b88 	.word	0x08005b88
  ldr  r0, =_sdata
 8004ab4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004ab8:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8004abc:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8004ac0:	20000134 	.word	0x20000134

08004ac4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004ac4:	e7fe      	b.n	8004ac4 <ADC_IRQHandler>
	...

08004ac8 <__errno>:
 8004ac8:	4b01      	ldr	r3, [pc, #4]	; (8004ad0 <__errno+0x8>)
 8004aca:	6818      	ldr	r0, [r3, #0]
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	2000000c 	.word	0x2000000c

08004ad4 <__libc_init_array>:
 8004ad4:	b570      	push	{r4, r5, r6, lr}
 8004ad6:	4e0d      	ldr	r6, [pc, #52]	; (8004b0c <__libc_init_array+0x38>)
 8004ad8:	4c0d      	ldr	r4, [pc, #52]	; (8004b10 <__libc_init_array+0x3c>)
 8004ada:	1ba4      	subs	r4, r4, r6
 8004adc:	10a4      	asrs	r4, r4, #2
 8004ade:	2500      	movs	r5, #0
 8004ae0:	42a5      	cmp	r5, r4
 8004ae2:	d109      	bne.n	8004af8 <__libc_init_array+0x24>
 8004ae4:	4e0b      	ldr	r6, [pc, #44]	; (8004b14 <__libc_init_array+0x40>)
 8004ae6:	4c0c      	ldr	r4, [pc, #48]	; (8004b18 <__libc_init_array+0x44>)
 8004ae8:	f000 ff68 	bl	80059bc <_init>
 8004aec:	1ba4      	subs	r4, r4, r6
 8004aee:	10a4      	asrs	r4, r4, #2
 8004af0:	2500      	movs	r5, #0
 8004af2:	42a5      	cmp	r5, r4
 8004af4:	d105      	bne.n	8004b02 <__libc_init_array+0x2e>
 8004af6:	bd70      	pop	{r4, r5, r6, pc}
 8004af8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004afc:	4798      	blx	r3
 8004afe:	3501      	adds	r5, #1
 8004b00:	e7ee      	b.n	8004ae0 <__libc_init_array+0xc>
 8004b02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b06:	4798      	blx	r3
 8004b08:	3501      	adds	r5, #1
 8004b0a:	e7f2      	b.n	8004af2 <__libc_init_array+0x1e>
 8004b0c:	08005b80 	.word	0x08005b80
 8004b10:	08005b80 	.word	0x08005b80
 8004b14:	08005b80 	.word	0x08005b80
 8004b18:	08005b84 	.word	0x08005b84

08004b1c <memset>:
 8004b1c:	4402      	add	r2, r0
 8004b1e:	4603      	mov	r3, r0
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d100      	bne.n	8004b26 <memset+0xa>
 8004b24:	4770      	bx	lr
 8004b26:	f803 1b01 	strb.w	r1, [r3], #1
 8004b2a:	e7f9      	b.n	8004b20 <memset+0x4>

08004b2c <iprintf>:
 8004b2c:	b40f      	push	{r0, r1, r2, r3}
 8004b2e:	4b0a      	ldr	r3, [pc, #40]	; (8004b58 <iprintf+0x2c>)
 8004b30:	b513      	push	{r0, r1, r4, lr}
 8004b32:	681c      	ldr	r4, [r3, #0]
 8004b34:	b124      	cbz	r4, 8004b40 <iprintf+0x14>
 8004b36:	69a3      	ldr	r3, [r4, #24]
 8004b38:	b913      	cbnz	r3, 8004b40 <iprintf+0x14>
 8004b3a:	4620      	mov	r0, r4
 8004b3c:	f000 fa22 	bl	8004f84 <__sinit>
 8004b40:	ab05      	add	r3, sp, #20
 8004b42:	9a04      	ldr	r2, [sp, #16]
 8004b44:	68a1      	ldr	r1, [r4, #8]
 8004b46:	9301      	str	r3, [sp, #4]
 8004b48:	4620      	mov	r0, r4
 8004b4a:	f000 fbdb 	bl	8005304 <_vfiprintf_r>
 8004b4e:	b002      	add	sp, #8
 8004b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b54:	b004      	add	sp, #16
 8004b56:	4770      	bx	lr
 8004b58:	2000000c 	.word	0x2000000c

08004b5c <_puts_r>:
 8004b5c:	b570      	push	{r4, r5, r6, lr}
 8004b5e:	460e      	mov	r6, r1
 8004b60:	4605      	mov	r5, r0
 8004b62:	b118      	cbz	r0, 8004b6c <_puts_r+0x10>
 8004b64:	6983      	ldr	r3, [r0, #24]
 8004b66:	b90b      	cbnz	r3, 8004b6c <_puts_r+0x10>
 8004b68:	f000 fa0c 	bl	8004f84 <__sinit>
 8004b6c:	69ab      	ldr	r3, [r5, #24]
 8004b6e:	68ac      	ldr	r4, [r5, #8]
 8004b70:	b913      	cbnz	r3, 8004b78 <_puts_r+0x1c>
 8004b72:	4628      	mov	r0, r5
 8004b74:	f000 fa06 	bl	8004f84 <__sinit>
 8004b78:	4b23      	ldr	r3, [pc, #140]	; (8004c08 <_puts_r+0xac>)
 8004b7a:	429c      	cmp	r4, r3
 8004b7c:	d117      	bne.n	8004bae <_puts_r+0x52>
 8004b7e:	686c      	ldr	r4, [r5, #4]
 8004b80:	89a3      	ldrh	r3, [r4, #12]
 8004b82:	071b      	lsls	r3, r3, #28
 8004b84:	d51d      	bpl.n	8004bc2 <_puts_r+0x66>
 8004b86:	6923      	ldr	r3, [r4, #16]
 8004b88:	b1db      	cbz	r3, 8004bc2 <_puts_r+0x66>
 8004b8a:	3e01      	subs	r6, #1
 8004b8c:	68a3      	ldr	r3, [r4, #8]
 8004b8e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004b92:	3b01      	subs	r3, #1
 8004b94:	60a3      	str	r3, [r4, #8]
 8004b96:	b9e9      	cbnz	r1, 8004bd4 <_puts_r+0x78>
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	da2e      	bge.n	8004bfa <_puts_r+0x9e>
 8004b9c:	4622      	mov	r2, r4
 8004b9e:	210a      	movs	r1, #10
 8004ba0:	4628      	mov	r0, r5
 8004ba2:	f000 f83f 	bl	8004c24 <__swbuf_r>
 8004ba6:	3001      	adds	r0, #1
 8004ba8:	d011      	beq.n	8004bce <_puts_r+0x72>
 8004baa:	200a      	movs	r0, #10
 8004bac:	e011      	b.n	8004bd2 <_puts_r+0x76>
 8004bae:	4b17      	ldr	r3, [pc, #92]	; (8004c0c <_puts_r+0xb0>)
 8004bb0:	429c      	cmp	r4, r3
 8004bb2:	d101      	bne.n	8004bb8 <_puts_r+0x5c>
 8004bb4:	68ac      	ldr	r4, [r5, #8]
 8004bb6:	e7e3      	b.n	8004b80 <_puts_r+0x24>
 8004bb8:	4b15      	ldr	r3, [pc, #84]	; (8004c10 <_puts_r+0xb4>)
 8004bba:	429c      	cmp	r4, r3
 8004bbc:	bf08      	it	eq
 8004bbe:	68ec      	ldreq	r4, [r5, #12]
 8004bc0:	e7de      	b.n	8004b80 <_puts_r+0x24>
 8004bc2:	4621      	mov	r1, r4
 8004bc4:	4628      	mov	r0, r5
 8004bc6:	f000 f87f 	bl	8004cc8 <__swsetup_r>
 8004bca:	2800      	cmp	r0, #0
 8004bcc:	d0dd      	beq.n	8004b8a <_puts_r+0x2e>
 8004bce:	f04f 30ff 	mov.w	r0, #4294967295
 8004bd2:	bd70      	pop	{r4, r5, r6, pc}
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	da04      	bge.n	8004be2 <_puts_r+0x86>
 8004bd8:	69a2      	ldr	r2, [r4, #24]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	dc06      	bgt.n	8004bec <_puts_r+0x90>
 8004bde:	290a      	cmp	r1, #10
 8004be0:	d004      	beq.n	8004bec <_puts_r+0x90>
 8004be2:	6823      	ldr	r3, [r4, #0]
 8004be4:	1c5a      	adds	r2, r3, #1
 8004be6:	6022      	str	r2, [r4, #0]
 8004be8:	7019      	strb	r1, [r3, #0]
 8004bea:	e7cf      	b.n	8004b8c <_puts_r+0x30>
 8004bec:	4622      	mov	r2, r4
 8004bee:	4628      	mov	r0, r5
 8004bf0:	f000 f818 	bl	8004c24 <__swbuf_r>
 8004bf4:	3001      	adds	r0, #1
 8004bf6:	d1c9      	bne.n	8004b8c <_puts_r+0x30>
 8004bf8:	e7e9      	b.n	8004bce <_puts_r+0x72>
 8004bfa:	6823      	ldr	r3, [r4, #0]
 8004bfc:	200a      	movs	r0, #10
 8004bfe:	1c5a      	adds	r2, r3, #1
 8004c00:	6022      	str	r2, [r4, #0]
 8004c02:	7018      	strb	r0, [r3, #0]
 8004c04:	e7e5      	b.n	8004bd2 <_puts_r+0x76>
 8004c06:	bf00      	nop
 8004c08:	08005b04 	.word	0x08005b04
 8004c0c:	08005b24 	.word	0x08005b24
 8004c10:	08005ae4 	.word	0x08005ae4

08004c14 <puts>:
 8004c14:	4b02      	ldr	r3, [pc, #8]	; (8004c20 <puts+0xc>)
 8004c16:	4601      	mov	r1, r0
 8004c18:	6818      	ldr	r0, [r3, #0]
 8004c1a:	f7ff bf9f 	b.w	8004b5c <_puts_r>
 8004c1e:	bf00      	nop
 8004c20:	2000000c 	.word	0x2000000c

08004c24 <__swbuf_r>:
 8004c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c26:	460e      	mov	r6, r1
 8004c28:	4614      	mov	r4, r2
 8004c2a:	4605      	mov	r5, r0
 8004c2c:	b118      	cbz	r0, 8004c36 <__swbuf_r+0x12>
 8004c2e:	6983      	ldr	r3, [r0, #24]
 8004c30:	b90b      	cbnz	r3, 8004c36 <__swbuf_r+0x12>
 8004c32:	f000 f9a7 	bl	8004f84 <__sinit>
 8004c36:	4b21      	ldr	r3, [pc, #132]	; (8004cbc <__swbuf_r+0x98>)
 8004c38:	429c      	cmp	r4, r3
 8004c3a:	d12a      	bne.n	8004c92 <__swbuf_r+0x6e>
 8004c3c:	686c      	ldr	r4, [r5, #4]
 8004c3e:	69a3      	ldr	r3, [r4, #24]
 8004c40:	60a3      	str	r3, [r4, #8]
 8004c42:	89a3      	ldrh	r3, [r4, #12]
 8004c44:	071a      	lsls	r2, r3, #28
 8004c46:	d52e      	bpl.n	8004ca6 <__swbuf_r+0x82>
 8004c48:	6923      	ldr	r3, [r4, #16]
 8004c4a:	b363      	cbz	r3, 8004ca6 <__swbuf_r+0x82>
 8004c4c:	6923      	ldr	r3, [r4, #16]
 8004c4e:	6820      	ldr	r0, [r4, #0]
 8004c50:	1ac0      	subs	r0, r0, r3
 8004c52:	6963      	ldr	r3, [r4, #20]
 8004c54:	b2f6      	uxtb	r6, r6
 8004c56:	4283      	cmp	r3, r0
 8004c58:	4637      	mov	r7, r6
 8004c5a:	dc04      	bgt.n	8004c66 <__swbuf_r+0x42>
 8004c5c:	4621      	mov	r1, r4
 8004c5e:	4628      	mov	r0, r5
 8004c60:	f000 f926 	bl	8004eb0 <_fflush_r>
 8004c64:	bb28      	cbnz	r0, 8004cb2 <__swbuf_r+0x8e>
 8004c66:	68a3      	ldr	r3, [r4, #8]
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	60a3      	str	r3, [r4, #8]
 8004c6c:	6823      	ldr	r3, [r4, #0]
 8004c6e:	1c5a      	adds	r2, r3, #1
 8004c70:	6022      	str	r2, [r4, #0]
 8004c72:	701e      	strb	r6, [r3, #0]
 8004c74:	6963      	ldr	r3, [r4, #20]
 8004c76:	3001      	adds	r0, #1
 8004c78:	4283      	cmp	r3, r0
 8004c7a:	d004      	beq.n	8004c86 <__swbuf_r+0x62>
 8004c7c:	89a3      	ldrh	r3, [r4, #12]
 8004c7e:	07db      	lsls	r3, r3, #31
 8004c80:	d519      	bpl.n	8004cb6 <__swbuf_r+0x92>
 8004c82:	2e0a      	cmp	r6, #10
 8004c84:	d117      	bne.n	8004cb6 <__swbuf_r+0x92>
 8004c86:	4621      	mov	r1, r4
 8004c88:	4628      	mov	r0, r5
 8004c8a:	f000 f911 	bl	8004eb0 <_fflush_r>
 8004c8e:	b190      	cbz	r0, 8004cb6 <__swbuf_r+0x92>
 8004c90:	e00f      	b.n	8004cb2 <__swbuf_r+0x8e>
 8004c92:	4b0b      	ldr	r3, [pc, #44]	; (8004cc0 <__swbuf_r+0x9c>)
 8004c94:	429c      	cmp	r4, r3
 8004c96:	d101      	bne.n	8004c9c <__swbuf_r+0x78>
 8004c98:	68ac      	ldr	r4, [r5, #8]
 8004c9a:	e7d0      	b.n	8004c3e <__swbuf_r+0x1a>
 8004c9c:	4b09      	ldr	r3, [pc, #36]	; (8004cc4 <__swbuf_r+0xa0>)
 8004c9e:	429c      	cmp	r4, r3
 8004ca0:	bf08      	it	eq
 8004ca2:	68ec      	ldreq	r4, [r5, #12]
 8004ca4:	e7cb      	b.n	8004c3e <__swbuf_r+0x1a>
 8004ca6:	4621      	mov	r1, r4
 8004ca8:	4628      	mov	r0, r5
 8004caa:	f000 f80d 	bl	8004cc8 <__swsetup_r>
 8004cae:	2800      	cmp	r0, #0
 8004cb0:	d0cc      	beq.n	8004c4c <__swbuf_r+0x28>
 8004cb2:	f04f 37ff 	mov.w	r7, #4294967295
 8004cb6:	4638      	mov	r0, r7
 8004cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	08005b04 	.word	0x08005b04
 8004cc0:	08005b24 	.word	0x08005b24
 8004cc4:	08005ae4 	.word	0x08005ae4

08004cc8 <__swsetup_r>:
 8004cc8:	4b32      	ldr	r3, [pc, #200]	; (8004d94 <__swsetup_r+0xcc>)
 8004cca:	b570      	push	{r4, r5, r6, lr}
 8004ccc:	681d      	ldr	r5, [r3, #0]
 8004cce:	4606      	mov	r6, r0
 8004cd0:	460c      	mov	r4, r1
 8004cd2:	b125      	cbz	r5, 8004cde <__swsetup_r+0x16>
 8004cd4:	69ab      	ldr	r3, [r5, #24]
 8004cd6:	b913      	cbnz	r3, 8004cde <__swsetup_r+0x16>
 8004cd8:	4628      	mov	r0, r5
 8004cda:	f000 f953 	bl	8004f84 <__sinit>
 8004cde:	4b2e      	ldr	r3, [pc, #184]	; (8004d98 <__swsetup_r+0xd0>)
 8004ce0:	429c      	cmp	r4, r3
 8004ce2:	d10f      	bne.n	8004d04 <__swsetup_r+0x3c>
 8004ce4:	686c      	ldr	r4, [r5, #4]
 8004ce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	0715      	lsls	r5, r2, #28
 8004cee:	d42c      	bmi.n	8004d4a <__swsetup_r+0x82>
 8004cf0:	06d0      	lsls	r0, r2, #27
 8004cf2:	d411      	bmi.n	8004d18 <__swsetup_r+0x50>
 8004cf4:	2209      	movs	r2, #9
 8004cf6:	6032      	str	r2, [r6, #0]
 8004cf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cfc:	81a3      	strh	r3, [r4, #12]
 8004cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8004d02:	e03e      	b.n	8004d82 <__swsetup_r+0xba>
 8004d04:	4b25      	ldr	r3, [pc, #148]	; (8004d9c <__swsetup_r+0xd4>)
 8004d06:	429c      	cmp	r4, r3
 8004d08:	d101      	bne.n	8004d0e <__swsetup_r+0x46>
 8004d0a:	68ac      	ldr	r4, [r5, #8]
 8004d0c:	e7eb      	b.n	8004ce6 <__swsetup_r+0x1e>
 8004d0e:	4b24      	ldr	r3, [pc, #144]	; (8004da0 <__swsetup_r+0xd8>)
 8004d10:	429c      	cmp	r4, r3
 8004d12:	bf08      	it	eq
 8004d14:	68ec      	ldreq	r4, [r5, #12]
 8004d16:	e7e6      	b.n	8004ce6 <__swsetup_r+0x1e>
 8004d18:	0751      	lsls	r1, r2, #29
 8004d1a:	d512      	bpl.n	8004d42 <__swsetup_r+0x7a>
 8004d1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d1e:	b141      	cbz	r1, 8004d32 <__swsetup_r+0x6a>
 8004d20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d24:	4299      	cmp	r1, r3
 8004d26:	d002      	beq.n	8004d2e <__swsetup_r+0x66>
 8004d28:	4630      	mov	r0, r6
 8004d2a:	f000 fa19 	bl	8005160 <_free_r>
 8004d2e:	2300      	movs	r3, #0
 8004d30:	6363      	str	r3, [r4, #52]	; 0x34
 8004d32:	89a3      	ldrh	r3, [r4, #12]
 8004d34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004d38:	81a3      	strh	r3, [r4, #12]
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	6063      	str	r3, [r4, #4]
 8004d3e:	6923      	ldr	r3, [r4, #16]
 8004d40:	6023      	str	r3, [r4, #0]
 8004d42:	89a3      	ldrh	r3, [r4, #12]
 8004d44:	f043 0308 	orr.w	r3, r3, #8
 8004d48:	81a3      	strh	r3, [r4, #12]
 8004d4a:	6923      	ldr	r3, [r4, #16]
 8004d4c:	b94b      	cbnz	r3, 8004d62 <__swsetup_r+0x9a>
 8004d4e:	89a3      	ldrh	r3, [r4, #12]
 8004d50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004d54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d58:	d003      	beq.n	8004d62 <__swsetup_r+0x9a>
 8004d5a:	4621      	mov	r1, r4
 8004d5c:	4630      	mov	r0, r6
 8004d5e:	f000 f9bf 	bl	80050e0 <__smakebuf_r>
 8004d62:	89a2      	ldrh	r2, [r4, #12]
 8004d64:	f012 0301 	ands.w	r3, r2, #1
 8004d68:	d00c      	beq.n	8004d84 <__swsetup_r+0xbc>
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	60a3      	str	r3, [r4, #8]
 8004d6e:	6963      	ldr	r3, [r4, #20]
 8004d70:	425b      	negs	r3, r3
 8004d72:	61a3      	str	r3, [r4, #24]
 8004d74:	6923      	ldr	r3, [r4, #16]
 8004d76:	b953      	cbnz	r3, 8004d8e <__swsetup_r+0xc6>
 8004d78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d7c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004d80:	d1ba      	bne.n	8004cf8 <__swsetup_r+0x30>
 8004d82:	bd70      	pop	{r4, r5, r6, pc}
 8004d84:	0792      	lsls	r2, r2, #30
 8004d86:	bf58      	it	pl
 8004d88:	6963      	ldrpl	r3, [r4, #20]
 8004d8a:	60a3      	str	r3, [r4, #8]
 8004d8c:	e7f2      	b.n	8004d74 <__swsetup_r+0xac>
 8004d8e:	2000      	movs	r0, #0
 8004d90:	e7f7      	b.n	8004d82 <__swsetup_r+0xba>
 8004d92:	bf00      	nop
 8004d94:	2000000c 	.word	0x2000000c
 8004d98:	08005b04 	.word	0x08005b04
 8004d9c:	08005b24 	.word	0x08005b24
 8004da0:	08005ae4 	.word	0x08005ae4

08004da4 <__sflush_r>:
 8004da4:	898a      	ldrh	r2, [r1, #12]
 8004da6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004daa:	4605      	mov	r5, r0
 8004dac:	0710      	lsls	r0, r2, #28
 8004dae:	460c      	mov	r4, r1
 8004db0:	d458      	bmi.n	8004e64 <__sflush_r+0xc0>
 8004db2:	684b      	ldr	r3, [r1, #4]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	dc05      	bgt.n	8004dc4 <__sflush_r+0x20>
 8004db8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	dc02      	bgt.n	8004dc4 <__sflush_r+0x20>
 8004dbe:	2000      	movs	r0, #0
 8004dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004dc6:	2e00      	cmp	r6, #0
 8004dc8:	d0f9      	beq.n	8004dbe <__sflush_r+0x1a>
 8004dca:	2300      	movs	r3, #0
 8004dcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004dd0:	682f      	ldr	r7, [r5, #0]
 8004dd2:	6a21      	ldr	r1, [r4, #32]
 8004dd4:	602b      	str	r3, [r5, #0]
 8004dd6:	d032      	beq.n	8004e3e <__sflush_r+0x9a>
 8004dd8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004dda:	89a3      	ldrh	r3, [r4, #12]
 8004ddc:	075a      	lsls	r2, r3, #29
 8004dde:	d505      	bpl.n	8004dec <__sflush_r+0x48>
 8004de0:	6863      	ldr	r3, [r4, #4]
 8004de2:	1ac0      	subs	r0, r0, r3
 8004de4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004de6:	b10b      	cbz	r3, 8004dec <__sflush_r+0x48>
 8004de8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004dea:	1ac0      	subs	r0, r0, r3
 8004dec:	2300      	movs	r3, #0
 8004dee:	4602      	mov	r2, r0
 8004df0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004df2:	6a21      	ldr	r1, [r4, #32]
 8004df4:	4628      	mov	r0, r5
 8004df6:	47b0      	blx	r6
 8004df8:	1c43      	adds	r3, r0, #1
 8004dfa:	89a3      	ldrh	r3, [r4, #12]
 8004dfc:	d106      	bne.n	8004e0c <__sflush_r+0x68>
 8004dfe:	6829      	ldr	r1, [r5, #0]
 8004e00:	291d      	cmp	r1, #29
 8004e02:	d848      	bhi.n	8004e96 <__sflush_r+0xf2>
 8004e04:	4a29      	ldr	r2, [pc, #164]	; (8004eac <__sflush_r+0x108>)
 8004e06:	40ca      	lsrs	r2, r1
 8004e08:	07d6      	lsls	r6, r2, #31
 8004e0a:	d544      	bpl.n	8004e96 <__sflush_r+0xf2>
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	6062      	str	r2, [r4, #4]
 8004e10:	04d9      	lsls	r1, r3, #19
 8004e12:	6922      	ldr	r2, [r4, #16]
 8004e14:	6022      	str	r2, [r4, #0]
 8004e16:	d504      	bpl.n	8004e22 <__sflush_r+0x7e>
 8004e18:	1c42      	adds	r2, r0, #1
 8004e1a:	d101      	bne.n	8004e20 <__sflush_r+0x7c>
 8004e1c:	682b      	ldr	r3, [r5, #0]
 8004e1e:	b903      	cbnz	r3, 8004e22 <__sflush_r+0x7e>
 8004e20:	6560      	str	r0, [r4, #84]	; 0x54
 8004e22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e24:	602f      	str	r7, [r5, #0]
 8004e26:	2900      	cmp	r1, #0
 8004e28:	d0c9      	beq.n	8004dbe <__sflush_r+0x1a>
 8004e2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e2e:	4299      	cmp	r1, r3
 8004e30:	d002      	beq.n	8004e38 <__sflush_r+0x94>
 8004e32:	4628      	mov	r0, r5
 8004e34:	f000 f994 	bl	8005160 <_free_r>
 8004e38:	2000      	movs	r0, #0
 8004e3a:	6360      	str	r0, [r4, #52]	; 0x34
 8004e3c:	e7c0      	b.n	8004dc0 <__sflush_r+0x1c>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	4628      	mov	r0, r5
 8004e42:	47b0      	blx	r6
 8004e44:	1c41      	adds	r1, r0, #1
 8004e46:	d1c8      	bne.n	8004dda <__sflush_r+0x36>
 8004e48:	682b      	ldr	r3, [r5, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d0c5      	beq.n	8004dda <__sflush_r+0x36>
 8004e4e:	2b1d      	cmp	r3, #29
 8004e50:	d001      	beq.n	8004e56 <__sflush_r+0xb2>
 8004e52:	2b16      	cmp	r3, #22
 8004e54:	d101      	bne.n	8004e5a <__sflush_r+0xb6>
 8004e56:	602f      	str	r7, [r5, #0]
 8004e58:	e7b1      	b.n	8004dbe <__sflush_r+0x1a>
 8004e5a:	89a3      	ldrh	r3, [r4, #12]
 8004e5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e60:	81a3      	strh	r3, [r4, #12]
 8004e62:	e7ad      	b.n	8004dc0 <__sflush_r+0x1c>
 8004e64:	690f      	ldr	r7, [r1, #16]
 8004e66:	2f00      	cmp	r7, #0
 8004e68:	d0a9      	beq.n	8004dbe <__sflush_r+0x1a>
 8004e6a:	0793      	lsls	r3, r2, #30
 8004e6c:	680e      	ldr	r6, [r1, #0]
 8004e6e:	bf08      	it	eq
 8004e70:	694b      	ldreq	r3, [r1, #20]
 8004e72:	600f      	str	r7, [r1, #0]
 8004e74:	bf18      	it	ne
 8004e76:	2300      	movne	r3, #0
 8004e78:	eba6 0807 	sub.w	r8, r6, r7
 8004e7c:	608b      	str	r3, [r1, #8]
 8004e7e:	f1b8 0f00 	cmp.w	r8, #0
 8004e82:	dd9c      	ble.n	8004dbe <__sflush_r+0x1a>
 8004e84:	4643      	mov	r3, r8
 8004e86:	463a      	mov	r2, r7
 8004e88:	6a21      	ldr	r1, [r4, #32]
 8004e8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004e8c:	4628      	mov	r0, r5
 8004e8e:	47b0      	blx	r6
 8004e90:	2800      	cmp	r0, #0
 8004e92:	dc06      	bgt.n	8004ea2 <__sflush_r+0xfe>
 8004e94:	89a3      	ldrh	r3, [r4, #12]
 8004e96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e9a:	81a3      	strh	r3, [r4, #12]
 8004e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004ea0:	e78e      	b.n	8004dc0 <__sflush_r+0x1c>
 8004ea2:	4407      	add	r7, r0
 8004ea4:	eba8 0800 	sub.w	r8, r8, r0
 8004ea8:	e7e9      	b.n	8004e7e <__sflush_r+0xda>
 8004eaa:	bf00      	nop
 8004eac:	20400001 	.word	0x20400001

08004eb0 <_fflush_r>:
 8004eb0:	b538      	push	{r3, r4, r5, lr}
 8004eb2:	690b      	ldr	r3, [r1, #16]
 8004eb4:	4605      	mov	r5, r0
 8004eb6:	460c      	mov	r4, r1
 8004eb8:	b1db      	cbz	r3, 8004ef2 <_fflush_r+0x42>
 8004eba:	b118      	cbz	r0, 8004ec4 <_fflush_r+0x14>
 8004ebc:	6983      	ldr	r3, [r0, #24]
 8004ebe:	b90b      	cbnz	r3, 8004ec4 <_fflush_r+0x14>
 8004ec0:	f000 f860 	bl	8004f84 <__sinit>
 8004ec4:	4b0c      	ldr	r3, [pc, #48]	; (8004ef8 <_fflush_r+0x48>)
 8004ec6:	429c      	cmp	r4, r3
 8004ec8:	d109      	bne.n	8004ede <_fflush_r+0x2e>
 8004eca:	686c      	ldr	r4, [r5, #4]
 8004ecc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ed0:	b17b      	cbz	r3, 8004ef2 <_fflush_r+0x42>
 8004ed2:	4621      	mov	r1, r4
 8004ed4:	4628      	mov	r0, r5
 8004ed6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004eda:	f7ff bf63 	b.w	8004da4 <__sflush_r>
 8004ede:	4b07      	ldr	r3, [pc, #28]	; (8004efc <_fflush_r+0x4c>)
 8004ee0:	429c      	cmp	r4, r3
 8004ee2:	d101      	bne.n	8004ee8 <_fflush_r+0x38>
 8004ee4:	68ac      	ldr	r4, [r5, #8]
 8004ee6:	e7f1      	b.n	8004ecc <_fflush_r+0x1c>
 8004ee8:	4b05      	ldr	r3, [pc, #20]	; (8004f00 <_fflush_r+0x50>)
 8004eea:	429c      	cmp	r4, r3
 8004eec:	bf08      	it	eq
 8004eee:	68ec      	ldreq	r4, [r5, #12]
 8004ef0:	e7ec      	b.n	8004ecc <_fflush_r+0x1c>
 8004ef2:	2000      	movs	r0, #0
 8004ef4:	bd38      	pop	{r3, r4, r5, pc}
 8004ef6:	bf00      	nop
 8004ef8:	08005b04 	.word	0x08005b04
 8004efc:	08005b24 	.word	0x08005b24
 8004f00:	08005ae4 	.word	0x08005ae4

08004f04 <std>:
 8004f04:	2300      	movs	r3, #0
 8004f06:	b510      	push	{r4, lr}
 8004f08:	4604      	mov	r4, r0
 8004f0a:	e9c0 3300 	strd	r3, r3, [r0]
 8004f0e:	6083      	str	r3, [r0, #8]
 8004f10:	8181      	strh	r1, [r0, #12]
 8004f12:	6643      	str	r3, [r0, #100]	; 0x64
 8004f14:	81c2      	strh	r2, [r0, #14]
 8004f16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f1a:	6183      	str	r3, [r0, #24]
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	2208      	movs	r2, #8
 8004f20:	305c      	adds	r0, #92	; 0x5c
 8004f22:	f7ff fdfb 	bl	8004b1c <memset>
 8004f26:	4b05      	ldr	r3, [pc, #20]	; (8004f3c <std+0x38>)
 8004f28:	6263      	str	r3, [r4, #36]	; 0x24
 8004f2a:	4b05      	ldr	r3, [pc, #20]	; (8004f40 <std+0x3c>)
 8004f2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f2e:	4b05      	ldr	r3, [pc, #20]	; (8004f44 <std+0x40>)
 8004f30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f32:	4b05      	ldr	r3, [pc, #20]	; (8004f48 <std+0x44>)
 8004f34:	6224      	str	r4, [r4, #32]
 8004f36:	6323      	str	r3, [r4, #48]	; 0x30
 8004f38:	bd10      	pop	{r4, pc}
 8004f3a:	bf00      	nop
 8004f3c:	08005861 	.word	0x08005861
 8004f40:	08005883 	.word	0x08005883
 8004f44:	080058bb 	.word	0x080058bb
 8004f48:	080058df 	.word	0x080058df

08004f4c <_cleanup_r>:
 8004f4c:	4901      	ldr	r1, [pc, #4]	; (8004f54 <_cleanup_r+0x8>)
 8004f4e:	f000 b885 	b.w	800505c <_fwalk_reent>
 8004f52:	bf00      	nop
 8004f54:	08004eb1 	.word	0x08004eb1

08004f58 <__sfmoreglue>:
 8004f58:	b570      	push	{r4, r5, r6, lr}
 8004f5a:	1e4a      	subs	r2, r1, #1
 8004f5c:	2568      	movs	r5, #104	; 0x68
 8004f5e:	4355      	muls	r5, r2
 8004f60:	460e      	mov	r6, r1
 8004f62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004f66:	f000 f949 	bl	80051fc <_malloc_r>
 8004f6a:	4604      	mov	r4, r0
 8004f6c:	b140      	cbz	r0, 8004f80 <__sfmoreglue+0x28>
 8004f6e:	2100      	movs	r1, #0
 8004f70:	e9c0 1600 	strd	r1, r6, [r0]
 8004f74:	300c      	adds	r0, #12
 8004f76:	60a0      	str	r0, [r4, #8]
 8004f78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004f7c:	f7ff fdce 	bl	8004b1c <memset>
 8004f80:	4620      	mov	r0, r4
 8004f82:	bd70      	pop	{r4, r5, r6, pc}

08004f84 <__sinit>:
 8004f84:	6983      	ldr	r3, [r0, #24]
 8004f86:	b510      	push	{r4, lr}
 8004f88:	4604      	mov	r4, r0
 8004f8a:	bb33      	cbnz	r3, 8004fda <__sinit+0x56>
 8004f8c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004f90:	6503      	str	r3, [r0, #80]	; 0x50
 8004f92:	4b12      	ldr	r3, [pc, #72]	; (8004fdc <__sinit+0x58>)
 8004f94:	4a12      	ldr	r2, [pc, #72]	; (8004fe0 <__sinit+0x5c>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	6282      	str	r2, [r0, #40]	; 0x28
 8004f9a:	4298      	cmp	r0, r3
 8004f9c:	bf04      	itt	eq
 8004f9e:	2301      	moveq	r3, #1
 8004fa0:	6183      	streq	r3, [r0, #24]
 8004fa2:	f000 f81f 	bl	8004fe4 <__sfp>
 8004fa6:	6060      	str	r0, [r4, #4]
 8004fa8:	4620      	mov	r0, r4
 8004faa:	f000 f81b 	bl	8004fe4 <__sfp>
 8004fae:	60a0      	str	r0, [r4, #8]
 8004fb0:	4620      	mov	r0, r4
 8004fb2:	f000 f817 	bl	8004fe4 <__sfp>
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	60e0      	str	r0, [r4, #12]
 8004fba:	2104      	movs	r1, #4
 8004fbc:	6860      	ldr	r0, [r4, #4]
 8004fbe:	f7ff ffa1 	bl	8004f04 <std>
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	2109      	movs	r1, #9
 8004fc6:	68a0      	ldr	r0, [r4, #8]
 8004fc8:	f7ff ff9c 	bl	8004f04 <std>
 8004fcc:	2202      	movs	r2, #2
 8004fce:	2112      	movs	r1, #18
 8004fd0:	68e0      	ldr	r0, [r4, #12]
 8004fd2:	f7ff ff97 	bl	8004f04 <std>
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	61a3      	str	r3, [r4, #24]
 8004fda:	bd10      	pop	{r4, pc}
 8004fdc:	08005ae0 	.word	0x08005ae0
 8004fe0:	08004f4d 	.word	0x08004f4d

08004fe4 <__sfp>:
 8004fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fe6:	4b1b      	ldr	r3, [pc, #108]	; (8005054 <__sfp+0x70>)
 8004fe8:	681e      	ldr	r6, [r3, #0]
 8004fea:	69b3      	ldr	r3, [r6, #24]
 8004fec:	4607      	mov	r7, r0
 8004fee:	b913      	cbnz	r3, 8004ff6 <__sfp+0x12>
 8004ff0:	4630      	mov	r0, r6
 8004ff2:	f7ff ffc7 	bl	8004f84 <__sinit>
 8004ff6:	3648      	adds	r6, #72	; 0x48
 8004ff8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	d503      	bpl.n	8005008 <__sfp+0x24>
 8005000:	6833      	ldr	r3, [r6, #0]
 8005002:	b133      	cbz	r3, 8005012 <__sfp+0x2e>
 8005004:	6836      	ldr	r6, [r6, #0]
 8005006:	e7f7      	b.n	8004ff8 <__sfp+0x14>
 8005008:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800500c:	b16d      	cbz	r5, 800502a <__sfp+0x46>
 800500e:	3468      	adds	r4, #104	; 0x68
 8005010:	e7f4      	b.n	8004ffc <__sfp+0x18>
 8005012:	2104      	movs	r1, #4
 8005014:	4638      	mov	r0, r7
 8005016:	f7ff ff9f 	bl	8004f58 <__sfmoreglue>
 800501a:	6030      	str	r0, [r6, #0]
 800501c:	2800      	cmp	r0, #0
 800501e:	d1f1      	bne.n	8005004 <__sfp+0x20>
 8005020:	230c      	movs	r3, #12
 8005022:	603b      	str	r3, [r7, #0]
 8005024:	4604      	mov	r4, r0
 8005026:	4620      	mov	r0, r4
 8005028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800502a:	4b0b      	ldr	r3, [pc, #44]	; (8005058 <__sfp+0x74>)
 800502c:	6665      	str	r5, [r4, #100]	; 0x64
 800502e:	e9c4 5500 	strd	r5, r5, [r4]
 8005032:	60a5      	str	r5, [r4, #8]
 8005034:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005038:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800503c:	2208      	movs	r2, #8
 800503e:	4629      	mov	r1, r5
 8005040:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005044:	f7ff fd6a 	bl	8004b1c <memset>
 8005048:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800504c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005050:	e7e9      	b.n	8005026 <__sfp+0x42>
 8005052:	bf00      	nop
 8005054:	08005ae0 	.word	0x08005ae0
 8005058:	ffff0001 	.word	0xffff0001

0800505c <_fwalk_reent>:
 800505c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005060:	4680      	mov	r8, r0
 8005062:	4689      	mov	r9, r1
 8005064:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005068:	2600      	movs	r6, #0
 800506a:	b914      	cbnz	r4, 8005072 <_fwalk_reent+0x16>
 800506c:	4630      	mov	r0, r6
 800506e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005072:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005076:	3f01      	subs	r7, #1
 8005078:	d501      	bpl.n	800507e <_fwalk_reent+0x22>
 800507a:	6824      	ldr	r4, [r4, #0]
 800507c:	e7f5      	b.n	800506a <_fwalk_reent+0xe>
 800507e:	89ab      	ldrh	r3, [r5, #12]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d907      	bls.n	8005094 <_fwalk_reent+0x38>
 8005084:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005088:	3301      	adds	r3, #1
 800508a:	d003      	beq.n	8005094 <_fwalk_reent+0x38>
 800508c:	4629      	mov	r1, r5
 800508e:	4640      	mov	r0, r8
 8005090:	47c8      	blx	r9
 8005092:	4306      	orrs	r6, r0
 8005094:	3568      	adds	r5, #104	; 0x68
 8005096:	e7ee      	b.n	8005076 <_fwalk_reent+0x1a>

08005098 <__swhatbuf_r>:
 8005098:	b570      	push	{r4, r5, r6, lr}
 800509a:	460e      	mov	r6, r1
 800509c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050a0:	2900      	cmp	r1, #0
 80050a2:	b096      	sub	sp, #88	; 0x58
 80050a4:	4614      	mov	r4, r2
 80050a6:	461d      	mov	r5, r3
 80050a8:	da07      	bge.n	80050ba <__swhatbuf_r+0x22>
 80050aa:	2300      	movs	r3, #0
 80050ac:	602b      	str	r3, [r5, #0]
 80050ae:	89b3      	ldrh	r3, [r6, #12]
 80050b0:	061a      	lsls	r2, r3, #24
 80050b2:	d410      	bmi.n	80050d6 <__swhatbuf_r+0x3e>
 80050b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050b8:	e00e      	b.n	80050d8 <__swhatbuf_r+0x40>
 80050ba:	466a      	mov	r2, sp
 80050bc:	f000 fc36 	bl	800592c <_fstat_r>
 80050c0:	2800      	cmp	r0, #0
 80050c2:	dbf2      	blt.n	80050aa <__swhatbuf_r+0x12>
 80050c4:	9a01      	ldr	r2, [sp, #4]
 80050c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80050ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80050ce:	425a      	negs	r2, r3
 80050d0:	415a      	adcs	r2, r3
 80050d2:	602a      	str	r2, [r5, #0]
 80050d4:	e7ee      	b.n	80050b4 <__swhatbuf_r+0x1c>
 80050d6:	2340      	movs	r3, #64	; 0x40
 80050d8:	2000      	movs	r0, #0
 80050da:	6023      	str	r3, [r4, #0]
 80050dc:	b016      	add	sp, #88	; 0x58
 80050de:	bd70      	pop	{r4, r5, r6, pc}

080050e0 <__smakebuf_r>:
 80050e0:	898b      	ldrh	r3, [r1, #12]
 80050e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80050e4:	079d      	lsls	r5, r3, #30
 80050e6:	4606      	mov	r6, r0
 80050e8:	460c      	mov	r4, r1
 80050ea:	d507      	bpl.n	80050fc <__smakebuf_r+0x1c>
 80050ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80050f0:	6023      	str	r3, [r4, #0]
 80050f2:	6123      	str	r3, [r4, #16]
 80050f4:	2301      	movs	r3, #1
 80050f6:	6163      	str	r3, [r4, #20]
 80050f8:	b002      	add	sp, #8
 80050fa:	bd70      	pop	{r4, r5, r6, pc}
 80050fc:	ab01      	add	r3, sp, #4
 80050fe:	466a      	mov	r2, sp
 8005100:	f7ff ffca 	bl	8005098 <__swhatbuf_r>
 8005104:	9900      	ldr	r1, [sp, #0]
 8005106:	4605      	mov	r5, r0
 8005108:	4630      	mov	r0, r6
 800510a:	f000 f877 	bl	80051fc <_malloc_r>
 800510e:	b948      	cbnz	r0, 8005124 <__smakebuf_r+0x44>
 8005110:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005114:	059a      	lsls	r2, r3, #22
 8005116:	d4ef      	bmi.n	80050f8 <__smakebuf_r+0x18>
 8005118:	f023 0303 	bic.w	r3, r3, #3
 800511c:	f043 0302 	orr.w	r3, r3, #2
 8005120:	81a3      	strh	r3, [r4, #12]
 8005122:	e7e3      	b.n	80050ec <__smakebuf_r+0xc>
 8005124:	4b0d      	ldr	r3, [pc, #52]	; (800515c <__smakebuf_r+0x7c>)
 8005126:	62b3      	str	r3, [r6, #40]	; 0x28
 8005128:	89a3      	ldrh	r3, [r4, #12]
 800512a:	6020      	str	r0, [r4, #0]
 800512c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005130:	81a3      	strh	r3, [r4, #12]
 8005132:	9b00      	ldr	r3, [sp, #0]
 8005134:	6163      	str	r3, [r4, #20]
 8005136:	9b01      	ldr	r3, [sp, #4]
 8005138:	6120      	str	r0, [r4, #16]
 800513a:	b15b      	cbz	r3, 8005154 <__smakebuf_r+0x74>
 800513c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005140:	4630      	mov	r0, r6
 8005142:	f000 fc05 	bl	8005950 <_isatty_r>
 8005146:	b128      	cbz	r0, 8005154 <__smakebuf_r+0x74>
 8005148:	89a3      	ldrh	r3, [r4, #12]
 800514a:	f023 0303 	bic.w	r3, r3, #3
 800514e:	f043 0301 	orr.w	r3, r3, #1
 8005152:	81a3      	strh	r3, [r4, #12]
 8005154:	89a3      	ldrh	r3, [r4, #12]
 8005156:	431d      	orrs	r5, r3
 8005158:	81a5      	strh	r5, [r4, #12]
 800515a:	e7cd      	b.n	80050f8 <__smakebuf_r+0x18>
 800515c:	08004f4d 	.word	0x08004f4d

08005160 <_free_r>:
 8005160:	b538      	push	{r3, r4, r5, lr}
 8005162:	4605      	mov	r5, r0
 8005164:	2900      	cmp	r1, #0
 8005166:	d045      	beq.n	80051f4 <_free_r+0x94>
 8005168:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800516c:	1f0c      	subs	r4, r1, #4
 800516e:	2b00      	cmp	r3, #0
 8005170:	bfb8      	it	lt
 8005172:	18e4      	addlt	r4, r4, r3
 8005174:	f000 fc0e 	bl	8005994 <__malloc_lock>
 8005178:	4a1f      	ldr	r2, [pc, #124]	; (80051f8 <_free_r+0x98>)
 800517a:	6813      	ldr	r3, [r2, #0]
 800517c:	4610      	mov	r0, r2
 800517e:	b933      	cbnz	r3, 800518e <_free_r+0x2e>
 8005180:	6063      	str	r3, [r4, #4]
 8005182:	6014      	str	r4, [r2, #0]
 8005184:	4628      	mov	r0, r5
 8005186:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800518a:	f000 bc04 	b.w	8005996 <__malloc_unlock>
 800518e:	42a3      	cmp	r3, r4
 8005190:	d90c      	bls.n	80051ac <_free_r+0x4c>
 8005192:	6821      	ldr	r1, [r4, #0]
 8005194:	1862      	adds	r2, r4, r1
 8005196:	4293      	cmp	r3, r2
 8005198:	bf04      	itt	eq
 800519a:	681a      	ldreq	r2, [r3, #0]
 800519c:	685b      	ldreq	r3, [r3, #4]
 800519e:	6063      	str	r3, [r4, #4]
 80051a0:	bf04      	itt	eq
 80051a2:	1852      	addeq	r2, r2, r1
 80051a4:	6022      	streq	r2, [r4, #0]
 80051a6:	6004      	str	r4, [r0, #0]
 80051a8:	e7ec      	b.n	8005184 <_free_r+0x24>
 80051aa:	4613      	mov	r3, r2
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	b10a      	cbz	r2, 80051b4 <_free_r+0x54>
 80051b0:	42a2      	cmp	r2, r4
 80051b2:	d9fa      	bls.n	80051aa <_free_r+0x4a>
 80051b4:	6819      	ldr	r1, [r3, #0]
 80051b6:	1858      	adds	r0, r3, r1
 80051b8:	42a0      	cmp	r0, r4
 80051ba:	d10b      	bne.n	80051d4 <_free_r+0x74>
 80051bc:	6820      	ldr	r0, [r4, #0]
 80051be:	4401      	add	r1, r0
 80051c0:	1858      	adds	r0, r3, r1
 80051c2:	4282      	cmp	r2, r0
 80051c4:	6019      	str	r1, [r3, #0]
 80051c6:	d1dd      	bne.n	8005184 <_free_r+0x24>
 80051c8:	6810      	ldr	r0, [r2, #0]
 80051ca:	6852      	ldr	r2, [r2, #4]
 80051cc:	605a      	str	r2, [r3, #4]
 80051ce:	4401      	add	r1, r0
 80051d0:	6019      	str	r1, [r3, #0]
 80051d2:	e7d7      	b.n	8005184 <_free_r+0x24>
 80051d4:	d902      	bls.n	80051dc <_free_r+0x7c>
 80051d6:	230c      	movs	r3, #12
 80051d8:	602b      	str	r3, [r5, #0]
 80051da:	e7d3      	b.n	8005184 <_free_r+0x24>
 80051dc:	6820      	ldr	r0, [r4, #0]
 80051de:	1821      	adds	r1, r4, r0
 80051e0:	428a      	cmp	r2, r1
 80051e2:	bf04      	itt	eq
 80051e4:	6811      	ldreq	r1, [r2, #0]
 80051e6:	6852      	ldreq	r2, [r2, #4]
 80051e8:	6062      	str	r2, [r4, #4]
 80051ea:	bf04      	itt	eq
 80051ec:	1809      	addeq	r1, r1, r0
 80051ee:	6021      	streq	r1, [r4, #0]
 80051f0:	605c      	str	r4, [r3, #4]
 80051f2:	e7c7      	b.n	8005184 <_free_r+0x24>
 80051f4:	bd38      	pop	{r3, r4, r5, pc}
 80051f6:	bf00      	nop
 80051f8:	20000090 	.word	0x20000090

080051fc <_malloc_r>:
 80051fc:	b570      	push	{r4, r5, r6, lr}
 80051fe:	1ccd      	adds	r5, r1, #3
 8005200:	f025 0503 	bic.w	r5, r5, #3
 8005204:	3508      	adds	r5, #8
 8005206:	2d0c      	cmp	r5, #12
 8005208:	bf38      	it	cc
 800520a:	250c      	movcc	r5, #12
 800520c:	2d00      	cmp	r5, #0
 800520e:	4606      	mov	r6, r0
 8005210:	db01      	blt.n	8005216 <_malloc_r+0x1a>
 8005212:	42a9      	cmp	r1, r5
 8005214:	d903      	bls.n	800521e <_malloc_r+0x22>
 8005216:	230c      	movs	r3, #12
 8005218:	6033      	str	r3, [r6, #0]
 800521a:	2000      	movs	r0, #0
 800521c:	bd70      	pop	{r4, r5, r6, pc}
 800521e:	f000 fbb9 	bl	8005994 <__malloc_lock>
 8005222:	4a21      	ldr	r2, [pc, #132]	; (80052a8 <_malloc_r+0xac>)
 8005224:	6814      	ldr	r4, [r2, #0]
 8005226:	4621      	mov	r1, r4
 8005228:	b991      	cbnz	r1, 8005250 <_malloc_r+0x54>
 800522a:	4c20      	ldr	r4, [pc, #128]	; (80052ac <_malloc_r+0xb0>)
 800522c:	6823      	ldr	r3, [r4, #0]
 800522e:	b91b      	cbnz	r3, 8005238 <_malloc_r+0x3c>
 8005230:	4630      	mov	r0, r6
 8005232:	f000 fb05 	bl	8005840 <_sbrk_r>
 8005236:	6020      	str	r0, [r4, #0]
 8005238:	4629      	mov	r1, r5
 800523a:	4630      	mov	r0, r6
 800523c:	f000 fb00 	bl	8005840 <_sbrk_r>
 8005240:	1c43      	adds	r3, r0, #1
 8005242:	d124      	bne.n	800528e <_malloc_r+0x92>
 8005244:	230c      	movs	r3, #12
 8005246:	6033      	str	r3, [r6, #0]
 8005248:	4630      	mov	r0, r6
 800524a:	f000 fba4 	bl	8005996 <__malloc_unlock>
 800524e:	e7e4      	b.n	800521a <_malloc_r+0x1e>
 8005250:	680b      	ldr	r3, [r1, #0]
 8005252:	1b5b      	subs	r3, r3, r5
 8005254:	d418      	bmi.n	8005288 <_malloc_r+0x8c>
 8005256:	2b0b      	cmp	r3, #11
 8005258:	d90f      	bls.n	800527a <_malloc_r+0x7e>
 800525a:	600b      	str	r3, [r1, #0]
 800525c:	50cd      	str	r5, [r1, r3]
 800525e:	18cc      	adds	r4, r1, r3
 8005260:	4630      	mov	r0, r6
 8005262:	f000 fb98 	bl	8005996 <__malloc_unlock>
 8005266:	f104 000b 	add.w	r0, r4, #11
 800526a:	1d23      	adds	r3, r4, #4
 800526c:	f020 0007 	bic.w	r0, r0, #7
 8005270:	1ac3      	subs	r3, r0, r3
 8005272:	d0d3      	beq.n	800521c <_malloc_r+0x20>
 8005274:	425a      	negs	r2, r3
 8005276:	50e2      	str	r2, [r4, r3]
 8005278:	e7d0      	b.n	800521c <_malloc_r+0x20>
 800527a:	428c      	cmp	r4, r1
 800527c:	684b      	ldr	r3, [r1, #4]
 800527e:	bf16      	itet	ne
 8005280:	6063      	strne	r3, [r4, #4]
 8005282:	6013      	streq	r3, [r2, #0]
 8005284:	460c      	movne	r4, r1
 8005286:	e7eb      	b.n	8005260 <_malloc_r+0x64>
 8005288:	460c      	mov	r4, r1
 800528a:	6849      	ldr	r1, [r1, #4]
 800528c:	e7cc      	b.n	8005228 <_malloc_r+0x2c>
 800528e:	1cc4      	adds	r4, r0, #3
 8005290:	f024 0403 	bic.w	r4, r4, #3
 8005294:	42a0      	cmp	r0, r4
 8005296:	d005      	beq.n	80052a4 <_malloc_r+0xa8>
 8005298:	1a21      	subs	r1, r4, r0
 800529a:	4630      	mov	r0, r6
 800529c:	f000 fad0 	bl	8005840 <_sbrk_r>
 80052a0:	3001      	adds	r0, #1
 80052a2:	d0cf      	beq.n	8005244 <_malloc_r+0x48>
 80052a4:	6025      	str	r5, [r4, #0]
 80052a6:	e7db      	b.n	8005260 <_malloc_r+0x64>
 80052a8:	20000090 	.word	0x20000090
 80052ac:	20000094 	.word	0x20000094

080052b0 <__sfputc_r>:
 80052b0:	6893      	ldr	r3, [r2, #8]
 80052b2:	3b01      	subs	r3, #1
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	b410      	push	{r4}
 80052b8:	6093      	str	r3, [r2, #8]
 80052ba:	da08      	bge.n	80052ce <__sfputc_r+0x1e>
 80052bc:	6994      	ldr	r4, [r2, #24]
 80052be:	42a3      	cmp	r3, r4
 80052c0:	db01      	blt.n	80052c6 <__sfputc_r+0x16>
 80052c2:	290a      	cmp	r1, #10
 80052c4:	d103      	bne.n	80052ce <__sfputc_r+0x1e>
 80052c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052ca:	f7ff bcab 	b.w	8004c24 <__swbuf_r>
 80052ce:	6813      	ldr	r3, [r2, #0]
 80052d0:	1c58      	adds	r0, r3, #1
 80052d2:	6010      	str	r0, [r2, #0]
 80052d4:	7019      	strb	r1, [r3, #0]
 80052d6:	4608      	mov	r0, r1
 80052d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052dc:	4770      	bx	lr

080052de <__sfputs_r>:
 80052de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052e0:	4606      	mov	r6, r0
 80052e2:	460f      	mov	r7, r1
 80052e4:	4614      	mov	r4, r2
 80052e6:	18d5      	adds	r5, r2, r3
 80052e8:	42ac      	cmp	r4, r5
 80052ea:	d101      	bne.n	80052f0 <__sfputs_r+0x12>
 80052ec:	2000      	movs	r0, #0
 80052ee:	e007      	b.n	8005300 <__sfputs_r+0x22>
 80052f0:	463a      	mov	r2, r7
 80052f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052f6:	4630      	mov	r0, r6
 80052f8:	f7ff ffda 	bl	80052b0 <__sfputc_r>
 80052fc:	1c43      	adds	r3, r0, #1
 80052fe:	d1f3      	bne.n	80052e8 <__sfputs_r+0xa>
 8005300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005304 <_vfiprintf_r>:
 8005304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005308:	460c      	mov	r4, r1
 800530a:	b09d      	sub	sp, #116	; 0x74
 800530c:	4617      	mov	r7, r2
 800530e:	461d      	mov	r5, r3
 8005310:	4606      	mov	r6, r0
 8005312:	b118      	cbz	r0, 800531c <_vfiprintf_r+0x18>
 8005314:	6983      	ldr	r3, [r0, #24]
 8005316:	b90b      	cbnz	r3, 800531c <_vfiprintf_r+0x18>
 8005318:	f7ff fe34 	bl	8004f84 <__sinit>
 800531c:	4b7c      	ldr	r3, [pc, #496]	; (8005510 <_vfiprintf_r+0x20c>)
 800531e:	429c      	cmp	r4, r3
 8005320:	d158      	bne.n	80053d4 <_vfiprintf_r+0xd0>
 8005322:	6874      	ldr	r4, [r6, #4]
 8005324:	89a3      	ldrh	r3, [r4, #12]
 8005326:	0718      	lsls	r0, r3, #28
 8005328:	d55e      	bpl.n	80053e8 <_vfiprintf_r+0xe4>
 800532a:	6923      	ldr	r3, [r4, #16]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d05b      	beq.n	80053e8 <_vfiprintf_r+0xe4>
 8005330:	2300      	movs	r3, #0
 8005332:	9309      	str	r3, [sp, #36]	; 0x24
 8005334:	2320      	movs	r3, #32
 8005336:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800533a:	2330      	movs	r3, #48	; 0x30
 800533c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005340:	9503      	str	r5, [sp, #12]
 8005342:	f04f 0b01 	mov.w	fp, #1
 8005346:	46b8      	mov	r8, r7
 8005348:	4645      	mov	r5, r8
 800534a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800534e:	b10b      	cbz	r3, 8005354 <_vfiprintf_r+0x50>
 8005350:	2b25      	cmp	r3, #37	; 0x25
 8005352:	d154      	bne.n	80053fe <_vfiprintf_r+0xfa>
 8005354:	ebb8 0a07 	subs.w	sl, r8, r7
 8005358:	d00b      	beq.n	8005372 <_vfiprintf_r+0x6e>
 800535a:	4653      	mov	r3, sl
 800535c:	463a      	mov	r2, r7
 800535e:	4621      	mov	r1, r4
 8005360:	4630      	mov	r0, r6
 8005362:	f7ff ffbc 	bl	80052de <__sfputs_r>
 8005366:	3001      	adds	r0, #1
 8005368:	f000 80c2 	beq.w	80054f0 <_vfiprintf_r+0x1ec>
 800536c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800536e:	4453      	add	r3, sl
 8005370:	9309      	str	r3, [sp, #36]	; 0x24
 8005372:	f898 3000 	ldrb.w	r3, [r8]
 8005376:	2b00      	cmp	r3, #0
 8005378:	f000 80ba 	beq.w	80054f0 <_vfiprintf_r+0x1ec>
 800537c:	2300      	movs	r3, #0
 800537e:	f04f 32ff 	mov.w	r2, #4294967295
 8005382:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005386:	9304      	str	r3, [sp, #16]
 8005388:	9307      	str	r3, [sp, #28]
 800538a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800538e:	931a      	str	r3, [sp, #104]	; 0x68
 8005390:	46a8      	mov	r8, r5
 8005392:	2205      	movs	r2, #5
 8005394:	f818 1b01 	ldrb.w	r1, [r8], #1
 8005398:	485e      	ldr	r0, [pc, #376]	; (8005514 <_vfiprintf_r+0x210>)
 800539a:	f7fa ff19 	bl	80001d0 <memchr>
 800539e:	9b04      	ldr	r3, [sp, #16]
 80053a0:	bb78      	cbnz	r0, 8005402 <_vfiprintf_r+0xfe>
 80053a2:	06d9      	lsls	r1, r3, #27
 80053a4:	bf44      	itt	mi
 80053a6:	2220      	movmi	r2, #32
 80053a8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80053ac:	071a      	lsls	r2, r3, #28
 80053ae:	bf44      	itt	mi
 80053b0:	222b      	movmi	r2, #43	; 0x2b
 80053b2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80053b6:	782a      	ldrb	r2, [r5, #0]
 80053b8:	2a2a      	cmp	r2, #42	; 0x2a
 80053ba:	d02a      	beq.n	8005412 <_vfiprintf_r+0x10e>
 80053bc:	9a07      	ldr	r2, [sp, #28]
 80053be:	46a8      	mov	r8, r5
 80053c0:	2000      	movs	r0, #0
 80053c2:	250a      	movs	r5, #10
 80053c4:	4641      	mov	r1, r8
 80053c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053ca:	3b30      	subs	r3, #48	; 0x30
 80053cc:	2b09      	cmp	r3, #9
 80053ce:	d969      	bls.n	80054a4 <_vfiprintf_r+0x1a0>
 80053d0:	b360      	cbz	r0, 800542c <_vfiprintf_r+0x128>
 80053d2:	e024      	b.n	800541e <_vfiprintf_r+0x11a>
 80053d4:	4b50      	ldr	r3, [pc, #320]	; (8005518 <_vfiprintf_r+0x214>)
 80053d6:	429c      	cmp	r4, r3
 80053d8:	d101      	bne.n	80053de <_vfiprintf_r+0xda>
 80053da:	68b4      	ldr	r4, [r6, #8]
 80053dc:	e7a2      	b.n	8005324 <_vfiprintf_r+0x20>
 80053de:	4b4f      	ldr	r3, [pc, #316]	; (800551c <_vfiprintf_r+0x218>)
 80053e0:	429c      	cmp	r4, r3
 80053e2:	bf08      	it	eq
 80053e4:	68f4      	ldreq	r4, [r6, #12]
 80053e6:	e79d      	b.n	8005324 <_vfiprintf_r+0x20>
 80053e8:	4621      	mov	r1, r4
 80053ea:	4630      	mov	r0, r6
 80053ec:	f7ff fc6c 	bl	8004cc8 <__swsetup_r>
 80053f0:	2800      	cmp	r0, #0
 80053f2:	d09d      	beq.n	8005330 <_vfiprintf_r+0x2c>
 80053f4:	f04f 30ff 	mov.w	r0, #4294967295
 80053f8:	b01d      	add	sp, #116	; 0x74
 80053fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053fe:	46a8      	mov	r8, r5
 8005400:	e7a2      	b.n	8005348 <_vfiprintf_r+0x44>
 8005402:	4a44      	ldr	r2, [pc, #272]	; (8005514 <_vfiprintf_r+0x210>)
 8005404:	1a80      	subs	r0, r0, r2
 8005406:	fa0b f000 	lsl.w	r0, fp, r0
 800540a:	4318      	orrs	r0, r3
 800540c:	9004      	str	r0, [sp, #16]
 800540e:	4645      	mov	r5, r8
 8005410:	e7be      	b.n	8005390 <_vfiprintf_r+0x8c>
 8005412:	9a03      	ldr	r2, [sp, #12]
 8005414:	1d11      	adds	r1, r2, #4
 8005416:	6812      	ldr	r2, [r2, #0]
 8005418:	9103      	str	r1, [sp, #12]
 800541a:	2a00      	cmp	r2, #0
 800541c:	db01      	blt.n	8005422 <_vfiprintf_r+0x11e>
 800541e:	9207      	str	r2, [sp, #28]
 8005420:	e004      	b.n	800542c <_vfiprintf_r+0x128>
 8005422:	4252      	negs	r2, r2
 8005424:	f043 0302 	orr.w	r3, r3, #2
 8005428:	9207      	str	r2, [sp, #28]
 800542a:	9304      	str	r3, [sp, #16]
 800542c:	f898 3000 	ldrb.w	r3, [r8]
 8005430:	2b2e      	cmp	r3, #46	; 0x2e
 8005432:	d10e      	bne.n	8005452 <_vfiprintf_r+0x14e>
 8005434:	f898 3001 	ldrb.w	r3, [r8, #1]
 8005438:	2b2a      	cmp	r3, #42	; 0x2a
 800543a:	d138      	bne.n	80054ae <_vfiprintf_r+0x1aa>
 800543c:	9b03      	ldr	r3, [sp, #12]
 800543e:	1d1a      	adds	r2, r3, #4
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	9203      	str	r2, [sp, #12]
 8005444:	2b00      	cmp	r3, #0
 8005446:	bfb8      	it	lt
 8005448:	f04f 33ff 	movlt.w	r3, #4294967295
 800544c:	f108 0802 	add.w	r8, r8, #2
 8005450:	9305      	str	r3, [sp, #20]
 8005452:	4d33      	ldr	r5, [pc, #204]	; (8005520 <_vfiprintf_r+0x21c>)
 8005454:	f898 1000 	ldrb.w	r1, [r8]
 8005458:	2203      	movs	r2, #3
 800545a:	4628      	mov	r0, r5
 800545c:	f7fa feb8 	bl	80001d0 <memchr>
 8005460:	b140      	cbz	r0, 8005474 <_vfiprintf_r+0x170>
 8005462:	2340      	movs	r3, #64	; 0x40
 8005464:	1b40      	subs	r0, r0, r5
 8005466:	fa03 f000 	lsl.w	r0, r3, r0
 800546a:	9b04      	ldr	r3, [sp, #16]
 800546c:	4303      	orrs	r3, r0
 800546e:	f108 0801 	add.w	r8, r8, #1
 8005472:	9304      	str	r3, [sp, #16]
 8005474:	f898 1000 	ldrb.w	r1, [r8]
 8005478:	482a      	ldr	r0, [pc, #168]	; (8005524 <_vfiprintf_r+0x220>)
 800547a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800547e:	2206      	movs	r2, #6
 8005480:	f108 0701 	add.w	r7, r8, #1
 8005484:	f7fa fea4 	bl	80001d0 <memchr>
 8005488:	2800      	cmp	r0, #0
 800548a:	d037      	beq.n	80054fc <_vfiprintf_r+0x1f8>
 800548c:	4b26      	ldr	r3, [pc, #152]	; (8005528 <_vfiprintf_r+0x224>)
 800548e:	bb1b      	cbnz	r3, 80054d8 <_vfiprintf_r+0x1d4>
 8005490:	9b03      	ldr	r3, [sp, #12]
 8005492:	3307      	adds	r3, #7
 8005494:	f023 0307 	bic.w	r3, r3, #7
 8005498:	3308      	adds	r3, #8
 800549a:	9303      	str	r3, [sp, #12]
 800549c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800549e:	444b      	add	r3, r9
 80054a0:	9309      	str	r3, [sp, #36]	; 0x24
 80054a2:	e750      	b.n	8005346 <_vfiprintf_r+0x42>
 80054a4:	fb05 3202 	mla	r2, r5, r2, r3
 80054a8:	2001      	movs	r0, #1
 80054aa:	4688      	mov	r8, r1
 80054ac:	e78a      	b.n	80053c4 <_vfiprintf_r+0xc0>
 80054ae:	2300      	movs	r3, #0
 80054b0:	f108 0801 	add.w	r8, r8, #1
 80054b4:	9305      	str	r3, [sp, #20]
 80054b6:	4619      	mov	r1, r3
 80054b8:	250a      	movs	r5, #10
 80054ba:	4640      	mov	r0, r8
 80054bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054c0:	3a30      	subs	r2, #48	; 0x30
 80054c2:	2a09      	cmp	r2, #9
 80054c4:	d903      	bls.n	80054ce <_vfiprintf_r+0x1ca>
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d0c3      	beq.n	8005452 <_vfiprintf_r+0x14e>
 80054ca:	9105      	str	r1, [sp, #20]
 80054cc:	e7c1      	b.n	8005452 <_vfiprintf_r+0x14e>
 80054ce:	fb05 2101 	mla	r1, r5, r1, r2
 80054d2:	2301      	movs	r3, #1
 80054d4:	4680      	mov	r8, r0
 80054d6:	e7f0      	b.n	80054ba <_vfiprintf_r+0x1b6>
 80054d8:	ab03      	add	r3, sp, #12
 80054da:	9300      	str	r3, [sp, #0]
 80054dc:	4622      	mov	r2, r4
 80054de:	4b13      	ldr	r3, [pc, #76]	; (800552c <_vfiprintf_r+0x228>)
 80054e0:	a904      	add	r1, sp, #16
 80054e2:	4630      	mov	r0, r6
 80054e4:	f3af 8000 	nop.w
 80054e8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80054ec:	4681      	mov	r9, r0
 80054ee:	d1d5      	bne.n	800549c <_vfiprintf_r+0x198>
 80054f0:	89a3      	ldrh	r3, [r4, #12]
 80054f2:	065b      	lsls	r3, r3, #25
 80054f4:	f53f af7e 	bmi.w	80053f4 <_vfiprintf_r+0xf0>
 80054f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054fa:	e77d      	b.n	80053f8 <_vfiprintf_r+0xf4>
 80054fc:	ab03      	add	r3, sp, #12
 80054fe:	9300      	str	r3, [sp, #0]
 8005500:	4622      	mov	r2, r4
 8005502:	4b0a      	ldr	r3, [pc, #40]	; (800552c <_vfiprintf_r+0x228>)
 8005504:	a904      	add	r1, sp, #16
 8005506:	4630      	mov	r0, r6
 8005508:	f000 f888 	bl	800561c <_printf_i>
 800550c:	e7ec      	b.n	80054e8 <_vfiprintf_r+0x1e4>
 800550e:	bf00      	nop
 8005510:	08005b04 	.word	0x08005b04
 8005514:	08005b44 	.word	0x08005b44
 8005518:	08005b24 	.word	0x08005b24
 800551c:	08005ae4 	.word	0x08005ae4
 8005520:	08005b4a 	.word	0x08005b4a
 8005524:	08005b4e 	.word	0x08005b4e
 8005528:	00000000 	.word	0x00000000
 800552c:	080052df 	.word	0x080052df

08005530 <_printf_common>:
 8005530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005534:	4691      	mov	r9, r2
 8005536:	461f      	mov	r7, r3
 8005538:	688a      	ldr	r2, [r1, #8]
 800553a:	690b      	ldr	r3, [r1, #16]
 800553c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005540:	4293      	cmp	r3, r2
 8005542:	bfb8      	it	lt
 8005544:	4613      	movlt	r3, r2
 8005546:	f8c9 3000 	str.w	r3, [r9]
 800554a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800554e:	4606      	mov	r6, r0
 8005550:	460c      	mov	r4, r1
 8005552:	b112      	cbz	r2, 800555a <_printf_common+0x2a>
 8005554:	3301      	adds	r3, #1
 8005556:	f8c9 3000 	str.w	r3, [r9]
 800555a:	6823      	ldr	r3, [r4, #0]
 800555c:	0699      	lsls	r1, r3, #26
 800555e:	bf42      	ittt	mi
 8005560:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005564:	3302      	addmi	r3, #2
 8005566:	f8c9 3000 	strmi.w	r3, [r9]
 800556a:	6825      	ldr	r5, [r4, #0]
 800556c:	f015 0506 	ands.w	r5, r5, #6
 8005570:	d107      	bne.n	8005582 <_printf_common+0x52>
 8005572:	f104 0a19 	add.w	sl, r4, #25
 8005576:	68e3      	ldr	r3, [r4, #12]
 8005578:	f8d9 2000 	ldr.w	r2, [r9]
 800557c:	1a9b      	subs	r3, r3, r2
 800557e:	42ab      	cmp	r3, r5
 8005580:	dc28      	bgt.n	80055d4 <_printf_common+0xa4>
 8005582:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005586:	6822      	ldr	r2, [r4, #0]
 8005588:	3300      	adds	r3, #0
 800558a:	bf18      	it	ne
 800558c:	2301      	movne	r3, #1
 800558e:	0692      	lsls	r2, r2, #26
 8005590:	d42d      	bmi.n	80055ee <_printf_common+0xbe>
 8005592:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005596:	4639      	mov	r1, r7
 8005598:	4630      	mov	r0, r6
 800559a:	47c0      	blx	r8
 800559c:	3001      	adds	r0, #1
 800559e:	d020      	beq.n	80055e2 <_printf_common+0xb2>
 80055a0:	6823      	ldr	r3, [r4, #0]
 80055a2:	68e5      	ldr	r5, [r4, #12]
 80055a4:	f8d9 2000 	ldr.w	r2, [r9]
 80055a8:	f003 0306 	and.w	r3, r3, #6
 80055ac:	2b04      	cmp	r3, #4
 80055ae:	bf08      	it	eq
 80055b0:	1aad      	subeq	r5, r5, r2
 80055b2:	68a3      	ldr	r3, [r4, #8]
 80055b4:	6922      	ldr	r2, [r4, #16]
 80055b6:	bf0c      	ite	eq
 80055b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055bc:	2500      	movne	r5, #0
 80055be:	4293      	cmp	r3, r2
 80055c0:	bfc4      	itt	gt
 80055c2:	1a9b      	subgt	r3, r3, r2
 80055c4:	18ed      	addgt	r5, r5, r3
 80055c6:	f04f 0900 	mov.w	r9, #0
 80055ca:	341a      	adds	r4, #26
 80055cc:	454d      	cmp	r5, r9
 80055ce:	d11a      	bne.n	8005606 <_printf_common+0xd6>
 80055d0:	2000      	movs	r0, #0
 80055d2:	e008      	b.n	80055e6 <_printf_common+0xb6>
 80055d4:	2301      	movs	r3, #1
 80055d6:	4652      	mov	r2, sl
 80055d8:	4639      	mov	r1, r7
 80055da:	4630      	mov	r0, r6
 80055dc:	47c0      	blx	r8
 80055de:	3001      	adds	r0, #1
 80055e0:	d103      	bne.n	80055ea <_printf_common+0xba>
 80055e2:	f04f 30ff 	mov.w	r0, #4294967295
 80055e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055ea:	3501      	adds	r5, #1
 80055ec:	e7c3      	b.n	8005576 <_printf_common+0x46>
 80055ee:	18e1      	adds	r1, r4, r3
 80055f0:	1c5a      	adds	r2, r3, #1
 80055f2:	2030      	movs	r0, #48	; 0x30
 80055f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80055f8:	4422      	add	r2, r4
 80055fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80055fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005602:	3302      	adds	r3, #2
 8005604:	e7c5      	b.n	8005592 <_printf_common+0x62>
 8005606:	2301      	movs	r3, #1
 8005608:	4622      	mov	r2, r4
 800560a:	4639      	mov	r1, r7
 800560c:	4630      	mov	r0, r6
 800560e:	47c0      	blx	r8
 8005610:	3001      	adds	r0, #1
 8005612:	d0e6      	beq.n	80055e2 <_printf_common+0xb2>
 8005614:	f109 0901 	add.w	r9, r9, #1
 8005618:	e7d8      	b.n	80055cc <_printf_common+0x9c>
	...

0800561c <_printf_i>:
 800561c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005620:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005624:	460c      	mov	r4, r1
 8005626:	7e09      	ldrb	r1, [r1, #24]
 8005628:	b085      	sub	sp, #20
 800562a:	296e      	cmp	r1, #110	; 0x6e
 800562c:	4617      	mov	r7, r2
 800562e:	4606      	mov	r6, r0
 8005630:	4698      	mov	r8, r3
 8005632:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005634:	f000 80b3 	beq.w	800579e <_printf_i+0x182>
 8005638:	d822      	bhi.n	8005680 <_printf_i+0x64>
 800563a:	2963      	cmp	r1, #99	; 0x63
 800563c:	d036      	beq.n	80056ac <_printf_i+0x90>
 800563e:	d80a      	bhi.n	8005656 <_printf_i+0x3a>
 8005640:	2900      	cmp	r1, #0
 8005642:	f000 80b9 	beq.w	80057b8 <_printf_i+0x19c>
 8005646:	2958      	cmp	r1, #88	; 0x58
 8005648:	f000 8083 	beq.w	8005752 <_printf_i+0x136>
 800564c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005650:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005654:	e032      	b.n	80056bc <_printf_i+0xa0>
 8005656:	2964      	cmp	r1, #100	; 0x64
 8005658:	d001      	beq.n	800565e <_printf_i+0x42>
 800565a:	2969      	cmp	r1, #105	; 0x69
 800565c:	d1f6      	bne.n	800564c <_printf_i+0x30>
 800565e:	6820      	ldr	r0, [r4, #0]
 8005660:	6813      	ldr	r3, [r2, #0]
 8005662:	0605      	lsls	r5, r0, #24
 8005664:	f103 0104 	add.w	r1, r3, #4
 8005668:	d52a      	bpl.n	80056c0 <_printf_i+0xa4>
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6011      	str	r1, [r2, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	da03      	bge.n	800567a <_printf_i+0x5e>
 8005672:	222d      	movs	r2, #45	; 0x2d
 8005674:	425b      	negs	r3, r3
 8005676:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800567a:	486f      	ldr	r0, [pc, #444]	; (8005838 <_printf_i+0x21c>)
 800567c:	220a      	movs	r2, #10
 800567e:	e039      	b.n	80056f4 <_printf_i+0xd8>
 8005680:	2973      	cmp	r1, #115	; 0x73
 8005682:	f000 809d 	beq.w	80057c0 <_printf_i+0x1a4>
 8005686:	d808      	bhi.n	800569a <_printf_i+0x7e>
 8005688:	296f      	cmp	r1, #111	; 0x6f
 800568a:	d020      	beq.n	80056ce <_printf_i+0xb2>
 800568c:	2970      	cmp	r1, #112	; 0x70
 800568e:	d1dd      	bne.n	800564c <_printf_i+0x30>
 8005690:	6823      	ldr	r3, [r4, #0]
 8005692:	f043 0320 	orr.w	r3, r3, #32
 8005696:	6023      	str	r3, [r4, #0]
 8005698:	e003      	b.n	80056a2 <_printf_i+0x86>
 800569a:	2975      	cmp	r1, #117	; 0x75
 800569c:	d017      	beq.n	80056ce <_printf_i+0xb2>
 800569e:	2978      	cmp	r1, #120	; 0x78
 80056a0:	d1d4      	bne.n	800564c <_printf_i+0x30>
 80056a2:	2378      	movs	r3, #120	; 0x78
 80056a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80056a8:	4864      	ldr	r0, [pc, #400]	; (800583c <_printf_i+0x220>)
 80056aa:	e055      	b.n	8005758 <_printf_i+0x13c>
 80056ac:	6813      	ldr	r3, [r2, #0]
 80056ae:	1d19      	adds	r1, r3, #4
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	6011      	str	r1, [r2, #0]
 80056b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056bc:	2301      	movs	r3, #1
 80056be:	e08c      	b.n	80057da <_printf_i+0x1be>
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	6011      	str	r1, [r2, #0]
 80056c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80056c8:	bf18      	it	ne
 80056ca:	b21b      	sxthne	r3, r3
 80056cc:	e7cf      	b.n	800566e <_printf_i+0x52>
 80056ce:	6813      	ldr	r3, [r2, #0]
 80056d0:	6825      	ldr	r5, [r4, #0]
 80056d2:	1d18      	adds	r0, r3, #4
 80056d4:	6010      	str	r0, [r2, #0]
 80056d6:	0628      	lsls	r0, r5, #24
 80056d8:	d501      	bpl.n	80056de <_printf_i+0xc2>
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	e002      	b.n	80056e4 <_printf_i+0xc8>
 80056de:	0668      	lsls	r0, r5, #25
 80056e0:	d5fb      	bpl.n	80056da <_printf_i+0xbe>
 80056e2:	881b      	ldrh	r3, [r3, #0]
 80056e4:	4854      	ldr	r0, [pc, #336]	; (8005838 <_printf_i+0x21c>)
 80056e6:	296f      	cmp	r1, #111	; 0x6f
 80056e8:	bf14      	ite	ne
 80056ea:	220a      	movne	r2, #10
 80056ec:	2208      	moveq	r2, #8
 80056ee:	2100      	movs	r1, #0
 80056f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80056f4:	6865      	ldr	r5, [r4, #4]
 80056f6:	60a5      	str	r5, [r4, #8]
 80056f8:	2d00      	cmp	r5, #0
 80056fa:	f2c0 8095 	blt.w	8005828 <_printf_i+0x20c>
 80056fe:	6821      	ldr	r1, [r4, #0]
 8005700:	f021 0104 	bic.w	r1, r1, #4
 8005704:	6021      	str	r1, [r4, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d13d      	bne.n	8005786 <_printf_i+0x16a>
 800570a:	2d00      	cmp	r5, #0
 800570c:	f040 808e 	bne.w	800582c <_printf_i+0x210>
 8005710:	4665      	mov	r5, ip
 8005712:	2a08      	cmp	r2, #8
 8005714:	d10b      	bne.n	800572e <_printf_i+0x112>
 8005716:	6823      	ldr	r3, [r4, #0]
 8005718:	07db      	lsls	r3, r3, #31
 800571a:	d508      	bpl.n	800572e <_printf_i+0x112>
 800571c:	6923      	ldr	r3, [r4, #16]
 800571e:	6862      	ldr	r2, [r4, #4]
 8005720:	429a      	cmp	r2, r3
 8005722:	bfde      	ittt	le
 8005724:	2330      	movle	r3, #48	; 0x30
 8005726:	f805 3c01 	strble.w	r3, [r5, #-1]
 800572a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800572e:	ebac 0305 	sub.w	r3, ip, r5
 8005732:	6123      	str	r3, [r4, #16]
 8005734:	f8cd 8000 	str.w	r8, [sp]
 8005738:	463b      	mov	r3, r7
 800573a:	aa03      	add	r2, sp, #12
 800573c:	4621      	mov	r1, r4
 800573e:	4630      	mov	r0, r6
 8005740:	f7ff fef6 	bl	8005530 <_printf_common>
 8005744:	3001      	adds	r0, #1
 8005746:	d14d      	bne.n	80057e4 <_printf_i+0x1c8>
 8005748:	f04f 30ff 	mov.w	r0, #4294967295
 800574c:	b005      	add	sp, #20
 800574e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005752:	4839      	ldr	r0, [pc, #228]	; (8005838 <_printf_i+0x21c>)
 8005754:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005758:	6813      	ldr	r3, [r2, #0]
 800575a:	6821      	ldr	r1, [r4, #0]
 800575c:	1d1d      	adds	r5, r3, #4
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	6015      	str	r5, [r2, #0]
 8005762:	060a      	lsls	r2, r1, #24
 8005764:	d50b      	bpl.n	800577e <_printf_i+0x162>
 8005766:	07ca      	lsls	r2, r1, #31
 8005768:	bf44      	itt	mi
 800576a:	f041 0120 	orrmi.w	r1, r1, #32
 800576e:	6021      	strmi	r1, [r4, #0]
 8005770:	b91b      	cbnz	r3, 800577a <_printf_i+0x15e>
 8005772:	6822      	ldr	r2, [r4, #0]
 8005774:	f022 0220 	bic.w	r2, r2, #32
 8005778:	6022      	str	r2, [r4, #0]
 800577a:	2210      	movs	r2, #16
 800577c:	e7b7      	b.n	80056ee <_printf_i+0xd2>
 800577e:	064d      	lsls	r5, r1, #25
 8005780:	bf48      	it	mi
 8005782:	b29b      	uxthmi	r3, r3
 8005784:	e7ef      	b.n	8005766 <_printf_i+0x14a>
 8005786:	4665      	mov	r5, ip
 8005788:	fbb3 f1f2 	udiv	r1, r3, r2
 800578c:	fb02 3311 	mls	r3, r2, r1, r3
 8005790:	5cc3      	ldrb	r3, [r0, r3]
 8005792:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005796:	460b      	mov	r3, r1
 8005798:	2900      	cmp	r1, #0
 800579a:	d1f5      	bne.n	8005788 <_printf_i+0x16c>
 800579c:	e7b9      	b.n	8005712 <_printf_i+0xf6>
 800579e:	6813      	ldr	r3, [r2, #0]
 80057a0:	6825      	ldr	r5, [r4, #0]
 80057a2:	6961      	ldr	r1, [r4, #20]
 80057a4:	1d18      	adds	r0, r3, #4
 80057a6:	6010      	str	r0, [r2, #0]
 80057a8:	0628      	lsls	r0, r5, #24
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	d501      	bpl.n	80057b2 <_printf_i+0x196>
 80057ae:	6019      	str	r1, [r3, #0]
 80057b0:	e002      	b.n	80057b8 <_printf_i+0x19c>
 80057b2:	066a      	lsls	r2, r5, #25
 80057b4:	d5fb      	bpl.n	80057ae <_printf_i+0x192>
 80057b6:	8019      	strh	r1, [r3, #0]
 80057b8:	2300      	movs	r3, #0
 80057ba:	6123      	str	r3, [r4, #16]
 80057bc:	4665      	mov	r5, ip
 80057be:	e7b9      	b.n	8005734 <_printf_i+0x118>
 80057c0:	6813      	ldr	r3, [r2, #0]
 80057c2:	1d19      	adds	r1, r3, #4
 80057c4:	6011      	str	r1, [r2, #0]
 80057c6:	681d      	ldr	r5, [r3, #0]
 80057c8:	6862      	ldr	r2, [r4, #4]
 80057ca:	2100      	movs	r1, #0
 80057cc:	4628      	mov	r0, r5
 80057ce:	f7fa fcff 	bl	80001d0 <memchr>
 80057d2:	b108      	cbz	r0, 80057d8 <_printf_i+0x1bc>
 80057d4:	1b40      	subs	r0, r0, r5
 80057d6:	6060      	str	r0, [r4, #4]
 80057d8:	6863      	ldr	r3, [r4, #4]
 80057da:	6123      	str	r3, [r4, #16]
 80057dc:	2300      	movs	r3, #0
 80057de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057e2:	e7a7      	b.n	8005734 <_printf_i+0x118>
 80057e4:	6923      	ldr	r3, [r4, #16]
 80057e6:	462a      	mov	r2, r5
 80057e8:	4639      	mov	r1, r7
 80057ea:	4630      	mov	r0, r6
 80057ec:	47c0      	blx	r8
 80057ee:	3001      	adds	r0, #1
 80057f0:	d0aa      	beq.n	8005748 <_printf_i+0x12c>
 80057f2:	6823      	ldr	r3, [r4, #0]
 80057f4:	079b      	lsls	r3, r3, #30
 80057f6:	d413      	bmi.n	8005820 <_printf_i+0x204>
 80057f8:	68e0      	ldr	r0, [r4, #12]
 80057fa:	9b03      	ldr	r3, [sp, #12]
 80057fc:	4298      	cmp	r0, r3
 80057fe:	bfb8      	it	lt
 8005800:	4618      	movlt	r0, r3
 8005802:	e7a3      	b.n	800574c <_printf_i+0x130>
 8005804:	2301      	movs	r3, #1
 8005806:	464a      	mov	r2, r9
 8005808:	4639      	mov	r1, r7
 800580a:	4630      	mov	r0, r6
 800580c:	47c0      	blx	r8
 800580e:	3001      	adds	r0, #1
 8005810:	d09a      	beq.n	8005748 <_printf_i+0x12c>
 8005812:	3501      	adds	r5, #1
 8005814:	68e3      	ldr	r3, [r4, #12]
 8005816:	9a03      	ldr	r2, [sp, #12]
 8005818:	1a9b      	subs	r3, r3, r2
 800581a:	42ab      	cmp	r3, r5
 800581c:	dcf2      	bgt.n	8005804 <_printf_i+0x1e8>
 800581e:	e7eb      	b.n	80057f8 <_printf_i+0x1dc>
 8005820:	2500      	movs	r5, #0
 8005822:	f104 0919 	add.w	r9, r4, #25
 8005826:	e7f5      	b.n	8005814 <_printf_i+0x1f8>
 8005828:	2b00      	cmp	r3, #0
 800582a:	d1ac      	bne.n	8005786 <_printf_i+0x16a>
 800582c:	7803      	ldrb	r3, [r0, #0]
 800582e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005832:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005836:	e76c      	b.n	8005712 <_printf_i+0xf6>
 8005838:	08005b55 	.word	0x08005b55
 800583c:	08005b66 	.word	0x08005b66

08005840 <_sbrk_r>:
 8005840:	b538      	push	{r3, r4, r5, lr}
 8005842:	4c06      	ldr	r4, [pc, #24]	; (800585c <_sbrk_r+0x1c>)
 8005844:	2300      	movs	r3, #0
 8005846:	4605      	mov	r5, r0
 8005848:	4608      	mov	r0, r1
 800584a:	6023      	str	r3, [r4, #0]
 800584c:	f7ff f83e 	bl	80048cc <_sbrk>
 8005850:	1c43      	adds	r3, r0, #1
 8005852:	d102      	bne.n	800585a <_sbrk_r+0x1a>
 8005854:	6823      	ldr	r3, [r4, #0]
 8005856:	b103      	cbz	r3, 800585a <_sbrk_r+0x1a>
 8005858:	602b      	str	r3, [r5, #0]
 800585a:	bd38      	pop	{r3, r4, r5, pc}
 800585c:	20000130 	.word	0x20000130

08005860 <__sread>:
 8005860:	b510      	push	{r4, lr}
 8005862:	460c      	mov	r4, r1
 8005864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005868:	f000 f896 	bl	8005998 <_read_r>
 800586c:	2800      	cmp	r0, #0
 800586e:	bfab      	itete	ge
 8005870:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005872:	89a3      	ldrhlt	r3, [r4, #12]
 8005874:	181b      	addge	r3, r3, r0
 8005876:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800587a:	bfac      	ite	ge
 800587c:	6563      	strge	r3, [r4, #84]	; 0x54
 800587e:	81a3      	strhlt	r3, [r4, #12]
 8005880:	bd10      	pop	{r4, pc}

08005882 <__swrite>:
 8005882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005886:	461f      	mov	r7, r3
 8005888:	898b      	ldrh	r3, [r1, #12]
 800588a:	05db      	lsls	r3, r3, #23
 800588c:	4605      	mov	r5, r0
 800588e:	460c      	mov	r4, r1
 8005890:	4616      	mov	r6, r2
 8005892:	d505      	bpl.n	80058a0 <__swrite+0x1e>
 8005894:	2302      	movs	r3, #2
 8005896:	2200      	movs	r2, #0
 8005898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800589c:	f000 f868 	bl	8005970 <_lseek_r>
 80058a0:	89a3      	ldrh	r3, [r4, #12]
 80058a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058aa:	81a3      	strh	r3, [r4, #12]
 80058ac:	4632      	mov	r2, r6
 80058ae:	463b      	mov	r3, r7
 80058b0:	4628      	mov	r0, r5
 80058b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058b6:	f000 b817 	b.w	80058e8 <_write_r>

080058ba <__sseek>:
 80058ba:	b510      	push	{r4, lr}
 80058bc:	460c      	mov	r4, r1
 80058be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058c2:	f000 f855 	bl	8005970 <_lseek_r>
 80058c6:	1c43      	adds	r3, r0, #1
 80058c8:	89a3      	ldrh	r3, [r4, #12]
 80058ca:	bf15      	itete	ne
 80058cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80058ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80058d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80058d6:	81a3      	strheq	r3, [r4, #12]
 80058d8:	bf18      	it	ne
 80058da:	81a3      	strhne	r3, [r4, #12]
 80058dc:	bd10      	pop	{r4, pc}

080058de <__sclose>:
 80058de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058e2:	f000 b813 	b.w	800590c <_close_r>
	...

080058e8 <_write_r>:
 80058e8:	b538      	push	{r3, r4, r5, lr}
 80058ea:	4c07      	ldr	r4, [pc, #28]	; (8005908 <_write_r+0x20>)
 80058ec:	4605      	mov	r5, r0
 80058ee:	4608      	mov	r0, r1
 80058f0:	4611      	mov	r1, r2
 80058f2:	2200      	movs	r2, #0
 80058f4:	6022      	str	r2, [r4, #0]
 80058f6:	461a      	mov	r2, r3
 80058f8:	f7fe ff98 	bl	800482c <_write>
 80058fc:	1c43      	adds	r3, r0, #1
 80058fe:	d102      	bne.n	8005906 <_write_r+0x1e>
 8005900:	6823      	ldr	r3, [r4, #0]
 8005902:	b103      	cbz	r3, 8005906 <_write_r+0x1e>
 8005904:	602b      	str	r3, [r5, #0]
 8005906:	bd38      	pop	{r3, r4, r5, pc}
 8005908:	20000130 	.word	0x20000130

0800590c <_close_r>:
 800590c:	b538      	push	{r3, r4, r5, lr}
 800590e:	4c06      	ldr	r4, [pc, #24]	; (8005928 <_close_r+0x1c>)
 8005910:	2300      	movs	r3, #0
 8005912:	4605      	mov	r5, r0
 8005914:	4608      	mov	r0, r1
 8005916:	6023      	str	r3, [r4, #0]
 8005918:	f7fe ffa4 	bl	8004864 <_close>
 800591c:	1c43      	adds	r3, r0, #1
 800591e:	d102      	bne.n	8005926 <_close_r+0x1a>
 8005920:	6823      	ldr	r3, [r4, #0]
 8005922:	b103      	cbz	r3, 8005926 <_close_r+0x1a>
 8005924:	602b      	str	r3, [r5, #0]
 8005926:	bd38      	pop	{r3, r4, r5, pc}
 8005928:	20000130 	.word	0x20000130

0800592c <_fstat_r>:
 800592c:	b538      	push	{r3, r4, r5, lr}
 800592e:	4c07      	ldr	r4, [pc, #28]	; (800594c <_fstat_r+0x20>)
 8005930:	2300      	movs	r3, #0
 8005932:	4605      	mov	r5, r0
 8005934:	4608      	mov	r0, r1
 8005936:	4611      	mov	r1, r2
 8005938:	6023      	str	r3, [r4, #0]
 800593a:	f7fe ff9f 	bl	800487c <_fstat>
 800593e:	1c43      	adds	r3, r0, #1
 8005940:	d102      	bne.n	8005948 <_fstat_r+0x1c>
 8005942:	6823      	ldr	r3, [r4, #0]
 8005944:	b103      	cbz	r3, 8005948 <_fstat_r+0x1c>
 8005946:	602b      	str	r3, [r5, #0]
 8005948:	bd38      	pop	{r3, r4, r5, pc}
 800594a:	bf00      	nop
 800594c:	20000130 	.word	0x20000130

08005950 <_isatty_r>:
 8005950:	b538      	push	{r3, r4, r5, lr}
 8005952:	4c06      	ldr	r4, [pc, #24]	; (800596c <_isatty_r+0x1c>)
 8005954:	2300      	movs	r3, #0
 8005956:	4605      	mov	r5, r0
 8005958:	4608      	mov	r0, r1
 800595a:	6023      	str	r3, [r4, #0]
 800595c:	f7fe ff9e 	bl	800489c <_isatty>
 8005960:	1c43      	adds	r3, r0, #1
 8005962:	d102      	bne.n	800596a <_isatty_r+0x1a>
 8005964:	6823      	ldr	r3, [r4, #0]
 8005966:	b103      	cbz	r3, 800596a <_isatty_r+0x1a>
 8005968:	602b      	str	r3, [r5, #0]
 800596a:	bd38      	pop	{r3, r4, r5, pc}
 800596c:	20000130 	.word	0x20000130

08005970 <_lseek_r>:
 8005970:	b538      	push	{r3, r4, r5, lr}
 8005972:	4c07      	ldr	r4, [pc, #28]	; (8005990 <_lseek_r+0x20>)
 8005974:	4605      	mov	r5, r0
 8005976:	4608      	mov	r0, r1
 8005978:	4611      	mov	r1, r2
 800597a:	2200      	movs	r2, #0
 800597c:	6022      	str	r2, [r4, #0]
 800597e:	461a      	mov	r2, r3
 8005980:	f7fe ff97 	bl	80048b2 <_lseek>
 8005984:	1c43      	adds	r3, r0, #1
 8005986:	d102      	bne.n	800598e <_lseek_r+0x1e>
 8005988:	6823      	ldr	r3, [r4, #0]
 800598a:	b103      	cbz	r3, 800598e <_lseek_r+0x1e>
 800598c:	602b      	str	r3, [r5, #0]
 800598e:	bd38      	pop	{r3, r4, r5, pc}
 8005990:	20000130 	.word	0x20000130

08005994 <__malloc_lock>:
 8005994:	4770      	bx	lr

08005996 <__malloc_unlock>:
 8005996:	4770      	bx	lr

08005998 <_read_r>:
 8005998:	b538      	push	{r3, r4, r5, lr}
 800599a:	4c07      	ldr	r4, [pc, #28]	; (80059b8 <_read_r+0x20>)
 800599c:	4605      	mov	r5, r0
 800599e:	4608      	mov	r0, r1
 80059a0:	4611      	mov	r1, r2
 80059a2:	2200      	movs	r2, #0
 80059a4:	6022      	str	r2, [r4, #0]
 80059a6:	461a      	mov	r2, r3
 80059a8:	f7fe ff22 	bl	80047f0 <_read>
 80059ac:	1c43      	adds	r3, r0, #1
 80059ae:	d102      	bne.n	80059b6 <_read_r+0x1e>
 80059b0:	6823      	ldr	r3, [r4, #0]
 80059b2:	b103      	cbz	r3, 80059b6 <_read_r+0x1e>
 80059b4:	602b      	str	r3, [r5, #0]
 80059b6:	bd38      	pop	{r3, r4, r5, pc}
 80059b8:	20000130 	.word	0x20000130

080059bc <_init>:
 80059bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059be:	bf00      	nop
 80059c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059c2:	bc08      	pop	{r3}
 80059c4:	469e      	mov	lr, r3
 80059c6:	4770      	bx	lr

080059c8 <_fini>:
 80059c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ca:	bf00      	nop
 80059cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ce:	bc08      	pop	{r3}
 80059d0:	469e      	mov	lr, r3
 80059d2:	4770      	bx	lr
