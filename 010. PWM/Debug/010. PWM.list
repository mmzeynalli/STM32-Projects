
010. PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002154  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080022dc  080022dc  000122dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022ec  080022ec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080022ec  080022ec  000122ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080022f4  080022f4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022f4  080022f4  000122f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080022f8  080022f8  000122f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080022fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  2000000c  08002308  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  08002308  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008cf5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001573  00000000  00000000  00028d31  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000948  00000000  00000000  0002a2a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000880  00000000  00000000  0002abf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020952  00000000  00000000  0002b470  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000752e  00000000  00000000  0004bdc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c6c47  00000000  00000000  000532f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00119f37  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025d0  00000000  00000000  00119fb4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080022c4 	.word	0x080022c4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080022c4 	.word	0x080022c4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004cc:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <HAL_Init+0x40>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a0d      	ldr	r2, [pc, #52]	; (8000508 <HAL_Init+0x40>)
 80004d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <HAL_Init+0x40>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <HAL_Init+0x40>)
 80004de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <HAL_Init+0x40>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a07      	ldr	r2, [pc, #28]	; (8000508 <HAL_Init+0x40>)
 80004ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f0:	2003      	movs	r0, #3
 80004f2:	f000 f92b 	bl	800074c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004f6:	2000      	movs	r0, #0
 80004f8:	f000 f808 	bl	800050c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004fc:	f001 fd1a 	bl	8001f34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40023c00 	.word	0x40023c00

0800050c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <HAL_InitTick+0x54>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <HAL_InitTick+0x58>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	4619      	mov	r1, r3
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	fbb3 f3f1 	udiv	r3, r3, r1
 8000526:	fbb2 f3f3 	udiv	r3, r2, r3
 800052a:	4618      	mov	r0, r3
 800052c:	f000 f943 	bl	80007b6 <HAL_SYSTICK_Config>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000536:	2301      	movs	r3, #1
 8000538:	e00e      	b.n	8000558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2b0f      	cmp	r3, #15
 800053e:	d80a      	bhi.n	8000556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000540:	2200      	movs	r2, #0
 8000542:	6879      	ldr	r1, [r7, #4]
 8000544:	f04f 30ff 	mov.w	r0, #4294967295
 8000548:	f000 f90b 	bl	8000762 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800054c:	4a06      	ldr	r2, [pc, #24]	; (8000568 <HAL_InitTick+0x5c>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000552:	2300      	movs	r3, #0
 8000554:	e000      	b.n	8000558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000556:	2301      	movs	r3, #1
}
 8000558:	4618      	mov	r0, r3
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000008 	.word	0x20000008
 8000564:	20000004 	.word	0x20000004
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <HAL_IncTick+0x20>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	461a      	mov	r2, r3
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <HAL_IncTick+0x24>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4413      	add	r3, r2
 800057c:	4a04      	ldr	r2, [pc, #16]	; (8000590 <HAL_IncTick+0x24>)
 800057e:	6013      	str	r3, [r2, #0]
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000004 	.word	0x20000004
 8000590:	20000028 	.word	0x20000028

08000594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return uwTick;
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <HAL_GetTick+0x14>)
 800059a:	681b      	ldr	r3, [r3, #0]
}
 800059c:	4618      	mov	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000028 	.word	0x20000028

080005ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	f003 0307 	and.w	r3, r3, #7
 80005ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <__NVIC_SetPriorityGrouping+0x44>)
 80005be:	68db      	ldr	r3, [r3, #12]
 80005c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005c2:	68ba      	ldr	r2, [r7, #8]
 80005c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005c8:	4013      	ands	r3, r2
 80005ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005de:	4a04      	ldr	r2, [pc, #16]	; (80005f0 <__NVIC_SetPriorityGrouping+0x44>)
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	60d3      	str	r3, [r2, #12]
}
 80005e4:	bf00      	nop
 80005e6:	3714      	adds	r7, #20
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	e000ed00 	.word	0xe000ed00

080005f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005f8:	4b04      	ldr	r3, [pc, #16]	; (800060c <__NVIC_GetPriorityGrouping+0x18>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	0a1b      	lsrs	r3, r3, #8
 80005fe:	f003 0307 	and.w	r3, r3, #7
}
 8000602:	4618      	mov	r0, r3
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800061a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061e:	2b00      	cmp	r3, #0
 8000620:	db0b      	blt.n	800063a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	f003 021f 	and.w	r2, r3, #31
 8000628:	4907      	ldr	r1, [pc, #28]	; (8000648 <__NVIC_EnableIRQ+0x38>)
 800062a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062e:	095b      	lsrs	r3, r3, #5
 8000630:	2001      	movs	r0, #1
 8000632:	fa00 f202 	lsl.w	r2, r0, r2
 8000636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800063a:	bf00      	nop
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	e000e100 	.word	0xe000e100

0800064c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	6039      	str	r1, [r7, #0]
 8000656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065c:	2b00      	cmp	r3, #0
 800065e:	db0a      	blt.n	8000676 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	b2da      	uxtb	r2, r3
 8000664:	490c      	ldr	r1, [pc, #48]	; (8000698 <__NVIC_SetPriority+0x4c>)
 8000666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066a:	0112      	lsls	r2, r2, #4
 800066c:	b2d2      	uxtb	r2, r2
 800066e:	440b      	add	r3, r1
 8000670:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000674:	e00a      	b.n	800068c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	b2da      	uxtb	r2, r3
 800067a:	4908      	ldr	r1, [pc, #32]	; (800069c <__NVIC_SetPriority+0x50>)
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	f003 030f 	and.w	r3, r3, #15
 8000682:	3b04      	subs	r3, #4
 8000684:	0112      	lsls	r2, r2, #4
 8000686:	b2d2      	uxtb	r2, r2
 8000688:	440b      	add	r3, r1
 800068a:	761a      	strb	r2, [r3, #24]
}
 800068c:	bf00      	nop
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	e000e100 	.word	0xe000e100
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b089      	sub	sp, #36	; 0x24
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	f003 0307 	and.w	r3, r3, #7
 80006b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006b4:	69fb      	ldr	r3, [r7, #28]
 80006b6:	f1c3 0307 	rsb	r3, r3, #7
 80006ba:	2b04      	cmp	r3, #4
 80006bc:	bf28      	it	cs
 80006be:	2304      	movcs	r3, #4
 80006c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006c2:	69fb      	ldr	r3, [r7, #28]
 80006c4:	3304      	adds	r3, #4
 80006c6:	2b06      	cmp	r3, #6
 80006c8:	d902      	bls.n	80006d0 <NVIC_EncodePriority+0x30>
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	3b03      	subs	r3, #3
 80006ce:	e000      	b.n	80006d2 <NVIC_EncodePriority+0x32>
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d4:	f04f 32ff 	mov.w	r2, #4294967295
 80006d8:	69bb      	ldr	r3, [r7, #24]
 80006da:	fa02 f303 	lsl.w	r3, r2, r3
 80006de:	43da      	mvns	r2, r3
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	401a      	ands	r2, r3
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006e8:	f04f 31ff 	mov.w	r1, #4294967295
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	fa01 f303 	lsl.w	r3, r1, r3
 80006f2:	43d9      	mvns	r1, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f8:	4313      	orrs	r3, r2
         );
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3724      	adds	r7, #36	; 0x24
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
	...

08000708 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	3b01      	subs	r3, #1
 8000714:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000718:	d301      	bcc.n	800071e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800071a:	2301      	movs	r3, #1
 800071c:	e00f      	b.n	800073e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800071e:	4a0a      	ldr	r2, [pc, #40]	; (8000748 <SysTick_Config+0x40>)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	3b01      	subs	r3, #1
 8000724:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000726:	210f      	movs	r1, #15
 8000728:	f04f 30ff 	mov.w	r0, #4294967295
 800072c:	f7ff ff8e 	bl	800064c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000730:	4b05      	ldr	r3, [pc, #20]	; (8000748 <SysTick_Config+0x40>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000736:	4b04      	ldr	r3, [pc, #16]	; (8000748 <SysTick_Config+0x40>)
 8000738:	2207      	movs	r2, #7
 800073a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800073c:	2300      	movs	r3, #0
}
 800073e:	4618      	mov	r0, r3
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	e000e010 	.word	0xe000e010

0800074c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f7ff ff29 	bl	80005ac <__NVIC_SetPriorityGrouping>
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}

08000762 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000762:	b580      	push	{r7, lr}
 8000764:	b086      	sub	sp, #24
 8000766:	af00      	add	r7, sp, #0
 8000768:	4603      	mov	r3, r0
 800076a:	60b9      	str	r1, [r7, #8]
 800076c:	607a      	str	r2, [r7, #4]
 800076e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000774:	f7ff ff3e 	bl	80005f4 <__NVIC_GetPriorityGrouping>
 8000778:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	68b9      	ldr	r1, [r7, #8]
 800077e:	6978      	ldr	r0, [r7, #20]
 8000780:	f7ff ff8e 	bl	80006a0 <NVIC_EncodePriority>
 8000784:	4602      	mov	r2, r0
 8000786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800078a:	4611      	mov	r1, r2
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff ff5d 	bl	800064c <__NVIC_SetPriority>
}
 8000792:	bf00      	nop
 8000794:	3718      	adds	r7, #24
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800079a:	b580      	push	{r7, lr}
 800079c:	b082      	sub	sp, #8
 800079e:	af00      	add	r7, sp, #0
 80007a0:	4603      	mov	r3, r0
 80007a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff ff31 	bl	8000610 <__NVIC_EnableIRQ>
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b082      	sub	sp, #8
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f7ff ffa2 	bl	8000708 <SysTick_Config>
 80007c4:	4603      	mov	r3, r0
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b089      	sub	sp, #36	; 0x24
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80007de:	2300      	movs	r3, #0
 80007e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
 80007ea:	e16b      	b.n	8000ac4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80007ec:	2201      	movs	r2, #1
 80007ee:	69fb      	ldr	r3, [r7, #28]
 80007f0:	fa02 f303 	lsl.w	r3, r2, r3
 80007f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	697a      	ldr	r2, [r7, #20]
 80007fc:	4013      	ands	r3, r2
 80007fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000800:	693a      	ldr	r2, [r7, #16]
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	429a      	cmp	r2, r3
 8000806:	f040 815a 	bne.w	8000abe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	2b02      	cmp	r3, #2
 8000810:	d003      	beq.n	800081a <HAL_GPIO_Init+0x4a>
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	2b12      	cmp	r3, #18
 8000818:	d123      	bne.n	8000862 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	08da      	lsrs	r2, r3, #3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	3208      	adds	r2, #8
 8000822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000826:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000828:	69fb      	ldr	r3, [r7, #28]
 800082a:	f003 0307 	and.w	r3, r3, #7
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	220f      	movs	r2, #15
 8000832:	fa02 f303 	lsl.w	r3, r2, r3
 8000836:	43db      	mvns	r3, r3
 8000838:	69ba      	ldr	r2, [r7, #24]
 800083a:	4013      	ands	r3, r2
 800083c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	691a      	ldr	r2, [r3, #16]
 8000842:	69fb      	ldr	r3, [r7, #28]
 8000844:	f003 0307 	and.w	r3, r3, #7
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	fa02 f303 	lsl.w	r3, r2, r3
 800084e:	69ba      	ldr	r2, [r7, #24]
 8000850:	4313      	orrs	r3, r2
 8000852:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000854:	69fb      	ldr	r3, [r7, #28]
 8000856:	08da      	lsrs	r2, r3, #3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	3208      	adds	r2, #8
 800085c:	69b9      	ldr	r1, [r7, #24]
 800085e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000868:	69fb      	ldr	r3, [r7, #28]
 800086a:	005b      	lsls	r3, r3, #1
 800086c:	2203      	movs	r2, #3
 800086e:	fa02 f303 	lsl.w	r3, r2, r3
 8000872:	43db      	mvns	r3, r3
 8000874:	69ba      	ldr	r2, [r7, #24]
 8000876:	4013      	ands	r3, r2
 8000878:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	f003 0203 	and.w	r2, r3, #3
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	fa02 f303 	lsl.w	r3, r2, r3
 800088a:	69ba      	ldr	r2, [r7, #24]
 800088c:	4313      	orrs	r3, r2
 800088e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	69ba      	ldr	r2, [r7, #24]
 8000894:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	2b01      	cmp	r3, #1
 800089c:	d00b      	beq.n	80008b6 <HAL_GPIO_Init+0xe6>
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	2b02      	cmp	r3, #2
 80008a4:	d007      	beq.n	80008b6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008aa:	2b11      	cmp	r3, #17
 80008ac:	d003      	beq.n	80008b6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	2b12      	cmp	r3, #18
 80008b4:	d130      	bne.n	8000918 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	689b      	ldr	r3, [r3, #8]
 80008ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008bc:	69fb      	ldr	r3, [r7, #28]
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	2203      	movs	r2, #3
 80008c2:	fa02 f303 	lsl.w	r3, r2, r3
 80008c6:	43db      	mvns	r3, r3
 80008c8:	69ba      	ldr	r2, [r7, #24]
 80008ca:	4013      	ands	r3, r2
 80008cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	68da      	ldr	r2, [r3, #12]
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	005b      	lsls	r3, r3, #1
 80008d6:	fa02 f303 	lsl.w	r3, r2, r3
 80008da:	69ba      	ldr	r2, [r7, #24]
 80008dc:	4313      	orrs	r3, r2
 80008de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	69ba      	ldr	r2, [r7, #24]
 80008e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008ec:	2201      	movs	r2, #1
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	fa02 f303 	lsl.w	r3, r2, r3
 80008f4:	43db      	mvns	r3, r3
 80008f6:	69ba      	ldr	r2, [r7, #24]
 80008f8:	4013      	ands	r3, r2
 80008fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	091b      	lsrs	r3, r3, #4
 8000902:	f003 0201 	and.w	r2, r3, #1
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	fa02 f303 	lsl.w	r3, r2, r3
 800090c:	69ba      	ldr	r2, [r7, #24]
 800090e:	4313      	orrs	r3, r2
 8000910:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	69ba      	ldr	r2, [r7, #24]
 8000916:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	2203      	movs	r2, #3
 8000924:	fa02 f303 	lsl.w	r3, r2, r3
 8000928:	43db      	mvns	r3, r3
 800092a:	69ba      	ldr	r2, [r7, #24]
 800092c:	4013      	ands	r3, r2
 800092e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	689a      	ldr	r2, [r3, #8]
 8000934:	69fb      	ldr	r3, [r7, #28]
 8000936:	005b      	lsls	r3, r3, #1
 8000938:	fa02 f303 	lsl.w	r3, r2, r3
 800093c:	69ba      	ldr	r2, [r7, #24]
 800093e:	4313      	orrs	r3, r2
 8000940:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	69ba      	ldr	r2, [r7, #24]
 8000946:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000950:	2b00      	cmp	r3, #0
 8000952:	f000 80b4 	beq.w	8000abe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	4b5f      	ldr	r3, [pc, #380]	; (8000ad8 <HAL_GPIO_Init+0x308>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095e:	4a5e      	ldr	r2, [pc, #376]	; (8000ad8 <HAL_GPIO_Init+0x308>)
 8000960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000964:	6453      	str	r3, [r2, #68]	; 0x44
 8000966:	4b5c      	ldr	r3, [pc, #368]	; (8000ad8 <HAL_GPIO_Init+0x308>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000972:	4a5a      	ldr	r2, [pc, #360]	; (8000adc <HAL_GPIO_Init+0x30c>)
 8000974:	69fb      	ldr	r3, [r7, #28]
 8000976:	089b      	lsrs	r3, r3, #2
 8000978:	3302      	adds	r3, #2
 800097a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800097e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000980:	69fb      	ldr	r3, [r7, #28]
 8000982:	f003 0303 	and.w	r3, r3, #3
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	220f      	movs	r2, #15
 800098a:	fa02 f303 	lsl.w	r3, r2, r3
 800098e:	43db      	mvns	r3, r3
 8000990:	69ba      	ldr	r2, [r7, #24]
 8000992:	4013      	ands	r3, r2
 8000994:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4a51      	ldr	r2, [pc, #324]	; (8000ae0 <HAL_GPIO_Init+0x310>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d02b      	beq.n	80009f6 <HAL_GPIO_Init+0x226>
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4a50      	ldr	r2, [pc, #320]	; (8000ae4 <HAL_GPIO_Init+0x314>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d025      	beq.n	80009f2 <HAL_GPIO_Init+0x222>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4a4f      	ldr	r2, [pc, #316]	; (8000ae8 <HAL_GPIO_Init+0x318>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d01f      	beq.n	80009ee <HAL_GPIO_Init+0x21e>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4a4e      	ldr	r2, [pc, #312]	; (8000aec <HAL_GPIO_Init+0x31c>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d019      	beq.n	80009ea <HAL_GPIO_Init+0x21a>
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4a4d      	ldr	r2, [pc, #308]	; (8000af0 <HAL_GPIO_Init+0x320>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d013      	beq.n	80009e6 <HAL_GPIO_Init+0x216>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a4c      	ldr	r2, [pc, #304]	; (8000af4 <HAL_GPIO_Init+0x324>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d00d      	beq.n	80009e2 <HAL_GPIO_Init+0x212>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4a4b      	ldr	r2, [pc, #300]	; (8000af8 <HAL_GPIO_Init+0x328>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d007      	beq.n	80009de <HAL_GPIO_Init+0x20e>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4a4a      	ldr	r2, [pc, #296]	; (8000afc <HAL_GPIO_Init+0x32c>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d101      	bne.n	80009da <HAL_GPIO_Init+0x20a>
 80009d6:	2307      	movs	r3, #7
 80009d8:	e00e      	b.n	80009f8 <HAL_GPIO_Init+0x228>
 80009da:	2308      	movs	r3, #8
 80009dc:	e00c      	b.n	80009f8 <HAL_GPIO_Init+0x228>
 80009de:	2306      	movs	r3, #6
 80009e0:	e00a      	b.n	80009f8 <HAL_GPIO_Init+0x228>
 80009e2:	2305      	movs	r3, #5
 80009e4:	e008      	b.n	80009f8 <HAL_GPIO_Init+0x228>
 80009e6:	2304      	movs	r3, #4
 80009e8:	e006      	b.n	80009f8 <HAL_GPIO_Init+0x228>
 80009ea:	2303      	movs	r3, #3
 80009ec:	e004      	b.n	80009f8 <HAL_GPIO_Init+0x228>
 80009ee:	2302      	movs	r3, #2
 80009f0:	e002      	b.n	80009f8 <HAL_GPIO_Init+0x228>
 80009f2:	2301      	movs	r3, #1
 80009f4:	e000      	b.n	80009f8 <HAL_GPIO_Init+0x228>
 80009f6:	2300      	movs	r3, #0
 80009f8:	69fa      	ldr	r2, [r7, #28]
 80009fa:	f002 0203 	and.w	r2, r2, #3
 80009fe:	0092      	lsls	r2, r2, #2
 8000a00:	4093      	lsls	r3, r2
 8000a02:	69ba      	ldr	r2, [r7, #24]
 8000a04:	4313      	orrs	r3, r2
 8000a06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a08:	4934      	ldr	r1, [pc, #208]	; (8000adc <HAL_GPIO_Init+0x30c>)
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	089b      	lsrs	r3, r3, #2
 8000a0e:	3302      	adds	r3, #2
 8000a10:	69ba      	ldr	r2, [r7, #24]
 8000a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a16:	4b3a      	ldr	r3, [pc, #232]	; (8000b00 <HAL_GPIO_Init+0x330>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	43db      	mvns	r3, r3
 8000a20:	69ba      	ldr	r2, [r7, #24]
 8000a22:	4013      	ands	r3, r2
 8000a24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d003      	beq.n	8000a3a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000a32:	69ba      	ldr	r2, [r7, #24]
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	4313      	orrs	r3, r2
 8000a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a3a:	4a31      	ldr	r2, [pc, #196]	; (8000b00 <HAL_GPIO_Init+0x330>)
 8000a3c:	69bb      	ldr	r3, [r7, #24]
 8000a3e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a40:	4b2f      	ldr	r3, [pc, #188]	; (8000b00 <HAL_GPIO_Init+0x330>)
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a46:	693b      	ldr	r3, [r7, #16]
 8000a48:	43db      	mvns	r3, r3
 8000a4a:	69ba      	ldr	r2, [r7, #24]
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d003      	beq.n	8000a64 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000a5c:	69ba      	ldr	r2, [r7, #24]
 8000a5e:	693b      	ldr	r3, [r7, #16]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a64:	4a26      	ldr	r2, [pc, #152]	; (8000b00 <HAL_GPIO_Init+0x330>)
 8000a66:	69bb      	ldr	r3, [r7, #24]
 8000a68:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a6a:	4b25      	ldr	r3, [pc, #148]	; (8000b00 <HAL_GPIO_Init+0x330>)
 8000a6c:	689b      	ldr	r3, [r3, #8]
 8000a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	43db      	mvns	r3, r3
 8000a74:	69ba      	ldr	r2, [r7, #24]
 8000a76:	4013      	ands	r3, r2
 8000a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d003      	beq.n	8000a8e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000a86:	69ba      	ldr	r2, [r7, #24]
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a8e:	4a1c      	ldr	r2, [pc, #112]	; (8000b00 <HAL_GPIO_Init+0x330>)
 8000a90:	69bb      	ldr	r3, [r7, #24]
 8000a92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a94:	4b1a      	ldr	r3, [pc, #104]	; (8000b00 <HAL_GPIO_Init+0x330>)
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	43db      	mvns	r3, r3
 8000a9e:	69ba      	ldr	r2, [r7, #24]
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d003      	beq.n	8000ab8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000ab0:	69ba      	ldr	r2, [r7, #24]
 8000ab2:	693b      	ldr	r3, [r7, #16]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ab8:	4a11      	ldr	r2, [pc, #68]	; (8000b00 <HAL_GPIO_Init+0x330>)
 8000aba:	69bb      	ldr	r3, [r7, #24]
 8000abc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	61fb      	str	r3, [r7, #28]
 8000ac4:	69fb      	ldr	r3, [r7, #28]
 8000ac6:	2b0f      	cmp	r3, #15
 8000ac8:	f67f ae90 	bls.w	80007ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000acc:	bf00      	nop
 8000ace:	3724      	adds	r7, #36	; 0x24
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40013800 	.word	0x40013800
 8000ae0:	40020000 	.word	0x40020000
 8000ae4:	40020400 	.word	0x40020400
 8000ae8:	40020800 	.word	0x40020800
 8000aec:	40020c00 	.word	0x40020c00
 8000af0:	40021000 	.word	0x40021000
 8000af4:	40021400 	.word	0x40021400
 8000af8:	40021800 	.word	0x40021800
 8000afc:	40021c00 	.word	0x40021c00
 8000b00:	40013c00 	.word	0x40013c00

08000b04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d101      	bne.n	8000b16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	e22d      	b.n	8000f72 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d075      	beq.n	8000c0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b22:	4ba3      	ldr	r3, [pc, #652]	; (8000db0 <HAL_RCC_OscConfig+0x2ac>)
 8000b24:	689b      	ldr	r3, [r3, #8]
 8000b26:	f003 030c 	and.w	r3, r3, #12
 8000b2a:	2b04      	cmp	r3, #4
 8000b2c:	d00c      	beq.n	8000b48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b2e:	4ba0      	ldr	r3, [pc, #640]	; (8000db0 <HAL_RCC_OscConfig+0x2ac>)
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b36:	2b08      	cmp	r3, #8
 8000b38:	d112      	bne.n	8000b60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b3a:	4b9d      	ldr	r3, [pc, #628]	; (8000db0 <HAL_RCC_OscConfig+0x2ac>)
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000b46:	d10b      	bne.n	8000b60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b48:	4b99      	ldr	r3, [pc, #612]	; (8000db0 <HAL_RCC_OscConfig+0x2ac>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d05b      	beq.n	8000c0c <HAL_RCC_OscConfig+0x108>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d157      	bne.n	8000c0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	e208      	b.n	8000f72 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b68:	d106      	bne.n	8000b78 <HAL_RCC_OscConfig+0x74>
 8000b6a:	4b91      	ldr	r3, [pc, #580]	; (8000db0 <HAL_RCC_OscConfig+0x2ac>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a90      	ldr	r2, [pc, #576]	; (8000db0 <HAL_RCC_OscConfig+0x2ac>)
 8000b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b74:	6013      	str	r3, [r2, #0]
 8000b76:	e01d      	b.n	8000bb4 <HAL_RCC_OscConfig+0xb0>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b80:	d10c      	bne.n	8000b9c <HAL_RCC_OscConfig+0x98>
 8000b82:	4b8b      	ldr	r3, [pc, #556]	; (8000db0 <HAL_RCC_OscConfig+0x2ac>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a8a      	ldr	r2, [pc, #552]	; (8000db0 <HAL_RCC_OscConfig+0x2ac>)
 8000b88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b8c:	6013      	str	r3, [r2, #0]
 8000b8e:	4b88      	ldr	r3, [pc, #544]	; (8000db0 <HAL_RCC_OscConfig+0x2ac>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a87      	ldr	r2, [pc, #540]	; (8000db0 <HAL_RCC_OscConfig+0x2ac>)
 8000b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b98:	6013      	str	r3, [r2, #0]
 8000b9a:	e00b      	b.n	8000bb4 <HAL_RCC_OscConfig+0xb0>
 8000b9c:	4b84      	ldr	r3, [pc, #528]	; (8000db0 <HAL_RCC_OscConfig+0x2ac>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a83      	ldr	r2, [pc, #524]	; (8000db0 <HAL_RCC_OscConfig+0x2ac>)
 8000ba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ba6:	6013      	str	r3, [r2, #0]
 8000ba8:	4b81      	ldr	r3, [pc, #516]	; (8000db0 <HAL_RCC_OscConfig+0x2ac>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a80      	ldr	r2, [pc, #512]	; (8000db0 <HAL_RCC_OscConfig+0x2ac>)
 8000bae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d013      	beq.n	8000be4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bbc:	f7ff fcea 	bl	8000594 <HAL_GetTick>
 8000bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bc2:	e008      	b.n	8000bd6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bc4:	f7ff fce6 	bl	8000594 <HAL_GetTick>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	2b64      	cmp	r3, #100	; 0x64
 8000bd0:	d901      	bls.n	8000bd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	e1cd      	b.n	8000f72 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bd6:	4b76      	ldr	r3, [pc, #472]	; (8000db0 <HAL_RCC_OscConfig+0x2ac>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d0f0      	beq.n	8000bc4 <HAL_RCC_OscConfig+0xc0>
 8000be2:	e014      	b.n	8000c0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000be4:	f7ff fcd6 	bl	8000594 <HAL_GetTick>
 8000be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bea:	e008      	b.n	8000bfe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bec:	f7ff fcd2 	bl	8000594 <HAL_GetTick>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	2b64      	cmp	r3, #100	; 0x64
 8000bf8:	d901      	bls.n	8000bfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	e1b9      	b.n	8000f72 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bfe:	4b6c      	ldr	r3, [pc, #432]	; (8000db0 <HAL_RCC_OscConfig+0x2ac>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d1f0      	bne.n	8000bec <HAL_RCC_OscConfig+0xe8>
 8000c0a:	e000      	b.n	8000c0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f003 0302 	and.w	r3, r3, #2
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d063      	beq.n	8000ce2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c1a:	4b65      	ldr	r3, [pc, #404]	; (8000db0 <HAL_RCC_OscConfig+0x2ac>)
 8000c1c:	689b      	ldr	r3, [r3, #8]
 8000c1e:	f003 030c 	and.w	r3, r3, #12
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d00b      	beq.n	8000c3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c26:	4b62      	ldr	r3, [pc, #392]	; (8000db0 <HAL_RCC_OscConfig+0x2ac>)
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c2e:	2b08      	cmp	r3, #8
 8000c30:	d11c      	bne.n	8000c6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c32:	4b5f      	ldr	r3, [pc, #380]	; (8000db0 <HAL_RCC_OscConfig+0x2ac>)
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d116      	bne.n	8000c6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c3e:	4b5c      	ldr	r3, [pc, #368]	; (8000db0 <HAL_RCC_OscConfig+0x2ac>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d005      	beq.n	8000c56 <HAL_RCC_OscConfig+0x152>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	68db      	ldr	r3, [r3, #12]
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d001      	beq.n	8000c56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	e18d      	b.n	8000f72 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c56:	4b56      	ldr	r3, [pc, #344]	; (8000db0 <HAL_RCC_OscConfig+0x2ac>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	691b      	ldr	r3, [r3, #16]
 8000c62:	00db      	lsls	r3, r3, #3
 8000c64:	4952      	ldr	r1, [pc, #328]	; (8000db0 <HAL_RCC_OscConfig+0x2ac>)
 8000c66:	4313      	orrs	r3, r2
 8000c68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c6a:	e03a      	b.n	8000ce2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d020      	beq.n	8000cb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c74:	4b4f      	ldr	r3, [pc, #316]	; (8000db4 <HAL_RCC_OscConfig+0x2b0>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c7a:	f7ff fc8b 	bl	8000594 <HAL_GetTick>
 8000c7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c80:	e008      	b.n	8000c94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c82:	f7ff fc87 	bl	8000594 <HAL_GetTick>
 8000c86:	4602      	mov	r2, r0
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	1ad3      	subs	r3, r2, r3
 8000c8c:	2b02      	cmp	r3, #2
 8000c8e:	d901      	bls.n	8000c94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000c90:	2303      	movs	r3, #3
 8000c92:	e16e      	b.n	8000f72 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c94:	4b46      	ldr	r3, [pc, #280]	; (8000db0 <HAL_RCC_OscConfig+0x2ac>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f003 0302 	and.w	r3, r3, #2
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d0f0      	beq.n	8000c82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ca0:	4b43      	ldr	r3, [pc, #268]	; (8000db0 <HAL_RCC_OscConfig+0x2ac>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	691b      	ldr	r3, [r3, #16]
 8000cac:	00db      	lsls	r3, r3, #3
 8000cae:	4940      	ldr	r1, [pc, #256]	; (8000db0 <HAL_RCC_OscConfig+0x2ac>)
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	600b      	str	r3, [r1, #0]
 8000cb4:	e015      	b.n	8000ce2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cb6:	4b3f      	ldr	r3, [pc, #252]	; (8000db4 <HAL_RCC_OscConfig+0x2b0>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cbc:	f7ff fc6a 	bl	8000594 <HAL_GetTick>
 8000cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cc2:	e008      	b.n	8000cd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cc4:	f7ff fc66 	bl	8000594 <HAL_GetTick>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d901      	bls.n	8000cd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	e14d      	b.n	8000f72 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cd6:	4b36      	ldr	r3, [pc, #216]	; (8000db0 <HAL_RCC_OscConfig+0x2ac>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f003 0302 	and.w	r3, r3, #2
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d1f0      	bne.n	8000cc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f003 0308 	and.w	r3, r3, #8
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d030      	beq.n	8000d50 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	695b      	ldr	r3, [r3, #20]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d016      	beq.n	8000d24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cf6:	4b30      	ldr	r3, [pc, #192]	; (8000db8 <HAL_RCC_OscConfig+0x2b4>)
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000cfc:	f7ff fc4a 	bl	8000594 <HAL_GetTick>
 8000d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d02:	e008      	b.n	8000d16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d04:	f7ff fc46 	bl	8000594 <HAL_GetTick>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d901      	bls.n	8000d16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000d12:	2303      	movs	r3, #3
 8000d14:	e12d      	b.n	8000f72 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d16:	4b26      	ldr	r3, [pc, #152]	; (8000db0 <HAL_RCC_OscConfig+0x2ac>)
 8000d18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d1a:	f003 0302 	and.w	r3, r3, #2
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d0f0      	beq.n	8000d04 <HAL_RCC_OscConfig+0x200>
 8000d22:	e015      	b.n	8000d50 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d24:	4b24      	ldr	r3, [pc, #144]	; (8000db8 <HAL_RCC_OscConfig+0x2b4>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d2a:	f7ff fc33 	bl	8000594 <HAL_GetTick>
 8000d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d30:	e008      	b.n	8000d44 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d32:	f7ff fc2f 	bl	8000594 <HAL_GetTick>
 8000d36:	4602      	mov	r2, r0
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	2b02      	cmp	r3, #2
 8000d3e:	d901      	bls.n	8000d44 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000d40:	2303      	movs	r3, #3
 8000d42:	e116      	b.n	8000f72 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d44:	4b1a      	ldr	r3, [pc, #104]	; (8000db0 <HAL_RCC_OscConfig+0x2ac>)
 8000d46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d48:	f003 0302 	and.w	r3, r3, #2
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d1f0      	bne.n	8000d32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f003 0304 	and.w	r3, r3, #4
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	f000 80a0 	beq.w	8000e9e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d62:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <HAL_RCC_OscConfig+0x2ac>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d10f      	bne.n	8000d8e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <HAL_RCC_OscConfig+0x2ac>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	4a0e      	ldr	r2, [pc, #56]	; (8000db0 <HAL_RCC_OscConfig+0x2ac>)
 8000d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d7e:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <HAL_RCC_OscConfig+0x2ac>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <HAL_RCC_OscConfig+0x2b8>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d121      	bne.n	8000dde <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d9a:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <HAL_RCC_OscConfig+0x2b8>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a07      	ldr	r2, [pc, #28]	; (8000dbc <HAL_RCC_OscConfig+0x2b8>)
 8000da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000da4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000da6:	f7ff fbf5 	bl	8000594 <HAL_GetTick>
 8000daa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dac:	e011      	b.n	8000dd2 <HAL_RCC_OscConfig+0x2ce>
 8000dae:	bf00      	nop
 8000db0:	40023800 	.word	0x40023800
 8000db4:	42470000 	.word	0x42470000
 8000db8:	42470e80 	.word	0x42470e80
 8000dbc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dc0:	f7ff fbe8 	bl	8000594 <HAL_GetTick>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d901      	bls.n	8000dd2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	e0cf      	b.n	8000f72 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dd2:	4b6a      	ldr	r3, [pc, #424]	; (8000f7c <HAL_RCC_OscConfig+0x478>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d0f0      	beq.n	8000dc0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d106      	bne.n	8000df4 <HAL_RCC_OscConfig+0x2f0>
 8000de6:	4b66      	ldr	r3, [pc, #408]	; (8000f80 <HAL_RCC_OscConfig+0x47c>)
 8000de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dea:	4a65      	ldr	r2, [pc, #404]	; (8000f80 <HAL_RCC_OscConfig+0x47c>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	6713      	str	r3, [r2, #112]	; 0x70
 8000df2:	e01c      	b.n	8000e2e <HAL_RCC_OscConfig+0x32a>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	2b05      	cmp	r3, #5
 8000dfa:	d10c      	bne.n	8000e16 <HAL_RCC_OscConfig+0x312>
 8000dfc:	4b60      	ldr	r3, [pc, #384]	; (8000f80 <HAL_RCC_OscConfig+0x47c>)
 8000dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e00:	4a5f      	ldr	r2, [pc, #380]	; (8000f80 <HAL_RCC_OscConfig+0x47c>)
 8000e02:	f043 0304 	orr.w	r3, r3, #4
 8000e06:	6713      	str	r3, [r2, #112]	; 0x70
 8000e08:	4b5d      	ldr	r3, [pc, #372]	; (8000f80 <HAL_RCC_OscConfig+0x47c>)
 8000e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e0c:	4a5c      	ldr	r2, [pc, #368]	; (8000f80 <HAL_RCC_OscConfig+0x47c>)
 8000e0e:	f043 0301 	orr.w	r3, r3, #1
 8000e12:	6713      	str	r3, [r2, #112]	; 0x70
 8000e14:	e00b      	b.n	8000e2e <HAL_RCC_OscConfig+0x32a>
 8000e16:	4b5a      	ldr	r3, [pc, #360]	; (8000f80 <HAL_RCC_OscConfig+0x47c>)
 8000e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e1a:	4a59      	ldr	r2, [pc, #356]	; (8000f80 <HAL_RCC_OscConfig+0x47c>)
 8000e1c:	f023 0301 	bic.w	r3, r3, #1
 8000e20:	6713      	str	r3, [r2, #112]	; 0x70
 8000e22:	4b57      	ldr	r3, [pc, #348]	; (8000f80 <HAL_RCC_OscConfig+0x47c>)
 8000e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e26:	4a56      	ldr	r2, [pc, #344]	; (8000f80 <HAL_RCC_OscConfig+0x47c>)
 8000e28:	f023 0304 	bic.w	r3, r3, #4
 8000e2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d015      	beq.n	8000e62 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e36:	f7ff fbad 	bl	8000594 <HAL_GetTick>
 8000e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e3c:	e00a      	b.n	8000e54 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e3e:	f7ff fba9 	bl	8000594 <HAL_GetTick>
 8000e42:	4602      	mov	r2, r0
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	1ad3      	subs	r3, r2, r3
 8000e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d901      	bls.n	8000e54 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000e50:	2303      	movs	r3, #3
 8000e52:	e08e      	b.n	8000f72 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e54:	4b4a      	ldr	r3, [pc, #296]	; (8000f80 <HAL_RCC_OscConfig+0x47c>)
 8000e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e58:	f003 0302 	and.w	r3, r3, #2
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d0ee      	beq.n	8000e3e <HAL_RCC_OscConfig+0x33a>
 8000e60:	e014      	b.n	8000e8c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e62:	f7ff fb97 	bl	8000594 <HAL_GetTick>
 8000e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e68:	e00a      	b.n	8000e80 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e6a:	f7ff fb93 	bl	8000594 <HAL_GetTick>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d901      	bls.n	8000e80 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	e078      	b.n	8000f72 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e80:	4b3f      	ldr	r3, [pc, #252]	; (8000f80 <HAL_RCC_OscConfig+0x47c>)
 8000e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e84:	f003 0302 	and.w	r3, r3, #2
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d1ee      	bne.n	8000e6a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000e8c:	7dfb      	ldrb	r3, [r7, #23]
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d105      	bne.n	8000e9e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e92:	4b3b      	ldr	r3, [pc, #236]	; (8000f80 <HAL_RCC_OscConfig+0x47c>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	4a3a      	ldr	r2, [pc, #232]	; (8000f80 <HAL_RCC_OscConfig+0x47c>)
 8000e98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e9c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	699b      	ldr	r3, [r3, #24]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d064      	beq.n	8000f70 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000ea6:	4b36      	ldr	r3, [pc, #216]	; (8000f80 <HAL_RCC_OscConfig+0x47c>)
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	f003 030c 	and.w	r3, r3, #12
 8000eae:	2b08      	cmp	r3, #8
 8000eb0:	d05c      	beq.n	8000f6c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	699b      	ldr	r3, [r3, #24]
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d141      	bne.n	8000f3e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000eba:	4b32      	ldr	r3, [pc, #200]	; (8000f84 <HAL_RCC_OscConfig+0x480>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec0:	f7ff fb68 	bl	8000594 <HAL_GetTick>
 8000ec4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ec6:	e008      	b.n	8000eda <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ec8:	f7ff fb64 	bl	8000594 <HAL_GetTick>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d901      	bls.n	8000eda <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e04b      	b.n	8000f72 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000eda:	4b29      	ldr	r3, [pc, #164]	; (8000f80 <HAL_RCC_OscConfig+0x47c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d1f0      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	69da      	ldr	r2, [r3, #28]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6a1b      	ldr	r3, [r3, #32]
 8000eee:	431a      	orrs	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef4:	019b      	lsls	r3, r3, #6
 8000ef6:	431a      	orrs	r2, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000efc:	085b      	lsrs	r3, r3, #1
 8000efe:	3b01      	subs	r3, #1
 8000f00:	041b      	lsls	r3, r3, #16
 8000f02:	431a      	orrs	r2, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f08:	061b      	lsls	r3, r3, #24
 8000f0a:	491d      	ldr	r1, [pc, #116]	; (8000f80 <HAL_RCC_OscConfig+0x47c>)
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f10:	4b1c      	ldr	r3, [pc, #112]	; (8000f84 <HAL_RCC_OscConfig+0x480>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f16:	f7ff fb3d 	bl	8000594 <HAL_GetTick>
 8000f1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f1c:	e008      	b.n	8000f30 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f1e:	f7ff fb39 	bl	8000594 <HAL_GetTick>
 8000f22:	4602      	mov	r2, r0
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d901      	bls.n	8000f30 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	e020      	b.n	8000f72 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f30:	4b13      	ldr	r3, [pc, #76]	; (8000f80 <HAL_RCC_OscConfig+0x47c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d0f0      	beq.n	8000f1e <HAL_RCC_OscConfig+0x41a>
 8000f3c:	e018      	b.n	8000f70 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f3e:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <HAL_RCC_OscConfig+0x480>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f44:	f7ff fb26 	bl	8000594 <HAL_GetTick>
 8000f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f4a:	e008      	b.n	8000f5e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f4c:	f7ff fb22 	bl	8000594 <HAL_GetTick>
 8000f50:	4602      	mov	r2, r0
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d901      	bls.n	8000f5e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	e009      	b.n	8000f72 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f5e:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <HAL_RCC_OscConfig+0x47c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d1f0      	bne.n	8000f4c <HAL_RCC_OscConfig+0x448>
 8000f6a:	e001      	b.n	8000f70 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e000      	b.n	8000f72 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3718      	adds	r7, #24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40007000 	.word	0x40007000
 8000f80:	40023800 	.word	0x40023800
 8000f84:	42470060 	.word	0x42470060

08000f88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d101      	bne.n	8000f9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e0ca      	b.n	8001132 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f9c:	4b67      	ldr	r3, [pc, #412]	; (800113c <HAL_RCC_ClockConfig+0x1b4>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f003 030f 	and.w	r3, r3, #15
 8000fa4:	683a      	ldr	r2, [r7, #0]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d90c      	bls.n	8000fc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000faa:	4b64      	ldr	r3, [pc, #400]	; (800113c <HAL_RCC_ClockConfig+0x1b4>)
 8000fac:	683a      	ldr	r2, [r7, #0]
 8000fae:	b2d2      	uxtb	r2, r2
 8000fb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fb2:	4b62      	ldr	r3, [pc, #392]	; (800113c <HAL_RCC_ClockConfig+0x1b4>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f003 030f 	and.w	r3, r3, #15
 8000fba:	683a      	ldr	r2, [r7, #0]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d001      	beq.n	8000fc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e0b6      	b.n	8001132 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f003 0302 	and.w	r3, r3, #2
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d020      	beq.n	8001012 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f003 0304 	and.w	r3, r3, #4
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d005      	beq.n	8000fe8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000fdc:	4b58      	ldr	r3, [pc, #352]	; (8001140 <HAL_RCC_ClockConfig+0x1b8>)
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	4a57      	ldr	r2, [pc, #348]	; (8001140 <HAL_RCC_ClockConfig+0x1b8>)
 8000fe2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000fe6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f003 0308 	and.w	r3, r3, #8
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d005      	beq.n	8001000 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000ff4:	4b52      	ldr	r3, [pc, #328]	; (8001140 <HAL_RCC_ClockConfig+0x1b8>)
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	4a51      	ldr	r2, [pc, #324]	; (8001140 <HAL_RCC_ClockConfig+0x1b8>)
 8000ffa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000ffe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001000:	4b4f      	ldr	r3, [pc, #316]	; (8001140 <HAL_RCC_ClockConfig+0x1b8>)
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	494c      	ldr	r1, [pc, #304]	; (8001140 <HAL_RCC_ClockConfig+0x1b8>)
 800100e:	4313      	orrs	r3, r2
 8001010:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	2b00      	cmp	r3, #0
 800101c:	d044      	beq.n	80010a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d107      	bne.n	8001036 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001026:	4b46      	ldr	r3, [pc, #280]	; (8001140 <HAL_RCC_ClockConfig+0x1b8>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d119      	bne.n	8001066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e07d      	b.n	8001132 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	2b02      	cmp	r3, #2
 800103c:	d003      	beq.n	8001046 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001042:	2b03      	cmp	r3, #3
 8001044:	d107      	bne.n	8001056 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001046:	4b3e      	ldr	r3, [pc, #248]	; (8001140 <HAL_RCC_ClockConfig+0x1b8>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d109      	bne.n	8001066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e06d      	b.n	8001132 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001056:	4b3a      	ldr	r3, [pc, #232]	; (8001140 <HAL_RCC_ClockConfig+0x1b8>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	2b00      	cmp	r3, #0
 8001060:	d101      	bne.n	8001066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e065      	b.n	8001132 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001066:	4b36      	ldr	r3, [pc, #216]	; (8001140 <HAL_RCC_ClockConfig+0x1b8>)
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	f023 0203 	bic.w	r2, r3, #3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	4933      	ldr	r1, [pc, #204]	; (8001140 <HAL_RCC_ClockConfig+0x1b8>)
 8001074:	4313      	orrs	r3, r2
 8001076:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001078:	f7ff fa8c 	bl	8000594 <HAL_GetTick>
 800107c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800107e:	e00a      	b.n	8001096 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001080:	f7ff fa88 	bl	8000594 <HAL_GetTick>
 8001084:	4602      	mov	r2, r0
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	f241 3288 	movw	r2, #5000	; 0x1388
 800108e:	4293      	cmp	r3, r2
 8001090:	d901      	bls.n	8001096 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001092:	2303      	movs	r3, #3
 8001094:	e04d      	b.n	8001132 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001096:	4b2a      	ldr	r3, [pc, #168]	; (8001140 <HAL_RCC_ClockConfig+0x1b8>)
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	f003 020c 	and.w	r2, r3, #12
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d1eb      	bne.n	8001080 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010a8:	4b24      	ldr	r3, [pc, #144]	; (800113c <HAL_RCC_ClockConfig+0x1b4>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 030f 	and.w	r3, r3, #15
 80010b0:	683a      	ldr	r2, [r7, #0]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d20c      	bcs.n	80010d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010b6:	4b21      	ldr	r3, [pc, #132]	; (800113c <HAL_RCC_ClockConfig+0x1b4>)
 80010b8:	683a      	ldr	r2, [r7, #0]
 80010ba:	b2d2      	uxtb	r2, r2
 80010bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010be:	4b1f      	ldr	r3, [pc, #124]	; (800113c <HAL_RCC_ClockConfig+0x1b4>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 030f 	and.w	r3, r3, #15
 80010c6:	683a      	ldr	r2, [r7, #0]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d001      	beq.n	80010d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e030      	b.n	8001132 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0304 	and.w	r3, r3, #4
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d008      	beq.n	80010ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010dc:	4b18      	ldr	r3, [pc, #96]	; (8001140 <HAL_RCC_ClockConfig+0x1b8>)
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	4915      	ldr	r1, [pc, #84]	; (8001140 <HAL_RCC_ClockConfig+0x1b8>)
 80010ea:	4313      	orrs	r3, r2
 80010ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0308 	and.w	r3, r3, #8
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d009      	beq.n	800110e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80010fa:	4b11      	ldr	r3, [pc, #68]	; (8001140 <HAL_RCC_ClockConfig+0x1b8>)
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	691b      	ldr	r3, [r3, #16]
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	490d      	ldr	r1, [pc, #52]	; (8001140 <HAL_RCC_ClockConfig+0x1b8>)
 800110a:	4313      	orrs	r3, r2
 800110c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800110e:	f000 f81d 	bl	800114c <HAL_RCC_GetSysClockFreq>
 8001112:	4601      	mov	r1, r0
 8001114:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <HAL_RCC_ClockConfig+0x1b8>)
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	091b      	lsrs	r3, r3, #4
 800111a:	f003 030f 	and.w	r3, r3, #15
 800111e:	4a09      	ldr	r2, [pc, #36]	; (8001144 <HAL_RCC_ClockConfig+0x1bc>)
 8001120:	5cd3      	ldrb	r3, [r2, r3]
 8001122:	fa21 f303 	lsr.w	r3, r1, r3
 8001126:	4a08      	ldr	r2, [pc, #32]	; (8001148 <HAL_RCC_ClockConfig+0x1c0>)
 8001128:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800112a:	2000      	movs	r0, #0
 800112c:	f7ff f9ee 	bl	800050c <HAL_InitTick>

  return HAL_OK;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40023c00 	.word	0x40023c00
 8001140:	40023800 	.word	0x40023800
 8001144:	080022dc 	.word	0x080022dc
 8001148:	20000008 	.word	0x20000008

0800114c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800114c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001152:	2300      	movs	r3, #0
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	2300      	movs	r3, #0
 800115c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800115e:	2300      	movs	r3, #0
 8001160:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001162:	4b50      	ldr	r3, [pc, #320]	; (80012a4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	f003 030c 	and.w	r3, r3, #12
 800116a:	2b04      	cmp	r3, #4
 800116c:	d007      	beq.n	800117e <HAL_RCC_GetSysClockFreq+0x32>
 800116e:	2b08      	cmp	r3, #8
 8001170:	d008      	beq.n	8001184 <HAL_RCC_GetSysClockFreq+0x38>
 8001172:	2b00      	cmp	r3, #0
 8001174:	f040 808d 	bne.w	8001292 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001178:	4b4b      	ldr	r3, [pc, #300]	; (80012a8 <HAL_RCC_GetSysClockFreq+0x15c>)
 800117a:	60bb      	str	r3, [r7, #8]
       break;
 800117c:	e08c      	b.n	8001298 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800117e:	4b4b      	ldr	r3, [pc, #300]	; (80012ac <HAL_RCC_GetSysClockFreq+0x160>)
 8001180:	60bb      	str	r3, [r7, #8]
      break;
 8001182:	e089      	b.n	8001298 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001184:	4b47      	ldr	r3, [pc, #284]	; (80012a4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800118c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800118e:	4b45      	ldr	r3, [pc, #276]	; (80012a4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d023      	beq.n	80011e2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800119a:	4b42      	ldr	r3, [pc, #264]	; (80012a4 <HAL_RCC_GetSysClockFreq+0x158>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	099b      	lsrs	r3, r3, #6
 80011a0:	f04f 0400 	mov.w	r4, #0
 80011a4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80011a8:	f04f 0200 	mov.w	r2, #0
 80011ac:	ea03 0501 	and.w	r5, r3, r1
 80011b0:	ea04 0602 	and.w	r6, r4, r2
 80011b4:	4a3d      	ldr	r2, [pc, #244]	; (80012ac <HAL_RCC_GetSysClockFreq+0x160>)
 80011b6:	fb02 f106 	mul.w	r1, r2, r6
 80011ba:	2200      	movs	r2, #0
 80011bc:	fb02 f205 	mul.w	r2, r2, r5
 80011c0:	440a      	add	r2, r1
 80011c2:	493a      	ldr	r1, [pc, #232]	; (80012ac <HAL_RCC_GetSysClockFreq+0x160>)
 80011c4:	fba5 0101 	umull	r0, r1, r5, r1
 80011c8:	1853      	adds	r3, r2, r1
 80011ca:	4619      	mov	r1, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f04f 0400 	mov.w	r4, #0
 80011d2:	461a      	mov	r2, r3
 80011d4:	4623      	mov	r3, r4
 80011d6:	f7fe fff7 	bl	80001c8 <__aeabi_uldivmod>
 80011da:	4603      	mov	r3, r0
 80011dc:	460c      	mov	r4, r1
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	e049      	b.n	8001276 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011e2:	4b30      	ldr	r3, [pc, #192]	; (80012a4 <HAL_RCC_GetSysClockFreq+0x158>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	099b      	lsrs	r3, r3, #6
 80011e8:	f04f 0400 	mov.w	r4, #0
 80011ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80011f0:	f04f 0200 	mov.w	r2, #0
 80011f4:	ea03 0501 	and.w	r5, r3, r1
 80011f8:	ea04 0602 	and.w	r6, r4, r2
 80011fc:	4629      	mov	r1, r5
 80011fe:	4632      	mov	r2, r6
 8001200:	f04f 0300 	mov.w	r3, #0
 8001204:	f04f 0400 	mov.w	r4, #0
 8001208:	0154      	lsls	r4, r2, #5
 800120a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800120e:	014b      	lsls	r3, r1, #5
 8001210:	4619      	mov	r1, r3
 8001212:	4622      	mov	r2, r4
 8001214:	1b49      	subs	r1, r1, r5
 8001216:	eb62 0206 	sbc.w	r2, r2, r6
 800121a:	f04f 0300 	mov.w	r3, #0
 800121e:	f04f 0400 	mov.w	r4, #0
 8001222:	0194      	lsls	r4, r2, #6
 8001224:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001228:	018b      	lsls	r3, r1, #6
 800122a:	1a5b      	subs	r3, r3, r1
 800122c:	eb64 0402 	sbc.w	r4, r4, r2
 8001230:	f04f 0100 	mov.w	r1, #0
 8001234:	f04f 0200 	mov.w	r2, #0
 8001238:	00e2      	lsls	r2, r4, #3
 800123a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800123e:	00d9      	lsls	r1, r3, #3
 8001240:	460b      	mov	r3, r1
 8001242:	4614      	mov	r4, r2
 8001244:	195b      	adds	r3, r3, r5
 8001246:	eb44 0406 	adc.w	r4, r4, r6
 800124a:	f04f 0100 	mov.w	r1, #0
 800124e:	f04f 0200 	mov.w	r2, #0
 8001252:	02a2      	lsls	r2, r4, #10
 8001254:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001258:	0299      	lsls	r1, r3, #10
 800125a:	460b      	mov	r3, r1
 800125c:	4614      	mov	r4, r2
 800125e:	4618      	mov	r0, r3
 8001260:	4621      	mov	r1, r4
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	f04f 0400 	mov.w	r4, #0
 8001268:	461a      	mov	r2, r3
 800126a:	4623      	mov	r3, r4
 800126c:	f7fe ffac 	bl	80001c8 <__aeabi_uldivmod>
 8001270:	4603      	mov	r3, r0
 8001272:	460c      	mov	r4, r1
 8001274:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001276:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	0c1b      	lsrs	r3, r3, #16
 800127c:	f003 0303 	and.w	r3, r3, #3
 8001280:	3301      	adds	r3, #1
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001286:	68fa      	ldr	r2, [r7, #12]
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	fbb2 f3f3 	udiv	r3, r2, r3
 800128e:	60bb      	str	r3, [r7, #8]
      break;
 8001290:	e002      	b.n	8001298 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001292:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001294:	60bb      	str	r3, [r7, #8]
      break;
 8001296:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001298:	68bb      	ldr	r3, [r7, #8]
}
 800129a:	4618      	mov	r0, r3
 800129c:	3714      	adds	r7, #20
 800129e:	46bd      	mov	sp, r7
 80012a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40023800 	.word	0x40023800
 80012a8:	00f42400 	.word	0x00f42400
 80012ac:	017d7840 	.word	0x017d7840

080012b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d101      	bne.n	80012c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e01d      	b.n	80012fe <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d106      	bne.n	80012dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f000 ff3c 	bl	8002154 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2202      	movs	r2, #2
 80012e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3304      	adds	r3, #4
 80012ec:	4619      	mov	r1, r3
 80012ee:	4610      	mov	r0, r2
 80012f0:	f000 fa48 	bl	8001784 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2201      	movs	r2, #1
 80012f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2201      	movs	r2, #1
 8001318:	6839      	ldr	r1, [r7, #0]
 800131a:	4618      	mov	r0, r3
 800131c:	f000 fc82 	bl	8001c24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a15      	ldr	r2, [pc, #84]	; (800137c <HAL_TIM_PWM_Start+0x74>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d004      	beq.n	8001334 <HAL_TIM_PWM_Start+0x2c>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a14      	ldr	r2, [pc, #80]	; (8001380 <HAL_TIM_PWM_Start+0x78>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d101      	bne.n	8001338 <HAL_TIM_PWM_Start+0x30>
 8001334:	2301      	movs	r3, #1
 8001336:	e000      	b.n	800133a <HAL_TIM_PWM_Start+0x32>
 8001338:	2300      	movs	r3, #0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d007      	beq.n	800134e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800134c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	f003 0307 	and.w	r3, r3, #7
 8001358:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2b06      	cmp	r3, #6
 800135e:	d007      	beq.n	8001370 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f042 0201 	orr.w	r2, r2, #1
 800136e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40010000 	.word	0x40010000
 8001380:	40010400 	.word	0x40010400

08001384 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	691b      	ldr	r3, [r3, #16]
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b02      	cmp	r3, #2
 8001398:	d122      	bne.n	80013e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d11b      	bne.n	80013e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f06f 0202 	mvn.w	r2, #2
 80013b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2201      	movs	r2, #1
 80013b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	f003 0303 	and.w	r3, r3, #3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f000 f9be 	bl	8001748 <HAL_TIM_IC_CaptureCallback>
 80013cc:	e005      	b.n	80013da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f000 f9b0 	bl	8001734 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f000 f9c1 	bl	800175c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	691b      	ldr	r3, [r3, #16]
 80013e6:	f003 0304 	and.w	r3, r3, #4
 80013ea:	2b04      	cmp	r3, #4
 80013ec:	d122      	bne.n	8001434 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	f003 0304 	and.w	r3, r3, #4
 80013f8:	2b04      	cmp	r3, #4
 80013fa:	d11b      	bne.n	8001434 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f06f 0204 	mvn.w	r2, #4
 8001404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2202      	movs	r2, #2
 800140a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f000 f994 	bl	8001748 <HAL_TIM_IC_CaptureCallback>
 8001420:	e005      	b.n	800142e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f000 f986 	bl	8001734 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f000 f997 	bl	800175c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	691b      	ldr	r3, [r3, #16]
 800143a:	f003 0308 	and.w	r3, r3, #8
 800143e:	2b08      	cmp	r3, #8
 8001440:	d122      	bne.n	8001488 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	f003 0308 	and.w	r3, r3, #8
 800144c:	2b08      	cmp	r3, #8
 800144e:	d11b      	bne.n	8001488 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f06f 0208 	mvn.w	r2, #8
 8001458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2204      	movs	r2, #4
 800145e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	f003 0303 	and.w	r3, r3, #3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f000 f96a 	bl	8001748 <HAL_TIM_IC_CaptureCallback>
 8001474:	e005      	b.n	8001482 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f000 f95c 	bl	8001734 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f000 f96d 	bl	800175c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	691b      	ldr	r3, [r3, #16]
 800148e:	f003 0310 	and.w	r3, r3, #16
 8001492:	2b10      	cmp	r3, #16
 8001494:	d122      	bne.n	80014dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	f003 0310 	and.w	r3, r3, #16
 80014a0:	2b10      	cmp	r3, #16
 80014a2:	d11b      	bne.n	80014dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f06f 0210 	mvn.w	r2, #16
 80014ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2208      	movs	r2, #8
 80014b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	69db      	ldr	r3, [r3, #28]
 80014ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f000 f940 	bl	8001748 <HAL_TIM_IC_CaptureCallback>
 80014c8:	e005      	b.n	80014d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f000 f932 	bl	8001734 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f000 f943 	bl	800175c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d10e      	bne.n	8001508 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	f003 0301 	and.w	r3, r3, #1
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d107      	bne.n	8001508 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f06f 0201 	mvn.w	r2, #1
 8001500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f000 f90c 	bl	8001720 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	691b      	ldr	r3, [r3, #16]
 800150e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001512:	2b80      	cmp	r3, #128	; 0x80
 8001514:	d10e      	bne.n	8001534 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001520:	2b80      	cmp	r3, #128	; 0x80
 8001522:	d107      	bne.n	8001534 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800152c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f000 fbec 	bl	8001d0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	691b      	ldr	r3, [r3, #16]
 800153a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800153e:	2b40      	cmp	r3, #64	; 0x40
 8001540:	d10e      	bne.n	8001560 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800154c:	2b40      	cmp	r3, #64	; 0x40
 800154e:	d107      	bne.n	8001560 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 f908 	bl	8001770 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	f003 0320 	and.w	r3, r3, #32
 800156a:	2b20      	cmp	r3, #32
 800156c:	d10e      	bne.n	800158c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	f003 0320 	and.w	r3, r3, #32
 8001578:	2b20      	cmp	r3, #32
 800157a:	d107      	bne.n	800158c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f06f 0220 	mvn.w	r2, #32
 8001584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 fbb6 	bl	8001cf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800158c:	bf00      	nop
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d101      	bne.n	80015ae <HAL_TIM_PWM_ConfigChannel+0x1a>
 80015aa:	2302      	movs	r3, #2
 80015ac:	e0b4      	b.n	8001718 <HAL_TIM_PWM_ConfigChannel+0x184>
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2201      	movs	r2, #1
 80015b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2202      	movs	r2, #2
 80015ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b0c      	cmp	r3, #12
 80015c2:	f200 809f 	bhi.w	8001704 <HAL_TIM_PWM_ConfigChannel+0x170>
 80015c6:	a201      	add	r2, pc, #4	; (adr r2, 80015cc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80015c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015cc:	08001601 	.word	0x08001601
 80015d0:	08001705 	.word	0x08001705
 80015d4:	08001705 	.word	0x08001705
 80015d8:	08001705 	.word	0x08001705
 80015dc:	08001641 	.word	0x08001641
 80015e0:	08001705 	.word	0x08001705
 80015e4:	08001705 	.word	0x08001705
 80015e8:	08001705 	.word	0x08001705
 80015ec:	08001683 	.word	0x08001683
 80015f0:	08001705 	.word	0x08001705
 80015f4:	08001705 	.word	0x08001705
 80015f8:	08001705 	.word	0x08001705
 80015fc:	080016c3 	.word	0x080016c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	68b9      	ldr	r1, [r7, #8]
 8001606:	4618      	mov	r0, r3
 8001608:	f000 f95c 	bl	80018c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	699a      	ldr	r2, [r3, #24]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f042 0208 	orr.w	r2, r2, #8
 800161a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	699a      	ldr	r2, [r3, #24]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f022 0204 	bic.w	r2, r2, #4
 800162a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6999      	ldr	r1, [r3, #24]
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	691a      	ldr	r2, [r3, #16]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	430a      	orrs	r2, r1
 800163c:	619a      	str	r2, [r3, #24]
      break;
 800163e:	e062      	b.n	8001706 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	68b9      	ldr	r1, [r7, #8]
 8001646:	4618      	mov	r0, r3
 8001648:	f000 f9ac 	bl	80019a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	699a      	ldr	r2, [r3, #24]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800165a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	699a      	ldr	r2, [r3, #24]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800166a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6999      	ldr	r1, [r3, #24]
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	021a      	lsls	r2, r3, #8
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	430a      	orrs	r2, r1
 800167e:	619a      	str	r2, [r3, #24]
      break;
 8001680:	e041      	b.n	8001706 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68b9      	ldr	r1, [r7, #8]
 8001688:	4618      	mov	r0, r3
 800168a:	f000 fa01 	bl	8001a90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	69da      	ldr	r2, [r3, #28]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f042 0208 	orr.w	r2, r2, #8
 800169c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	69da      	ldr	r2, [r3, #28]
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 0204 	bic.w	r2, r2, #4
 80016ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	69d9      	ldr	r1, [r3, #28]
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	691a      	ldr	r2, [r3, #16]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	430a      	orrs	r2, r1
 80016be:	61da      	str	r2, [r3, #28]
      break;
 80016c0:	e021      	b.n	8001706 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68b9      	ldr	r1, [r7, #8]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f000 fa55 	bl	8001b78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	69da      	ldr	r2, [r3, #28]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	69da      	ldr	r2, [r3, #28]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	69d9      	ldr	r1, [r3, #28]
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	691b      	ldr	r3, [r3, #16]
 80016f8:	021a      	lsls	r2, r3, #8
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	430a      	orrs	r2, r1
 8001700:	61da      	str	r2, [r3, #28]
      break;
 8001702:	e000      	b.n	8001706 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8001704:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2201      	movs	r2, #1
 800170a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a40      	ldr	r2, [pc, #256]	; (8001898 <TIM_Base_SetConfig+0x114>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d013      	beq.n	80017c4 <TIM_Base_SetConfig+0x40>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017a2:	d00f      	beq.n	80017c4 <TIM_Base_SetConfig+0x40>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4a3d      	ldr	r2, [pc, #244]	; (800189c <TIM_Base_SetConfig+0x118>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d00b      	beq.n	80017c4 <TIM_Base_SetConfig+0x40>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a3c      	ldr	r2, [pc, #240]	; (80018a0 <TIM_Base_SetConfig+0x11c>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d007      	beq.n	80017c4 <TIM_Base_SetConfig+0x40>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a3b      	ldr	r2, [pc, #236]	; (80018a4 <TIM_Base_SetConfig+0x120>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d003      	beq.n	80017c4 <TIM_Base_SetConfig+0x40>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a3a      	ldr	r2, [pc, #232]	; (80018a8 <TIM_Base_SetConfig+0x124>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d108      	bne.n	80017d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	68fa      	ldr	r2, [r7, #12]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a2f      	ldr	r2, [pc, #188]	; (8001898 <TIM_Base_SetConfig+0x114>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d02b      	beq.n	8001836 <TIM_Base_SetConfig+0xb2>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017e4:	d027      	beq.n	8001836 <TIM_Base_SetConfig+0xb2>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a2c      	ldr	r2, [pc, #176]	; (800189c <TIM_Base_SetConfig+0x118>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d023      	beq.n	8001836 <TIM_Base_SetConfig+0xb2>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a2b      	ldr	r2, [pc, #172]	; (80018a0 <TIM_Base_SetConfig+0x11c>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d01f      	beq.n	8001836 <TIM_Base_SetConfig+0xb2>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a2a      	ldr	r2, [pc, #168]	; (80018a4 <TIM_Base_SetConfig+0x120>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d01b      	beq.n	8001836 <TIM_Base_SetConfig+0xb2>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a29      	ldr	r2, [pc, #164]	; (80018a8 <TIM_Base_SetConfig+0x124>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d017      	beq.n	8001836 <TIM_Base_SetConfig+0xb2>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a28      	ldr	r2, [pc, #160]	; (80018ac <TIM_Base_SetConfig+0x128>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d013      	beq.n	8001836 <TIM_Base_SetConfig+0xb2>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a27      	ldr	r2, [pc, #156]	; (80018b0 <TIM_Base_SetConfig+0x12c>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d00f      	beq.n	8001836 <TIM_Base_SetConfig+0xb2>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a26      	ldr	r2, [pc, #152]	; (80018b4 <TIM_Base_SetConfig+0x130>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d00b      	beq.n	8001836 <TIM_Base_SetConfig+0xb2>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a25      	ldr	r2, [pc, #148]	; (80018b8 <TIM_Base_SetConfig+0x134>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d007      	beq.n	8001836 <TIM_Base_SetConfig+0xb2>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a24      	ldr	r2, [pc, #144]	; (80018bc <TIM_Base_SetConfig+0x138>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d003      	beq.n	8001836 <TIM_Base_SetConfig+0xb2>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a23      	ldr	r2, [pc, #140]	; (80018c0 <TIM_Base_SetConfig+0x13c>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d108      	bne.n	8001848 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800183c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	4313      	orrs	r3, r2
 8001846:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	4313      	orrs	r3, r2
 8001854:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	68fa      	ldr	r2, [r7, #12]
 800185a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a0a      	ldr	r2, [pc, #40]	; (8001898 <TIM_Base_SetConfig+0x114>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d003      	beq.n	800187c <TIM_Base_SetConfig+0xf8>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4a0c      	ldr	r2, [pc, #48]	; (80018a8 <TIM_Base_SetConfig+0x124>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d103      	bne.n	8001884 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	691a      	ldr	r2, [r3, #16]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2201      	movs	r2, #1
 8001888:	615a      	str	r2, [r3, #20]
}
 800188a:	bf00      	nop
 800188c:	3714      	adds	r7, #20
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	40010000 	.word	0x40010000
 800189c:	40000400 	.word	0x40000400
 80018a0:	40000800 	.word	0x40000800
 80018a4:	40000c00 	.word	0x40000c00
 80018a8:	40010400 	.word	0x40010400
 80018ac:	40014000 	.word	0x40014000
 80018b0:	40014400 	.word	0x40014400
 80018b4:	40014800 	.word	0x40014800
 80018b8:	40001800 	.word	0x40001800
 80018bc:	40001c00 	.word	0x40001c00
 80018c0:	40002000 	.word	0x40002000

080018c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b087      	sub	sp, #28
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a1b      	ldr	r3, [r3, #32]
 80018d2:	f023 0201 	bic.w	r2, r3, #1
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a1b      	ldr	r3, [r3, #32]
 80018de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f023 0303 	bic.w	r3, r3, #3
 80018fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	68fa      	ldr	r2, [r7, #12]
 8001902:	4313      	orrs	r3, r2
 8001904:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	f023 0302 	bic.w	r3, r3, #2
 800190c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	697a      	ldr	r2, [r7, #20]
 8001914:	4313      	orrs	r3, r2
 8001916:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a20      	ldr	r2, [pc, #128]	; (800199c <TIM_OC1_SetConfig+0xd8>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d003      	beq.n	8001928 <TIM_OC1_SetConfig+0x64>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4a1f      	ldr	r2, [pc, #124]	; (80019a0 <TIM_OC1_SetConfig+0xdc>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d10c      	bne.n	8001942 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	f023 0308 	bic.w	r3, r3, #8
 800192e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	4313      	orrs	r3, r2
 8001938:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	f023 0304 	bic.w	r3, r3, #4
 8001940:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a15      	ldr	r2, [pc, #84]	; (800199c <TIM_OC1_SetConfig+0xd8>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d003      	beq.n	8001952 <TIM_OC1_SetConfig+0x8e>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a14      	ldr	r2, [pc, #80]	; (80019a0 <TIM_OC1_SetConfig+0xdc>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d111      	bne.n	8001976 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001958:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001960:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	4313      	orrs	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	4313      	orrs	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	697a      	ldr	r2, [r7, #20]
 800198e:	621a      	str	r2, [r3, #32]
}
 8001990:	bf00      	nop
 8001992:	371c      	adds	r7, #28
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	40010000 	.word	0x40010000
 80019a0:	40010400 	.word	0x40010400

080019a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b087      	sub	sp, #28
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a1b      	ldr	r3, [r3, #32]
 80019b2:	f023 0210 	bic.w	r2, r3, #16
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a1b      	ldr	r3, [r3, #32]
 80019be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80019d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	021b      	lsls	r3, r3, #8
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	f023 0320 	bic.w	r3, r3, #32
 80019ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	011b      	lsls	r3, r3, #4
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a22      	ldr	r2, [pc, #136]	; (8001a88 <TIM_OC2_SetConfig+0xe4>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d003      	beq.n	8001a0c <TIM_OC2_SetConfig+0x68>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a21      	ldr	r2, [pc, #132]	; (8001a8c <TIM_OC2_SetConfig+0xe8>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d10d      	bne.n	8001a28 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	011b      	lsls	r3, r3, #4
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a17      	ldr	r2, [pc, #92]	; (8001a88 <TIM_OC2_SetConfig+0xe4>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d003      	beq.n	8001a38 <TIM_OC2_SetConfig+0x94>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a16      	ldr	r2, [pc, #88]	; (8001a8c <TIM_OC2_SetConfig+0xe8>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d113      	bne.n	8001a60 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	68fa      	ldr	r2, [r7, #12]
 8001a6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	697a      	ldr	r2, [r7, #20]
 8001a78:	621a      	str	r2, [r3, #32]
}
 8001a7a:	bf00      	nop
 8001a7c:	371c      	adds	r7, #28
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	40010000 	.word	0x40010000
 8001a8c:	40010400 	.word	0x40010400

08001a90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b087      	sub	sp, #28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a1b      	ldr	r3, [r3, #32]
 8001a9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a1b      	ldr	r3, [r3, #32]
 8001aaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f023 0303 	bic.w	r3, r3, #3
 8001ac6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001ad8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	021b      	lsls	r3, r3, #8
 8001ae0:	697a      	ldr	r2, [r7, #20]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a21      	ldr	r2, [pc, #132]	; (8001b70 <TIM_OC3_SetConfig+0xe0>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d003      	beq.n	8001af6 <TIM_OC3_SetConfig+0x66>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a20      	ldr	r2, [pc, #128]	; (8001b74 <TIM_OC3_SetConfig+0xe4>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d10d      	bne.n	8001b12 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001afc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	021b      	lsls	r3, r3, #8
 8001b04:	697a      	ldr	r2, [r7, #20]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001b10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a16      	ldr	r2, [pc, #88]	; (8001b70 <TIM_OC3_SetConfig+0xe0>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d003      	beq.n	8001b22 <TIM_OC3_SetConfig+0x92>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a15      	ldr	r2, [pc, #84]	; (8001b74 <TIM_OC3_SetConfig+0xe4>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d113      	bne.n	8001b4a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001b30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	695b      	ldr	r3, [r3, #20]
 8001b36:	011b      	lsls	r3, r3, #4
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	011b      	lsls	r3, r3, #4
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685a      	ldr	r2, [r3, #4]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	697a      	ldr	r2, [r7, #20]
 8001b62:	621a      	str	r2, [r3, #32]
}
 8001b64:	bf00      	nop
 8001b66:	371c      	adds	r7, #28
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	40010000 	.word	0x40010000
 8001b74:	40010400 	.word	0x40010400

08001b78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b087      	sub	sp, #28
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a1b      	ldr	r3, [r3, #32]
 8001b86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a1b      	ldr	r3, [r3, #32]
 8001b92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	021b      	lsls	r3, r3, #8
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001bc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	031b      	lsls	r3, r3, #12
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4a12      	ldr	r2, [pc, #72]	; (8001c1c <TIM_OC4_SetConfig+0xa4>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d003      	beq.n	8001be0 <TIM_OC4_SetConfig+0x68>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4a11      	ldr	r2, [pc, #68]	; (8001c20 <TIM_OC4_SetConfig+0xa8>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d109      	bne.n	8001bf4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001be6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	019b      	lsls	r3, r3, #6
 8001bee:	697a      	ldr	r2, [r7, #20]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68fa      	ldr	r2, [r7, #12]
 8001bfe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	621a      	str	r2, [r3, #32]
}
 8001c0e:	bf00      	nop
 8001c10:	371c      	adds	r7, #28
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	40010000 	.word	0x40010000
 8001c20:	40010400 	.word	0x40010400

08001c24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b087      	sub	sp, #28
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	f003 031f 	and.w	r3, r3, #31
 8001c36:	2201      	movs	r2, #1
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6a1a      	ldr	r2, [r3, #32]
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	43db      	mvns	r3, r3
 8001c46:	401a      	ands	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6a1a      	ldr	r2, [r3, #32]
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	f003 031f 	and.w	r3, r3, #31
 8001c56:	6879      	ldr	r1, [r7, #4]
 8001c58:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	621a      	str	r2, [r3, #32]
}
 8001c62:	bf00      	nop
 8001c64:	371c      	adds	r7, #28
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b085      	sub	sp, #20
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
 8001c76:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d101      	bne.n	8001c86 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001c82:	2302      	movs	r3, #2
 8001c84:	e032      	b.n	8001cec <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2202      	movs	r2, #2
 8001c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001cbe:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	68ba      	ldr	r2, [r7, #8]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	607b      	str	r3, [r7, #4]
 8001d2a:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <MX_GPIO_Init+0x30>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	4a08      	ldr	r2, [pc, #32]	; (8001d50 <MX_GPIO_Init+0x30>)
 8001d30:	f043 0308 	orr.w	r3, r3, #8
 8001d34:	6313      	str	r3, [r2, #48]	; 0x30
 8001d36:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <MX_GPIO_Init+0x30>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	f003 0308 	and.w	r3, r3, #8
 8001d3e:	607b      	str	r3, [r7, #4]
 8001d40:	687b      	ldr	r3, [r7, #4]

}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	40023800 	.word	0x40023800

08001d54 <some_delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void some_delay()
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
	ui16 i;

	for(i = 0; i < 300; i++)
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	80fb      	strh	r3, [r7, #6]
 8001d5e:	e002      	b.n	8001d66 <some_delay+0x12>
 8001d60:	88fb      	ldrh	r3, [r7, #6]
 8001d62:	3301      	adds	r3, #1
 8001d64:	80fb      	strh	r3, [r7, #6]
 8001d66:	88fb      	ldrh	r3, [r7, #6]
 8001d68:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001d6c:	d3f8      	bcc.n	8001d60 <some_delay+0xc>
	{
		// small delay
	}
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
	...

08001d7c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0


	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001d82:	f7fe fba1 	bl	80004c8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001d86:	f000 f863 	bl	8001e50 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001d8a:	f7ff ffc9 	bl	8001d20 <MX_GPIO_Init>
	MX_TIM4_Init();
 8001d8e:	f000 f967 	bl	8002060 <MX_TIM4_Init>

	/* USER CODE BEGIN 2 */

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001d92:	2100      	movs	r1, #0
 8001d94:	4828      	ldr	r0, [pc, #160]	; (8001e38 <main+0xbc>)
 8001d96:	f7ff fab7 	bl	8001308 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001d9a:	2104      	movs	r1, #4
 8001d9c:	4826      	ldr	r0, [pc, #152]	; (8001e38 <main+0xbc>)
 8001d9e:	f7ff fab3 	bl	8001308 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001da2:	2108      	movs	r1, #8
 8001da4:	4824      	ldr	r0, [pc, #144]	; (8001e38 <main+0xbc>)
 8001da6:	f7ff faaf 	bl	8001308 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001daa:	210c      	movs	r1, #12
 8001dac:	4822      	ldr	r0, [pc, #136]	; (8001e38 <main+0xbc>)
 8001dae:	f7ff faab 	bl	8001308 <HAL_TIM_PWM_Start>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */
		for(i = 1; i <= 4; ++i)
 8001db2:	2301      	movs	r3, #1
 8001db4:	73fb      	strb	r3, [r7, #15]
 8001db6:	e03a      	b.n	8001e2e <main+0xb2>
		{
			switch (i)
 8001db8:	7bfb      	ldrb	r3, [r7, #15]
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	2b03      	cmp	r3, #3
 8001dbe:	d817      	bhi.n	8001df0 <main+0x74>
 8001dc0:	a201      	add	r2, pc, #4	; (adr r2, 8001dc8 <main+0x4c>)
 8001dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc6:	bf00      	nop
 8001dc8:	08001dd9 	.word	0x08001dd9
 8001dcc:	08001ddf 	.word	0x08001ddf
 8001dd0:	08001de5 	.word	0x08001de5
 8001dd4:	08001deb 	.word	0x08001deb
			{
			case 1:
				reg = &(TIM4->CCR1);
 8001dd8:	4b18      	ldr	r3, [pc, #96]	; (8001e3c <main+0xc0>)
 8001dda:	607b      	str	r3, [r7, #4]
				break;
 8001ddc:	e009      	b.n	8001df2 <main+0x76>
			case 2:
				reg = &(TIM4->CCR2);
 8001dde:	4b18      	ldr	r3, [pc, #96]	; (8001e40 <main+0xc4>)
 8001de0:	607b      	str	r3, [r7, #4]
				break;
 8001de2:	e006      	b.n	8001df2 <main+0x76>
			case 3:
				reg = &(TIM4->CCR3);
 8001de4:	4b17      	ldr	r3, [pc, #92]	; (8001e44 <main+0xc8>)
 8001de6:	607b      	str	r3, [r7, #4]
				break;
 8001de8:	e003      	b.n	8001df2 <main+0x76>
			case 4:
				reg = &(TIM4->CCR4);
 8001dea:	4b17      	ldr	r3, [pc, #92]	; (8001e48 <main+0xcc>)
 8001dec:	607b      	str	r3, [r7, #4]
				break;
 8001dee:	e000      	b.n	8001df2 <main+0x76>
			default:
				break;
 8001df0:	bf00      	nop
			}


			for(j = 0; j <= 2 * 65535; ++j)
 8001df2:	2300      	movs	r3, #0
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	e013      	b.n	8001e20 <main+0xa4>
			{
				if (j > 65535)
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dfe:	d307      	bcc.n	8001e10 <main+0x94>
					*reg = (2 * 65535) - j;
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	f5c3 33ff 	rsb	r3, r3, #130560	; 0x1fe00
 8001e06:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	6013      	str	r3, [r2, #0]
 8001e0e:	e002      	b.n	8001e16 <main+0x9a>
				else
					*reg = j;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	601a      	str	r2, [r3, #0]

				some_delay();
 8001e16:	f7ff ff9d 	bl	8001d54 <some_delay>
			for(j = 0; j <= 2 * 65535; ++j)
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	60bb      	str	r3, [r7, #8]
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	4a0a      	ldr	r2, [pc, #40]	; (8001e4c <main+0xd0>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d9e7      	bls.n	8001df8 <main+0x7c>
		for(i = 1; i <= 4; ++i)
 8001e28:	7bfb      	ldrb	r3, [r7, #15]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	73fb      	strb	r3, [r7, #15]
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
 8001e30:	2b04      	cmp	r3, #4
 8001e32:	d9c1      	bls.n	8001db8 <main+0x3c>
 8001e34:	e7bd      	b.n	8001db2 <main+0x36>
 8001e36:	bf00      	nop
 8001e38:	2000002c 	.word	0x2000002c
 8001e3c:	40000834 	.word	0x40000834
 8001e40:	40000838 	.word	0x40000838
 8001e44:	4000083c 	.word	0x4000083c
 8001e48:	40000840 	.word	0x40000840
 8001e4c:	0001fffe 	.word	0x0001fffe

08001e50 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b094      	sub	sp, #80	; 0x50
 8001e54:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e56:	f107 0320 	add.w	r3, r7, #32
 8001e5a:	2230      	movs	r2, #48	; 0x30
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f000 fa28 	bl	80022b4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e64:	f107 030c 	add.w	r3, r7, #12
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	60da      	str	r2, [r3, #12]
 8001e72:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001e74:	2300      	movs	r3, #0
 8001e76:	60bb      	str	r3, [r7, #8]
 8001e78:	4b28      	ldr	r3, [pc, #160]	; (8001f1c <SystemClock_Config+0xcc>)
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7c:	4a27      	ldr	r2, [pc, #156]	; (8001f1c <SystemClock_Config+0xcc>)
 8001e7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e82:	6413      	str	r3, [r2, #64]	; 0x40
 8001e84:	4b25      	ldr	r3, [pc, #148]	; (8001f1c <SystemClock_Config+0xcc>)
 8001e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8c:	60bb      	str	r3, [r7, #8]
 8001e8e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e90:	2300      	movs	r3, #0
 8001e92:	607b      	str	r3, [r7, #4]
 8001e94:	4b22      	ldr	r3, [pc, #136]	; (8001f20 <SystemClock_Config+0xd0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a21      	ldr	r2, [pc, #132]	; (8001f20 <SystemClock_Config+0xd0>)
 8001e9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e9e:	6013      	str	r3, [r2, #0]
 8001ea0:	4b1f      	ldr	r3, [pc, #124]	; (8001f20 <SystemClock_Config+0xd0>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ea8:	607b      	str	r3, [r7, #4]
 8001eaa:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001eac:	2302      	movs	r3, #2
 8001eae:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001eb4:	2310      	movs	r3, #16
 8001eb6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001ec0:	2308      	movs	r3, #8
 8001ec2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8001ec4:	23a8      	movs	r3, #168	; 0xa8
 8001ec6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ecc:	2304      	movs	r3, #4
 8001ece:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ed0:	f107 0320 	add.w	r3, r7, #32
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7fe fe15 	bl	8000b04 <HAL_RCC_OscConfig>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8001ee0:	f000 f820 	bl	8001f24 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ee4:	230f      	movs	r3, #15
 8001ee6:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eec:	2300      	movs	r3, #0
 8001eee:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ef0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ef4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ef6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001efa:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001efc:	f107 030c 	add.w	r3, r7, #12
 8001f00:	2105      	movs	r1, #5
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff f840 	bl	8000f88 <HAL_RCC_ClockConfig>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 8001f0e:	f000 f809 	bl	8001f24 <Error_Handler>
	}
}
 8001f12:	bf00      	nop
 8001f14:	3750      	adds	r7, #80	; 0x50
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40007000 	.word	0x40007000

08001f24 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
	...

08001f34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	607b      	str	r3, [r7, #4]
 8001f3e:	4b10      	ldr	r3, [pc, #64]	; (8001f80 <HAL_MspInit+0x4c>)
 8001f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f42:	4a0f      	ldr	r2, [pc, #60]	; (8001f80 <HAL_MspInit+0x4c>)
 8001f44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f48:	6453      	str	r3, [r2, #68]	; 0x44
 8001f4a:	4b0d      	ldr	r3, [pc, #52]	; (8001f80 <HAL_MspInit+0x4c>)
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f52:	607b      	str	r3, [r7, #4]
 8001f54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	603b      	str	r3, [r7, #0]
 8001f5a:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <HAL_MspInit+0x4c>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	4a08      	ldr	r2, [pc, #32]	; (8001f80 <HAL_MspInit+0x4c>)
 8001f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f64:	6413      	str	r3, [r2, #64]	; 0x40
 8001f66:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <HAL_MspInit+0x4c>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6e:	603b      	str	r3, [r7, #0]
 8001f70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	40023800 	.word	0x40023800

08001f84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f96:	e7fe      	b.n	8001f96 <HardFault_Handler+0x4>

08001f98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f9c:	e7fe      	b.n	8001f9c <MemManage_Handler+0x4>

08001f9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fa2:	e7fe      	b.n	8001fa2 <BusFault_Handler+0x4>

08001fa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fa8:	e7fe      	b.n	8001fa8 <UsageFault_Handler+0x4>

08001faa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001faa:	b480      	push	{r7}
 8001fac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fd8:	f7fe fac8 	bl	800056c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fdc:	bf00      	nop
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001fe4:	4802      	ldr	r0, [pc, #8]	; (8001ff0 <TIM4_IRQHandler+0x10>)
 8001fe6:	f7ff f9cd 	bl	8001384 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	2000002c 	.word	0x2000002c

08001ff4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ff8:	4b16      	ldr	r3, [pc, #88]	; (8002054 <SystemInit+0x60>)
 8001ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ffe:	4a15      	ldr	r2, [pc, #84]	; (8002054 <SystemInit+0x60>)
 8002000:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002004:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002008:	4b13      	ldr	r3, [pc, #76]	; (8002058 <SystemInit+0x64>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a12      	ldr	r2, [pc, #72]	; (8002058 <SystemInit+0x64>)
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002014:	4b10      	ldr	r3, [pc, #64]	; (8002058 <SystemInit+0x64>)
 8002016:	2200      	movs	r2, #0
 8002018:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800201a:	4b0f      	ldr	r3, [pc, #60]	; (8002058 <SystemInit+0x64>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a0e      	ldr	r2, [pc, #56]	; (8002058 <SystemInit+0x64>)
 8002020:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002024:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002028:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800202a:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <SystemInit+0x64>)
 800202c:	4a0b      	ldr	r2, [pc, #44]	; (800205c <SystemInit+0x68>)
 800202e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002030:	4b09      	ldr	r3, [pc, #36]	; (8002058 <SystemInit+0x64>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a08      	ldr	r2, [pc, #32]	; (8002058 <SystemInit+0x64>)
 8002036:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800203a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800203c:	4b06      	ldr	r3, [pc, #24]	; (8002058 <SystemInit+0x64>)
 800203e:	2200      	movs	r2, #0
 8002040:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002042:	4b04      	ldr	r3, [pc, #16]	; (8002054 <SystemInit+0x60>)
 8002044:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002048:	609a      	str	r2, [r3, #8]
#endif
}
 800204a:	bf00      	nop
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	e000ed00 	.word	0xe000ed00
 8002058:	40023800 	.word	0x40023800
 800205c:	24003010 	.word	0x24003010

08002060 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b08a      	sub	sp, #40	; 0x28
 8002064:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002066:	f107 0320 	add.w	r3, r7, #32
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002070:	1d3b      	adds	r3, r7, #4
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	605a      	str	r2, [r3, #4]
 8002078:	609a      	str	r2, [r3, #8]
 800207a:	60da      	str	r2, [r3, #12]
 800207c:	611a      	str	r2, [r3, #16]
 800207e:	615a      	str	r2, [r3, #20]
 8002080:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8002082:	4b32      	ldr	r3, [pc, #200]	; (800214c <MX_TIM4_Init+0xec>)
 8002084:	4a32      	ldr	r2, [pc, #200]	; (8002150 <MX_TIM4_Init+0xf0>)
 8002086:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002088:	4b30      	ldr	r3, [pc, #192]	; (800214c <MX_TIM4_Init+0xec>)
 800208a:	2200      	movs	r2, #0
 800208c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800208e:	4b2f      	ldr	r3, [pc, #188]	; (800214c <MX_TIM4_Init+0xec>)
 8002090:	2200      	movs	r2, #0
 8002092:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002094:	4b2d      	ldr	r3, [pc, #180]	; (800214c <MX_TIM4_Init+0xec>)
 8002096:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800209a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800209c:	4b2b      	ldr	r3, [pc, #172]	; (800214c <MX_TIM4_Init+0xec>)
 800209e:	2200      	movs	r2, #0
 80020a0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020a2:	4b2a      	ldr	r3, [pc, #168]	; (800214c <MX_TIM4_Init+0xec>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80020a8:	4828      	ldr	r0, [pc, #160]	; (800214c <MX_TIM4_Init+0xec>)
 80020aa:	f7ff f901 	bl	80012b0 <HAL_TIM_PWM_Init>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80020b4:	f7ff ff36 	bl	8001f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020b8:	2300      	movs	r3, #0
 80020ba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020bc:	2300      	movs	r3, #0
 80020be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80020c0:	f107 0320 	add.w	r3, r7, #32
 80020c4:	4619      	mov	r1, r3
 80020c6:	4821      	ldr	r0, [pc, #132]	; (800214c <MX_TIM4_Init+0xec>)
 80020c8:	f7ff fdd1 	bl	8001c6e <HAL_TIMEx_MasterConfigSynchronization>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80020d2:	f7ff ff27 	bl	8001f24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020d6:	2360      	movs	r3, #96	; 0x60
 80020d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020da:	2300      	movs	r3, #0
 80020dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020de:	2300      	movs	r3, #0
 80020e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020e2:	2300      	movs	r3, #0
 80020e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020e6:	1d3b      	adds	r3, r7, #4
 80020e8:	2200      	movs	r2, #0
 80020ea:	4619      	mov	r1, r3
 80020ec:	4817      	ldr	r0, [pc, #92]	; (800214c <MX_TIM4_Init+0xec>)
 80020ee:	f7ff fa51 	bl	8001594 <HAL_TIM_PWM_ConfigChannel>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80020f8:	f7ff ff14 	bl	8001f24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020fc:	1d3b      	adds	r3, r7, #4
 80020fe:	2204      	movs	r2, #4
 8002100:	4619      	mov	r1, r3
 8002102:	4812      	ldr	r0, [pc, #72]	; (800214c <MX_TIM4_Init+0xec>)
 8002104:	f7ff fa46 	bl	8001594 <HAL_TIM_PWM_ConfigChannel>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800210e:	f7ff ff09 	bl	8001f24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002112:	1d3b      	adds	r3, r7, #4
 8002114:	2208      	movs	r2, #8
 8002116:	4619      	mov	r1, r3
 8002118:	480c      	ldr	r0, [pc, #48]	; (800214c <MX_TIM4_Init+0xec>)
 800211a:	f7ff fa3b 	bl	8001594 <HAL_TIM_PWM_ConfigChannel>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8002124:	f7ff fefe 	bl	8001f24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002128:	1d3b      	adds	r3, r7, #4
 800212a:	220c      	movs	r2, #12
 800212c:	4619      	mov	r1, r3
 800212e:	4807      	ldr	r0, [pc, #28]	; (800214c <MX_TIM4_Init+0xec>)
 8002130:	f7ff fa30 	bl	8001594 <HAL_TIM_PWM_ConfigChannel>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 800213a:	f7ff fef3 	bl	8001f24 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 800213e:	4803      	ldr	r0, [pc, #12]	; (800214c <MX_TIM4_Init+0xec>)
 8002140:	f000 f830 	bl	80021a4 <HAL_TIM_MspPostInit>

}
 8002144:	bf00      	nop
 8002146:	3728      	adds	r7, #40	; 0x28
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	2000002c 	.word	0x2000002c
 8002150:	40000800 	.word	0x40000800

08002154 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a0e      	ldr	r2, [pc, #56]	; (800219c <HAL_TIM_PWM_MspInit+0x48>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d115      	bne.n	8002192 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	4b0d      	ldr	r3, [pc, #52]	; (80021a0 <HAL_TIM_PWM_MspInit+0x4c>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	4a0c      	ldr	r2, [pc, #48]	; (80021a0 <HAL_TIM_PWM_MspInit+0x4c>)
 8002170:	f043 0304 	orr.w	r3, r3, #4
 8002174:	6413      	str	r3, [r2, #64]	; 0x40
 8002176:	4b0a      	ldr	r3, [pc, #40]	; (80021a0 <HAL_TIM_PWM_MspInit+0x4c>)
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	f003 0304 	and.w	r3, r3, #4
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002182:	2200      	movs	r2, #0
 8002184:	2100      	movs	r1, #0
 8002186:	201e      	movs	r0, #30
 8002188:	f7fe faeb 	bl	8000762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800218c:	201e      	movs	r0, #30
 800218e:	f7fe fb04 	bl	800079a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002192:	bf00      	nop
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40000800 	.word	0x40000800
 80021a0:	40023800 	.word	0x40023800

080021a4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b088      	sub	sp, #32
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ac:	f107 030c 	add.w	r3, r7, #12
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	60da      	str	r2, [r3, #12]
 80021ba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a12      	ldr	r2, [pc, #72]	; (800220c <HAL_TIM_MspPostInit+0x68>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d11e      	bne.n	8002204 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	4b11      	ldr	r3, [pc, #68]	; (8002210 <HAL_TIM_MspPostInit+0x6c>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	4a10      	ldr	r2, [pc, #64]	; (8002210 <HAL_TIM_MspPostInit+0x6c>)
 80021d0:	f043 0308 	orr.w	r3, r3, #8
 80021d4:	6313      	str	r3, [r2, #48]	; 0x30
 80021d6:	4b0e      	ldr	r3, [pc, #56]	; (8002210 <HAL_TIM_MspPostInit+0x6c>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	60bb      	str	r3, [r7, #8]
 80021e0:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80021e2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80021e6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e8:	2302      	movs	r3, #2
 80021ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021f0:	2302      	movs	r3, #2
 80021f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80021f4:	2302      	movs	r3, #2
 80021f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021f8:	f107 030c 	add.w	r3, r7, #12
 80021fc:	4619      	mov	r1, r3
 80021fe:	4805      	ldr	r0, [pc, #20]	; (8002214 <HAL_TIM_MspPostInit+0x70>)
 8002200:	f7fe fae6 	bl	80007d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002204:	bf00      	nop
 8002206:	3720      	adds	r7, #32
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40000800 	.word	0x40000800
 8002210:	40023800 	.word	0x40023800
 8002214:	40020c00 	.word	0x40020c00

08002218 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002218:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002250 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800221c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800221e:	e003      	b.n	8002228 <LoopCopyDataInit>

08002220 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002220:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002222:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002224:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002226:	3104      	adds	r1, #4

08002228 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002228:	480b      	ldr	r0, [pc, #44]	; (8002258 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800222a:	4b0c      	ldr	r3, [pc, #48]	; (800225c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800222c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800222e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002230:	d3f6      	bcc.n	8002220 <CopyDataInit>
  ldr  r2, =_sbss
 8002232:	4a0b      	ldr	r2, [pc, #44]	; (8002260 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002234:	e002      	b.n	800223c <LoopFillZerobss>

08002236 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002236:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002238:	f842 3b04 	str.w	r3, [r2], #4

0800223c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800223c:	4b09      	ldr	r3, [pc, #36]	; (8002264 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800223e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002240:	d3f9      	bcc.n	8002236 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002242:	f7ff fed7 	bl	8001ff4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002246:	f000 f811 	bl	800226c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800224a:	f7ff fd97 	bl	8001d7c <main>
  bx  lr    
 800224e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002250:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002254:	080022fc 	.word	0x080022fc
  ldr  r0, =_sdata
 8002258:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800225c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002260:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002264:	2000006c 	.word	0x2000006c

08002268 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002268:	e7fe      	b.n	8002268 <ADC_IRQHandler>
	...

0800226c <__libc_init_array>:
 800226c:	b570      	push	{r4, r5, r6, lr}
 800226e:	4e0d      	ldr	r6, [pc, #52]	; (80022a4 <__libc_init_array+0x38>)
 8002270:	4c0d      	ldr	r4, [pc, #52]	; (80022a8 <__libc_init_array+0x3c>)
 8002272:	1ba4      	subs	r4, r4, r6
 8002274:	10a4      	asrs	r4, r4, #2
 8002276:	2500      	movs	r5, #0
 8002278:	42a5      	cmp	r5, r4
 800227a:	d109      	bne.n	8002290 <__libc_init_array+0x24>
 800227c:	4e0b      	ldr	r6, [pc, #44]	; (80022ac <__libc_init_array+0x40>)
 800227e:	4c0c      	ldr	r4, [pc, #48]	; (80022b0 <__libc_init_array+0x44>)
 8002280:	f000 f820 	bl	80022c4 <_init>
 8002284:	1ba4      	subs	r4, r4, r6
 8002286:	10a4      	asrs	r4, r4, #2
 8002288:	2500      	movs	r5, #0
 800228a:	42a5      	cmp	r5, r4
 800228c:	d105      	bne.n	800229a <__libc_init_array+0x2e>
 800228e:	bd70      	pop	{r4, r5, r6, pc}
 8002290:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002294:	4798      	blx	r3
 8002296:	3501      	adds	r5, #1
 8002298:	e7ee      	b.n	8002278 <__libc_init_array+0xc>
 800229a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800229e:	4798      	blx	r3
 80022a0:	3501      	adds	r5, #1
 80022a2:	e7f2      	b.n	800228a <__libc_init_array+0x1e>
 80022a4:	080022f4 	.word	0x080022f4
 80022a8:	080022f4 	.word	0x080022f4
 80022ac:	080022f4 	.word	0x080022f4
 80022b0:	080022f8 	.word	0x080022f8

080022b4 <memset>:
 80022b4:	4402      	add	r2, r0
 80022b6:	4603      	mov	r3, r0
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d100      	bne.n	80022be <memset+0xa>
 80022bc:	4770      	bx	lr
 80022be:	f803 1b01 	strb.w	r1, [r3], #1
 80022c2:	e7f9      	b.n	80022b8 <memset+0x4>

080022c4 <_init>:
 80022c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022c6:	bf00      	nop
 80022c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ca:	bc08      	pop	{r3}
 80022cc:	469e      	mov	lr, r3
 80022ce:	4770      	bx	lr

080022d0 <_fini>:
 80022d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022d2:	bf00      	nop
 80022d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022d6:	bc08      	pop	{r3}
 80022d8:	469e      	mov	lr, r3
 80022da:	4770      	bx	lr
