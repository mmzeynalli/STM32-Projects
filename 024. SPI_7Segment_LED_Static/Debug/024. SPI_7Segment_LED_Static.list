
024. SPI_7Segment_LED_Static.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b8c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001d14  08001d14  00011d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d24  08001d24  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08001d24  08001d24  00011d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001d2c  08001d2c  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d2c  08001d2c  00011d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d30  08001d30  00011d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08001d34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  20000018  08001d4c  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08001d4c  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000065f9  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001405  00000000  00000000  00026641  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000638  00000000  00000000  00027a48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000570  00000000  00000000  00028080  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f487  00000000  00000000  000285f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006328  00000000  00000000  00047a77  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bca72  00000000  00000000  0004dd9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010a811  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001750  00000000  00000000  0010a88c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001cfc 	.word	0x08001cfc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08001cfc 	.word	0x08001cfc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004cc:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <HAL_Init+0x40>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a0d      	ldr	r2, [pc, #52]	; (8000508 <HAL_Init+0x40>)
 80004d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <HAL_Init+0x40>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <HAL_Init+0x40>)
 80004de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <HAL_Init+0x40>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a07      	ldr	r2, [pc, #28]	; (8000508 <HAL_Init+0x40>)
 80004ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f0:	2003      	movs	r0, #3
 80004f2:	f000 f92f 	bl	8000754 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004f6:	2000      	movs	r0, #0
 80004f8:	f000 f808 	bl	800050c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004fc:	f001 fb1c 	bl	8001b38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40023c00 	.word	0x40023c00

0800050c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <HAL_InitTick+0x54>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <HAL_InitTick+0x58>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	4619      	mov	r1, r3
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	fbb3 f3f1 	udiv	r3, r3, r1
 8000526:	fbb2 f3f3 	udiv	r3, r2, r3
 800052a:	4618      	mov	r0, r3
 800052c:	f000 f939 	bl	80007a2 <HAL_SYSTICK_Config>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000536:	2301      	movs	r3, #1
 8000538:	e00e      	b.n	8000558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2b0f      	cmp	r3, #15
 800053e:	d80a      	bhi.n	8000556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000540:	2200      	movs	r2, #0
 8000542:	6879      	ldr	r1, [r7, #4]
 8000544:	f04f 30ff 	mov.w	r0, #4294967295
 8000548:	f000 f90f 	bl	800076a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800054c:	4a06      	ldr	r2, [pc, #24]	; (8000568 <HAL_InitTick+0x5c>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000552:	2300      	movs	r3, #0
 8000554:	e000      	b.n	8000558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000556:	2301      	movs	r3, #1
}
 8000558:	4618      	mov	r0, r3
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000014 	.word	0x20000014
 8000564:	20000004 	.word	0x20000004
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <HAL_IncTick+0x20>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	461a      	mov	r2, r3
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <HAL_IncTick+0x24>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4413      	add	r3, r2
 800057c:	4a04      	ldr	r2, [pc, #16]	; (8000590 <HAL_IncTick+0x24>)
 800057e:	6013      	str	r3, [r2, #0]
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000004 	.word	0x20000004
 8000590:	20000034 	.word	0x20000034

08000594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return uwTick;
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <HAL_GetTick+0x14>)
 800059a:	681b      	ldr	r3, [r3, #0]
}
 800059c:	4618      	mov	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000034 	.word	0x20000034

080005ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005b4:	f7ff ffee 	bl	8000594 <HAL_GetTick>
 80005b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005c4:	d005      	beq.n	80005d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <HAL_Delay+0x40>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	461a      	mov	r2, r3
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	4413      	add	r3, r2
 80005d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005d2:	bf00      	nop
 80005d4:	f7ff ffde 	bl	8000594 <HAL_GetTick>
 80005d8:	4602      	mov	r2, r0
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	1ad3      	subs	r3, r2, r3
 80005de:	68fa      	ldr	r2, [r7, #12]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d8f7      	bhi.n	80005d4 <HAL_Delay+0x28>
  {
  }
}
 80005e4:	bf00      	nop
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000004 	.word	0x20000004

080005f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f003 0307 	and.w	r3, r3, #7
 80005fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000606:	68ba      	ldr	r2, [r7, #8]
 8000608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800060c:	4013      	ands	r3, r2
 800060e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800061c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000622:	4a04      	ldr	r2, [pc, #16]	; (8000634 <__NVIC_SetPriorityGrouping+0x44>)
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	60d3      	str	r3, [r2, #12]
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800063c:	4b04      	ldr	r3, [pc, #16]	; (8000650 <__NVIC_GetPriorityGrouping+0x18>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	0a1b      	lsrs	r3, r3, #8
 8000642:	f003 0307 	and.w	r3, r3, #7
}
 8000646:	4618      	mov	r0, r3
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	6039      	str	r1, [r7, #0]
 800065e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000664:	2b00      	cmp	r3, #0
 8000666:	db0a      	blt.n	800067e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	b2da      	uxtb	r2, r3
 800066c:	490c      	ldr	r1, [pc, #48]	; (80006a0 <__NVIC_SetPriority+0x4c>)
 800066e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000672:	0112      	lsls	r2, r2, #4
 8000674:	b2d2      	uxtb	r2, r2
 8000676:	440b      	add	r3, r1
 8000678:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800067c:	e00a      	b.n	8000694 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	b2da      	uxtb	r2, r3
 8000682:	4908      	ldr	r1, [pc, #32]	; (80006a4 <__NVIC_SetPriority+0x50>)
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	f003 030f 	and.w	r3, r3, #15
 800068a:	3b04      	subs	r3, #4
 800068c:	0112      	lsls	r2, r2, #4
 800068e:	b2d2      	uxtb	r2, r2
 8000690:	440b      	add	r3, r1
 8000692:	761a      	strb	r2, [r3, #24]
}
 8000694:	bf00      	nop
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	e000e100 	.word	0xe000e100
 80006a4:	e000ed00 	.word	0xe000ed00

080006a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b089      	sub	sp, #36	; 0x24
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	f003 0307 	and.w	r3, r3, #7
 80006ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006bc:	69fb      	ldr	r3, [r7, #28]
 80006be:	f1c3 0307 	rsb	r3, r3, #7
 80006c2:	2b04      	cmp	r3, #4
 80006c4:	bf28      	it	cs
 80006c6:	2304      	movcs	r3, #4
 80006c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	3304      	adds	r3, #4
 80006ce:	2b06      	cmp	r3, #6
 80006d0:	d902      	bls.n	80006d8 <NVIC_EncodePriority+0x30>
 80006d2:	69fb      	ldr	r3, [r7, #28]
 80006d4:	3b03      	subs	r3, #3
 80006d6:	e000      	b.n	80006da <NVIC_EncodePriority+0x32>
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006dc:	f04f 32ff 	mov.w	r2, #4294967295
 80006e0:	69bb      	ldr	r3, [r7, #24]
 80006e2:	fa02 f303 	lsl.w	r3, r2, r3
 80006e6:	43da      	mvns	r2, r3
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	401a      	ands	r2, r3
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006f0:	f04f 31ff 	mov.w	r1, #4294967295
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	fa01 f303 	lsl.w	r3, r1, r3
 80006fa:	43d9      	mvns	r1, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000700:	4313      	orrs	r3, r2
         );
}
 8000702:	4618      	mov	r0, r3
 8000704:	3724      	adds	r7, #36	; 0x24
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
	...

08000710 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	3b01      	subs	r3, #1
 800071c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000720:	d301      	bcc.n	8000726 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000722:	2301      	movs	r3, #1
 8000724:	e00f      	b.n	8000746 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000726:	4a0a      	ldr	r2, [pc, #40]	; (8000750 <SysTick_Config+0x40>)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	3b01      	subs	r3, #1
 800072c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800072e:	210f      	movs	r1, #15
 8000730:	f04f 30ff 	mov.w	r0, #4294967295
 8000734:	f7ff ff8e 	bl	8000654 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000738:	4b05      	ldr	r3, [pc, #20]	; (8000750 <SysTick_Config+0x40>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800073e:	4b04      	ldr	r3, [pc, #16]	; (8000750 <SysTick_Config+0x40>)
 8000740:	2207      	movs	r2, #7
 8000742:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000744:	2300      	movs	r3, #0
}
 8000746:	4618      	mov	r0, r3
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	e000e010 	.word	0xe000e010

08000754 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f7ff ff47 	bl	80005f0 <__NVIC_SetPriorityGrouping>
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800076a:	b580      	push	{r7, lr}
 800076c:	b086      	sub	sp, #24
 800076e:	af00      	add	r7, sp, #0
 8000770:	4603      	mov	r3, r0
 8000772:	60b9      	str	r1, [r7, #8]
 8000774:	607a      	str	r2, [r7, #4]
 8000776:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800077c:	f7ff ff5c 	bl	8000638 <__NVIC_GetPriorityGrouping>
 8000780:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	68b9      	ldr	r1, [r7, #8]
 8000786:	6978      	ldr	r0, [r7, #20]
 8000788:	f7ff ff8e 	bl	80006a8 <NVIC_EncodePriority>
 800078c:	4602      	mov	r2, r0
 800078e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000792:	4611      	mov	r1, r2
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ff5d 	bl	8000654 <__NVIC_SetPriority>
}
 800079a:	bf00      	nop
 800079c:	3718      	adds	r7, #24
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b082      	sub	sp, #8
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f7ff ffb0 	bl	8000710 <SysTick_Config>
 80007b0:	4603      	mov	r3, r0
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
	...

080007bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007bc:	b480      	push	{r7}
 80007be:	b089      	sub	sp, #36	; 0x24
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80007ca:	2300      	movs	r3, #0
 80007cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
 80007d6:	e16b      	b.n	8000ab0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80007d8:	2201      	movs	r2, #1
 80007da:	69fb      	ldr	r3, [r7, #28]
 80007dc:	fa02 f303 	lsl.w	r3, r2, r3
 80007e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	697a      	ldr	r2, [r7, #20]
 80007e8:	4013      	ands	r3, r2
 80007ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80007ec:	693a      	ldr	r2, [r7, #16]
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	f040 815a 	bne.w	8000aaa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	2b02      	cmp	r3, #2
 80007fc:	d003      	beq.n	8000806 <HAL_GPIO_Init+0x4a>
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	2b12      	cmp	r3, #18
 8000804:	d123      	bne.n	800084e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	08da      	lsrs	r2, r3, #3
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	3208      	adds	r2, #8
 800080e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000812:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000814:	69fb      	ldr	r3, [r7, #28]
 8000816:	f003 0307 	and.w	r3, r3, #7
 800081a:	009b      	lsls	r3, r3, #2
 800081c:	220f      	movs	r2, #15
 800081e:	fa02 f303 	lsl.w	r3, r2, r3
 8000822:	43db      	mvns	r3, r3
 8000824:	69ba      	ldr	r2, [r7, #24]
 8000826:	4013      	ands	r3, r2
 8000828:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	691a      	ldr	r2, [r3, #16]
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	f003 0307 	and.w	r3, r3, #7
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	fa02 f303 	lsl.w	r3, r2, r3
 800083a:	69ba      	ldr	r2, [r7, #24]
 800083c:	4313      	orrs	r3, r2
 800083e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000840:	69fb      	ldr	r3, [r7, #28]
 8000842:	08da      	lsrs	r2, r3, #3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	3208      	adds	r2, #8
 8000848:	69b9      	ldr	r1, [r7, #24]
 800084a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000854:	69fb      	ldr	r3, [r7, #28]
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	2203      	movs	r2, #3
 800085a:	fa02 f303 	lsl.w	r3, r2, r3
 800085e:	43db      	mvns	r3, r3
 8000860:	69ba      	ldr	r2, [r7, #24]
 8000862:	4013      	ands	r3, r2
 8000864:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	f003 0203 	and.w	r2, r3, #3
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	fa02 f303 	lsl.w	r3, r2, r3
 8000876:	69ba      	ldr	r2, [r7, #24]
 8000878:	4313      	orrs	r3, r2
 800087a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	69ba      	ldr	r2, [r7, #24]
 8000880:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	2b01      	cmp	r3, #1
 8000888:	d00b      	beq.n	80008a2 <HAL_GPIO_Init+0xe6>
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	2b02      	cmp	r3, #2
 8000890:	d007      	beq.n	80008a2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000896:	2b11      	cmp	r3, #17
 8000898:	d003      	beq.n	80008a2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	2b12      	cmp	r3, #18
 80008a0:	d130      	bne.n	8000904 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	689b      	ldr	r3, [r3, #8]
 80008a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008a8:	69fb      	ldr	r3, [r7, #28]
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	2203      	movs	r2, #3
 80008ae:	fa02 f303 	lsl.w	r3, r2, r3
 80008b2:	43db      	mvns	r3, r3
 80008b4:	69ba      	ldr	r2, [r7, #24]
 80008b6:	4013      	ands	r3, r2
 80008b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	68da      	ldr	r2, [r3, #12]
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	fa02 f303 	lsl.w	r3, r2, r3
 80008c6:	69ba      	ldr	r2, [r7, #24]
 80008c8:	4313      	orrs	r3, r2
 80008ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	69ba      	ldr	r2, [r7, #24]
 80008d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008d8:	2201      	movs	r2, #1
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	fa02 f303 	lsl.w	r3, r2, r3
 80008e0:	43db      	mvns	r3, r3
 80008e2:	69ba      	ldr	r2, [r7, #24]
 80008e4:	4013      	ands	r3, r2
 80008e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	091b      	lsrs	r3, r3, #4
 80008ee:	f003 0201 	and.w	r2, r3, #1
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	fa02 f303 	lsl.w	r3, r2, r3
 80008f8:	69ba      	ldr	r2, [r7, #24]
 80008fa:	4313      	orrs	r3, r2
 80008fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	69ba      	ldr	r2, [r7, #24]
 8000902:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	2203      	movs	r2, #3
 8000910:	fa02 f303 	lsl.w	r3, r2, r3
 8000914:	43db      	mvns	r3, r3
 8000916:	69ba      	ldr	r2, [r7, #24]
 8000918:	4013      	ands	r3, r2
 800091a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	689a      	ldr	r2, [r3, #8]
 8000920:	69fb      	ldr	r3, [r7, #28]
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	fa02 f303 	lsl.w	r3, r2, r3
 8000928:	69ba      	ldr	r2, [r7, #24]
 800092a:	4313      	orrs	r3, r2
 800092c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	69ba      	ldr	r2, [r7, #24]
 8000932:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093c:	2b00      	cmp	r3, #0
 800093e:	f000 80b4 	beq.w	8000aaa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	4b5f      	ldr	r3, [pc, #380]	; (8000ac4 <HAL_GPIO_Init+0x308>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094a:	4a5e      	ldr	r2, [pc, #376]	; (8000ac4 <HAL_GPIO_Init+0x308>)
 800094c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000950:	6453      	str	r3, [r2, #68]	; 0x44
 8000952:	4b5c      	ldr	r3, [pc, #368]	; (8000ac4 <HAL_GPIO_Init+0x308>)
 8000954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800095e:	4a5a      	ldr	r2, [pc, #360]	; (8000ac8 <HAL_GPIO_Init+0x30c>)
 8000960:	69fb      	ldr	r3, [r7, #28]
 8000962:	089b      	lsrs	r3, r3, #2
 8000964:	3302      	adds	r3, #2
 8000966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800096a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800096c:	69fb      	ldr	r3, [r7, #28]
 800096e:	f003 0303 	and.w	r3, r3, #3
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	220f      	movs	r2, #15
 8000976:	fa02 f303 	lsl.w	r3, r2, r3
 800097a:	43db      	mvns	r3, r3
 800097c:	69ba      	ldr	r2, [r7, #24]
 800097e:	4013      	ands	r3, r2
 8000980:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a51      	ldr	r2, [pc, #324]	; (8000acc <HAL_GPIO_Init+0x310>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d02b      	beq.n	80009e2 <HAL_GPIO_Init+0x226>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4a50      	ldr	r2, [pc, #320]	; (8000ad0 <HAL_GPIO_Init+0x314>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d025      	beq.n	80009de <HAL_GPIO_Init+0x222>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4a4f      	ldr	r2, [pc, #316]	; (8000ad4 <HAL_GPIO_Init+0x318>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d01f      	beq.n	80009da <HAL_GPIO_Init+0x21e>
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4a4e      	ldr	r2, [pc, #312]	; (8000ad8 <HAL_GPIO_Init+0x31c>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d019      	beq.n	80009d6 <HAL_GPIO_Init+0x21a>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4a4d      	ldr	r2, [pc, #308]	; (8000adc <HAL_GPIO_Init+0x320>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d013      	beq.n	80009d2 <HAL_GPIO_Init+0x216>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4a4c      	ldr	r2, [pc, #304]	; (8000ae0 <HAL_GPIO_Init+0x324>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d00d      	beq.n	80009ce <HAL_GPIO_Init+0x212>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4a4b      	ldr	r2, [pc, #300]	; (8000ae4 <HAL_GPIO_Init+0x328>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d007      	beq.n	80009ca <HAL_GPIO_Init+0x20e>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4a4a      	ldr	r2, [pc, #296]	; (8000ae8 <HAL_GPIO_Init+0x32c>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d101      	bne.n	80009c6 <HAL_GPIO_Init+0x20a>
 80009c2:	2307      	movs	r3, #7
 80009c4:	e00e      	b.n	80009e4 <HAL_GPIO_Init+0x228>
 80009c6:	2308      	movs	r3, #8
 80009c8:	e00c      	b.n	80009e4 <HAL_GPIO_Init+0x228>
 80009ca:	2306      	movs	r3, #6
 80009cc:	e00a      	b.n	80009e4 <HAL_GPIO_Init+0x228>
 80009ce:	2305      	movs	r3, #5
 80009d0:	e008      	b.n	80009e4 <HAL_GPIO_Init+0x228>
 80009d2:	2304      	movs	r3, #4
 80009d4:	e006      	b.n	80009e4 <HAL_GPIO_Init+0x228>
 80009d6:	2303      	movs	r3, #3
 80009d8:	e004      	b.n	80009e4 <HAL_GPIO_Init+0x228>
 80009da:	2302      	movs	r3, #2
 80009dc:	e002      	b.n	80009e4 <HAL_GPIO_Init+0x228>
 80009de:	2301      	movs	r3, #1
 80009e0:	e000      	b.n	80009e4 <HAL_GPIO_Init+0x228>
 80009e2:	2300      	movs	r3, #0
 80009e4:	69fa      	ldr	r2, [r7, #28]
 80009e6:	f002 0203 	and.w	r2, r2, #3
 80009ea:	0092      	lsls	r2, r2, #2
 80009ec:	4093      	lsls	r3, r2
 80009ee:	69ba      	ldr	r2, [r7, #24]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80009f4:	4934      	ldr	r1, [pc, #208]	; (8000ac8 <HAL_GPIO_Init+0x30c>)
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	089b      	lsrs	r3, r3, #2
 80009fa:	3302      	adds	r3, #2
 80009fc:	69ba      	ldr	r2, [r7, #24]
 80009fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a02:	4b3a      	ldr	r3, [pc, #232]	; (8000aec <HAL_GPIO_Init+0x330>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	43db      	mvns	r3, r3
 8000a0c:	69ba      	ldr	r2, [r7, #24]
 8000a0e:	4013      	ands	r3, r2
 8000a10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d003      	beq.n	8000a26 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000a1e:	69ba      	ldr	r2, [r7, #24]
 8000a20:	693b      	ldr	r3, [r7, #16]
 8000a22:	4313      	orrs	r3, r2
 8000a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a26:	4a31      	ldr	r2, [pc, #196]	; (8000aec <HAL_GPIO_Init+0x330>)
 8000a28:	69bb      	ldr	r3, [r7, #24]
 8000a2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a2c:	4b2f      	ldr	r3, [pc, #188]	; (8000aec <HAL_GPIO_Init+0x330>)
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	43db      	mvns	r3, r3
 8000a36:	69ba      	ldr	r2, [r7, #24]
 8000a38:	4013      	ands	r3, r2
 8000a3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d003      	beq.n	8000a50 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000a48:	69ba      	ldr	r2, [r7, #24]
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a50:	4a26      	ldr	r2, [pc, #152]	; (8000aec <HAL_GPIO_Init+0x330>)
 8000a52:	69bb      	ldr	r3, [r7, #24]
 8000a54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a56:	4b25      	ldr	r3, [pc, #148]	; (8000aec <HAL_GPIO_Init+0x330>)
 8000a58:	689b      	ldr	r3, [r3, #8]
 8000a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	43db      	mvns	r3, r3
 8000a60:	69ba      	ldr	r2, [r7, #24]
 8000a62:	4013      	ands	r3, r2
 8000a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d003      	beq.n	8000a7a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000a72:	69ba      	ldr	r2, [r7, #24]
 8000a74:	693b      	ldr	r3, [r7, #16]
 8000a76:	4313      	orrs	r3, r2
 8000a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a7a:	4a1c      	ldr	r2, [pc, #112]	; (8000aec <HAL_GPIO_Init+0x330>)
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a80:	4b1a      	ldr	r3, [pc, #104]	; (8000aec <HAL_GPIO_Init+0x330>)
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	43db      	mvns	r3, r3
 8000a8a:	69ba      	ldr	r2, [r7, #24]
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d003      	beq.n	8000aa4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000a9c:	69ba      	ldr	r2, [r7, #24]
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000aa4:	4a11      	ldr	r2, [pc, #68]	; (8000aec <HAL_GPIO_Init+0x330>)
 8000aa6:	69bb      	ldr	r3, [r7, #24]
 8000aa8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	3301      	adds	r3, #1
 8000aae:	61fb      	str	r3, [r7, #28]
 8000ab0:	69fb      	ldr	r3, [r7, #28]
 8000ab2:	2b0f      	cmp	r3, #15
 8000ab4:	f67f ae90 	bls.w	80007d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ab8:	bf00      	nop
 8000aba:	3724      	adds	r7, #36	; 0x24
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40013800 	.word	0x40013800
 8000acc:	40020000 	.word	0x40020000
 8000ad0:	40020400 	.word	0x40020400
 8000ad4:	40020800 	.word	0x40020800
 8000ad8:	40020c00 	.word	0x40020c00
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	40021400 	.word	0x40021400
 8000ae4:	40021800 	.word	0x40021800
 8000ae8:	40021c00 	.word	0x40021c00
 8000aec:	40013c00 	.word	0x40013c00

08000af0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	460b      	mov	r3, r1
 8000afa:	807b      	strh	r3, [r7, #2]
 8000afc:	4613      	mov	r3, r2
 8000afe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b00:	787b      	ldrb	r3, [r7, #1]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d003      	beq.n	8000b0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b06:	887a      	ldrh	r2, [r7, #2]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b0c:	e003      	b.n	8000b16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b0e:	887b      	ldrh	r3, [r7, #2]
 8000b10:	041a      	lsls	r2, r3, #16
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	619a      	str	r2, [r3, #24]
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
	...

08000b24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d101      	bne.n	8000b36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e22d      	b.n	8000f92 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d075      	beq.n	8000c2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b42:	4ba3      	ldr	r3, [pc, #652]	; (8000dd0 <HAL_RCC_OscConfig+0x2ac>)
 8000b44:	689b      	ldr	r3, [r3, #8]
 8000b46:	f003 030c 	and.w	r3, r3, #12
 8000b4a:	2b04      	cmp	r3, #4
 8000b4c:	d00c      	beq.n	8000b68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b4e:	4ba0      	ldr	r3, [pc, #640]	; (8000dd0 <HAL_RCC_OscConfig+0x2ac>)
 8000b50:	689b      	ldr	r3, [r3, #8]
 8000b52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b56:	2b08      	cmp	r3, #8
 8000b58:	d112      	bne.n	8000b80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b5a:	4b9d      	ldr	r3, [pc, #628]	; (8000dd0 <HAL_RCC_OscConfig+0x2ac>)
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000b66:	d10b      	bne.n	8000b80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b68:	4b99      	ldr	r3, [pc, #612]	; (8000dd0 <HAL_RCC_OscConfig+0x2ac>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d05b      	beq.n	8000c2c <HAL_RCC_OscConfig+0x108>
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d157      	bne.n	8000c2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	e208      	b.n	8000f92 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b88:	d106      	bne.n	8000b98 <HAL_RCC_OscConfig+0x74>
 8000b8a:	4b91      	ldr	r3, [pc, #580]	; (8000dd0 <HAL_RCC_OscConfig+0x2ac>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a90      	ldr	r2, [pc, #576]	; (8000dd0 <HAL_RCC_OscConfig+0x2ac>)
 8000b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b94:	6013      	str	r3, [r2, #0]
 8000b96:	e01d      	b.n	8000bd4 <HAL_RCC_OscConfig+0xb0>
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ba0:	d10c      	bne.n	8000bbc <HAL_RCC_OscConfig+0x98>
 8000ba2:	4b8b      	ldr	r3, [pc, #556]	; (8000dd0 <HAL_RCC_OscConfig+0x2ac>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a8a      	ldr	r2, [pc, #552]	; (8000dd0 <HAL_RCC_OscConfig+0x2ac>)
 8000ba8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bac:	6013      	str	r3, [r2, #0]
 8000bae:	4b88      	ldr	r3, [pc, #544]	; (8000dd0 <HAL_RCC_OscConfig+0x2ac>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a87      	ldr	r2, [pc, #540]	; (8000dd0 <HAL_RCC_OscConfig+0x2ac>)
 8000bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bb8:	6013      	str	r3, [r2, #0]
 8000bba:	e00b      	b.n	8000bd4 <HAL_RCC_OscConfig+0xb0>
 8000bbc:	4b84      	ldr	r3, [pc, #528]	; (8000dd0 <HAL_RCC_OscConfig+0x2ac>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a83      	ldr	r2, [pc, #524]	; (8000dd0 <HAL_RCC_OscConfig+0x2ac>)
 8000bc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bc6:	6013      	str	r3, [r2, #0]
 8000bc8:	4b81      	ldr	r3, [pc, #516]	; (8000dd0 <HAL_RCC_OscConfig+0x2ac>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a80      	ldr	r2, [pc, #512]	; (8000dd0 <HAL_RCC_OscConfig+0x2ac>)
 8000bce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d013      	beq.n	8000c04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bdc:	f7ff fcda 	bl	8000594 <HAL_GetTick>
 8000be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000be2:	e008      	b.n	8000bf6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000be4:	f7ff fcd6 	bl	8000594 <HAL_GetTick>
 8000be8:	4602      	mov	r2, r0
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	2b64      	cmp	r3, #100	; 0x64
 8000bf0:	d901      	bls.n	8000bf6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	e1cd      	b.n	8000f92 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bf6:	4b76      	ldr	r3, [pc, #472]	; (8000dd0 <HAL_RCC_OscConfig+0x2ac>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d0f0      	beq.n	8000be4 <HAL_RCC_OscConfig+0xc0>
 8000c02:	e014      	b.n	8000c2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c04:	f7ff fcc6 	bl	8000594 <HAL_GetTick>
 8000c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c0a:	e008      	b.n	8000c1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c0c:	f7ff fcc2 	bl	8000594 <HAL_GetTick>
 8000c10:	4602      	mov	r2, r0
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	2b64      	cmp	r3, #100	; 0x64
 8000c18:	d901      	bls.n	8000c1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	e1b9      	b.n	8000f92 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c1e:	4b6c      	ldr	r3, [pc, #432]	; (8000dd0 <HAL_RCC_OscConfig+0x2ac>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d1f0      	bne.n	8000c0c <HAL_RCC_OscConfig+0xe8>
 8000c2a:	e000      	b.n	8000c2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d063      	beq.n	8000d02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c3a:	4b65      	ldr	r3, [pc, #404]	; (8000dd0 <HAL_RCC_OscConfig+0x2ac>)
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	f003 030c 	and.w	r3, r3, #12
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d00b      	beq.n	8000c5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c46:	4b62      	ldr	r3, [pc, #392]	; (8000dd0 <HAL_RCC_OscConfig+0x2ac>)
 8000c48:	689b      	ldr	r3, [r3, #8]
 8000c4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c4e:	2b08      	cmp	r3, #8
 8000c50:	d11c      	bne.n	8000c8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c52:	4b5f      	ldr	r3, [pc, #380]	; (8000dd0 <HAL_RCC_OscConfig+0x2ac>)
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d116      	bne.n	8000c8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c5e:	4b5c      	ldr	r3, [pc, #368]	; (8000dd0 <HAL_RCC_OscConfig+0x2ac>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d005      	beq.n	8000c76 <HAL_RCC_OscConfig+0x152>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	68db      	ldr	r3, [r3, #12]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d001      	beq.n	8000c76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	e18d      	b.n	8000f92 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c76:	4b56      	ldr	r3, [pc, #344]	; (8000dd0 <HAL_RCC_OscConfig+0x2ac>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	691b      	ldr	r3, [r3, #16]
 8000c82:	00db      	lsls	r3, r3, #3
 8000c84:	4952      	ldr	r1, [pc, #328]	; (8000dd0 <HAL_RCC_OscConfig+0x2ac>)
 8000c86:	4313      	orrs	r3, r2
 8000c88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c8a:	e03a      	b.n	8000d02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d020      	beq.n	8000cd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c94:	4b4f      	ldr	r3, [pc, #316]	; (8000dd4 <HAL_RCC_OscConfig+0x2b0>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c9a:	f7ff fc7b 	bl	8000594 <HAL_GetTick>
 8000c9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ca0:	e008      	b.n	8000cb4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ca2:	f7ff fc77 	bl	8000594 <HAL_GetTick>
 8000ca6:	4602      	mov	r2, r0
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	1ad3      	subs	r3, r2, r3
 8000cac:	2b02      	cmp	r3, #2
 8000cae:	d901      	bls.n	8000cb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	e16e      	b.n	8000f92 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cb4:	4b46      	ldr	r3, [pc, #280]	; (8000dd0 <HAL_RCC_OscConfig+0x2ac>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f003 0302 	and.w	r3, r3, #2
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d0f0      	beq.n	8000ca2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cc0:	4b43      	ldr	r3, [pc, #268]	; (8000dd0 <HAL_RCC_OscConfig+0x2ac>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	691b      	ldr	r3, [r3, #16]
 8000ccc:	00db      	lsls	r3, r3, #3
 8000cce:	4940      	ldr	r1, [pc, #256]	; (8000dd0 <HAL_RCC_OscConfig+0x2ac>)
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	600b      	str	r3, [r1, #0]
 8000cd4:	e015      	b.n	8000d02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cd6:	4b3f      	ldr	r3, [pc, #252]	; (8000dd4 <HAL_RCC_OscConfig+0x2b0>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cdc:	f7ff fc5a 	bl	8000594 <HAL_GetTick>
 8000ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ce2:	e008      	b.n	8000cf6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ce4:	f7ff fc56 	bl	8000594 <HAL_GetTick>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d901      	bls.n	8000cf6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	e14d      	b.n	8000f92 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cf6:	4b36      	ldr	r3, [pc, #216]	; (8000dd0 <HAL_RCC_OscConfig+0x2ac>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f003 0302 	and.w	r3, r3, #2
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d1f0      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f003 0308 	and.w	r3, r3, #8
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d030      	beq.n	8000d70 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	695b      	ldr	r3, [r3, #20]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d016      	beq.n	8000d44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d16:	4b30      	ldr	r3, [pc, #192]	; (8000dd8 <HAL_RCC_OscConfig+0x2b4>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d1c:	f7ff fc3a 	bl	8000594 <HAL_GetTick>
 8000d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d22:	e008      	b.n	8000d36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d24:	f7ff fc36 	bl	8000594 <HAL_GetTick>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d901      	bls.n	8000d36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000d32:	2303      	movs	r3, #3
 8000d34:	e12d      	b.n	8000f92 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d36:	4b26      	ldr	r3, [pc, #152]	; (8000dd0 <HAL_RCC_OscConfig+0x2ac>)
 8000d38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d3a:	f003 0302 	and.w	r3, r3, #2
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d0f0      	beq.n	8000d24 <HAL_RCC_OscConfig+0x200>
 8000d42:	e015      	b.n	8000d70 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d44:	4b24      	ldr	r3, [pc, #144]	; (8000dd8 <HAL_RCC_OscConfig+0x2b4>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d4a:	f7ff fc23 	bl	8000594 <HAL_GetTick>
 8000d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d50:	e008      	b.n	8000d64 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d52:	f7ff fc1f 	bl	8000594 <HAL_GetTick>
 8000d56:	4602      	mov	r2, r0
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	1ad3      	subs	r3, r2, r3
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	d901      	bls.n	8000d64 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000d60:	2303      	movs	r3, #3
 8000d62:	e116      	b.n	8000f92 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d64:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <HAL_RCC_OscConfig+0x2ac>)
 8000d66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d68:	f003 0302 	and.w	r3, r3, #2
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d1f0      	bne.n	8000d52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f003 0304 	and.w	r3, r3, #4
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	f000 80a0 	beq.w	8000ebe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d82:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <HAL_RCC_OscConfig+0x2ac>)
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d10f      	bne.n	8000dae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <HAL_RCC_OscConfig+0x2ac>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	4a0e      	ldr	r2, [pc, #56]	; (8000dd0 <HAL_RCC_OscConfig+0x2ac>)
 8000d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <HAL_RCC_OscConfig+0x2ac>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000daa:	2301      	movs	r3, #1
 8000dac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <HAL_RCC_OscConfig+0x2b8>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d121      	bne.n	8000dfe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <HAL_RCC_OscConfig+0x2b8>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a07      	ldr	r2, [pc, #28]	; (8000ddc <HAL_RCC_OscConfig+0x2b8>)
 8000dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000dc6:	f7ff fbe5 	bl	8000594 <HAL_GetTick>
 8000dca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dcc:	e011      	b.n	8000df2 <HAL_RCC_OscConfig+0x2ce>
 8000dce:	bf00      	nop
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	42470000 	.word	0x42470000
 8000dd8:	42470e80 	.word	0x42470e80
 8000ddc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000de0:	f7ff fbd8 	bl	8000594 <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	d901      	bls.n	8000df2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000dee:	2303      	movs	r3, #3
 8000df0:	e0cf      	b.n	8000f92 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000df2:	4b6a      	ldr	r3, [pc, #424]	; (8000f9c <HAL_RCC_OscConfig+0x478>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d0f0      	beq.n	8000de0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d106      	bne.n	8000e14 <HAL_RCC_OscConfig+0x2f0>
 8000e06:	4b66      	ldr	r3, [pc, #408]	; (8000fa0 <HAL_RCC_OscConfig+0x47c>)
 8000e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e0a:	4a65      	ldr	r2, [pc, #404]	; (8000fa0 <HAL_RCC_OscConfig+0x47c>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	6713      	str	r3, [r2, #112]	; 0x70
 8000e12:	e01c      	b.n	8000e4e <HAL_RCC_OscConfig+0x32a>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	2b05      	cmp	r3, #5
 8000e1a:	d10c      	bne.n	8000e36 <HAL_RCC_OscConfig+0x312>
 8000e1c:	4b60      	ldr	r3, [pc, #384]	; (8000fa0 <HAL_RCC_OscConfig+0x47c>)
 8000e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e20:	4a5f      	ldr	r2, [pc, #380]	; (8000fa0 <HAL_RCC_OscConfig+0x47c>)
 8000e22:	f043 0304 	orr.w	r3, r3, #4
 8000e26:	6713      	str	r3, [r2, #112]	; 0x70
 8000e28:	4b5d      	ldr	r3, [pc, #372]	; (8000fa0 <HAL_RCC_OscConfig+0x47c>)
 8000e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e2c:	4a5c      	ldr	r2, [pc, #368]	; (8000fa0 <HAL_RCC_OscConfig+0x47c>)
 8000e2e:	f043 0301 	orr.w	r3, r3, #1
 8000e32:	6713      	str	r3, [r2, #112]	; 0x70
 8000e34:	e00b      	b.n	8000e4e <HAL_RCC_OscConfig+0x32a>
 8000e36:	4b5a      	ldr	r3, [pc, #360]	; (8000fa0 <HAL_RCC_OscConfig+0x47c>)
 8000e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e3a:	4a59      	ldr	r2, [pc, #356]	; (8000fa0 <HAL_RCC_OscConfig+0x47c>)
 8000e3c:	f023 0301 	bic.w	r3, r3, #1
 8000e40:	6713      	str	r3, [r2, #112]	; 0x70
 8000e42:	4b57      	ldr	r3, [pc, #348]	; (8000fa0 <HAL_RCC_OscConfig+0x47c>)
 8000e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e46:	4a56      	ldr	r2, [pc, #344]	; (8000fa0 <HAL_RCC_OscConfig+0x47c>)
 8000e48:	f023 0304 	bic.w	r3, r3, #4
 8000e4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d015      	beq.n	8000e82 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e56:	f7ff fb9d 	bl	8000594 <HAL_GetTick>
 8000e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e5c:	e00a      	b.n	8000e74 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e5e:	f7ff fb99 	bl	8000594 <HAL_GetTick>
 8000e62:	4602      	mov	r2, r0
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d901      	bls.n	8000e74 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000e70:	2303      	movs	r3, #3
 8000e72:	e08e      	b.n	8000f92 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e74:	4b4a      	ldr	r3, [pc, #296]	; (8000fa0 <HAL_RCC_OscConfig+0x47c>)
 8000e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e78:	f003 0302 	and.w	r3, r3, #2
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d0ee      	beq.n	8000e5e <HAL_RCC_OscConfig+0x33a>
 8000e80:	e014      	b.n	8000eac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e82:	f7ff fb87 	bl	8000594 <HAL_GetTick>
 8000e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e88:	e00a      	b.n	8000ea0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e8a:	f7ff fb83 	bl	8000594 <HAL_GetTick>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d901      	bls.n	8000ea0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	e078      	b.n	8000f92 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ea0:	4b3f      	ldr	r3, [pc, #252]	; (8000fa0 <HAL_RCC_OscConfig+0x47c>)
 8000ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ea4:	f003 0302 	and.w	r3, r3, #2
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d1ee      	bne.n	8000e8a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000eac:	7dfb      	ldrb	r3, [r7, #23]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d105      	bne.n	8000ebe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000eb2:	4b3b      	ldr	r3, [pc, #236]	; (8000fa0 <HAL_RCC_OscConfig+0x47c>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb6:	4a3a      	ldr	r2, [pc, #232]	; (8000fa0 <HAL_RCC_OscConfig+0x47c>)
 8000eb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ebc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	699b      	ldr	r3, [r3, #24]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d064      	beq.n	8000f90 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000ec6:	4b36      	ldr	r3, [pc, #216]	; (8000fa0 <HAL_RCC_OscConfig+0x47c>)
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	f003 030c 	and.w	r3, r3, #12
 8000ece:	2b08      	cmp	r3, #8
 8000ed0:	d05c      	beq.n	8000f8c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	699b      	ldr	r3, [r3, #24]
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d141      	bne.n	8000f5e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000eda:	4b32      	ldr	r3, [pc, #200]	; (8000fa4 <HAL_RCC_OscConfig+0x480>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee0:	f7ff fb58 	bl	8000594 <HAL_GetTick>
 8000ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ee6:	e008      	b.n	8000efa <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ee8:	f7ff fb54 	bl	8000594 <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	d901      	bls.n	8000efa <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	e04b      	b.n	8000f92 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000efa:	4b29      	ldr	r3, [pc, #164]	; (8000fa0 <HAL_RCC_OscConfig+0x47c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d1f0      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	69da      	ldr	r2, [r3, #28]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6a1b      	ldr	r3, [r3, #32]
 8000f0e:	431a      	orrs	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f14:	019b      	lsls	r3, r3, #6
 8000f16:	431a      	orrs	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f1c:	085b      	lsrs	r3, r3, #1
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	041b      	lsls	r3, r3, #16
 8000f22:	431a      	orrs	r2, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f28:	061b      	lsls	r3, r3, #24
 8000f2a:	491d      	ldr	r1, [pc, #116]	; (8000fa0 <HAL_RCC_OscConfig+0x47c>)
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f30:	4b1c      	ldr	r3, [pc, #112]	; (8000fa4 <HAL_RCC_OscConfig+0x480>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f36:	f7ff fb2d 	bl	8000594 <HAL_GetTick>
 8000f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f3c:	e008      	b.n	8000f50 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f3e:	f7ff fb29 	bl	8000594 <HAL_GetTick>
 8000f42:	4602      	mov	r2, r0
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d901      	bls.n	8000f50 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e020      	b.n	8000f92 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f50:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <HAL_RCC_OscConfig+0x47c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d0f0      	beq.n	8000f3e <HAL_RCC_OscConfig+0x41a>
 8000f5c:	e018      	b.n	8000f90 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f5e:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <HAL_RCC_OscConfig+0x480>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f64:	f7ff fb16 	bl	8000594 <HAL_GetTick>
 8000f68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f6a:	e008      	b.n	8000f7e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f6c:	f7ff fb12 	bl	8000594 <HAL_GetTick>
 8000f70:	4602      	mov	r2, r0
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d901      	bls.n	8000f7e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e009      	b.n	8000f92 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f7e:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <HAL_RCC_OscConfig+0x47c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d1f0      	bne.n	8000f6c <HAL_RCC_OscConfig+0x448>
 8000f8a:	e001      	b.n	8000f90 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e000      	b.n	8000f92 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3718      	adds	r7, #24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40007000 	.word	0x40007000
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	42470060 	.word	0x42470060

08000fa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d101      	bne.n	8000fbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e0ca      	b.n	8001152 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000fbc:	4b67      	ldr	r3, [pc, #412]	; (800115c <HAL_RCC_ClockConfig+0x1b4>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f003 030f 	and.w	r3, r3, #15
 8000fc4:	683a      	ldr	r2, [r7, #0]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d90c      	bls.n	8000fe4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fca:	4b64      	ldr	r3, [pc, #400]	; (800115c <HAL_RCC_ClockConfig+0x1b4>)
 8000fcc:	683a      	ldr	r2, [r7, #0]
 8000fce:	b2d2      	uxtb	r2, r2
 8000fd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fd2:	4b62      	ldr	r3, [pc, #392]	; (800115c <HAL_RCC_ClockConfig+0x1b4>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f003 030f 	and.w	r3, r3, #15
 8000fda:	683a      	ldr	r2, [r7, #0]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d001      	beq.n	8000fe4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e0b6      	b.n	8001152 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f003 0302 	and.w	r3, r3, #2
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d020      	beq.n	8001032 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 0304 	and.w	r3, r3, #4
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d005      	beq.n	8001008 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000ffc:	4b58      	ldr	r3, [pc, #352]	; (8001160 <HAL_RCC_ClockConfig+0x1b8>)
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	4a57      	ldr	r2, [pc, #348]	; (8001160 <HAL_RCC_ClockConfig+0x1b8>)
 8001002:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001006:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 0308 	and.w	r3, r3, #8
 8001010:	2b00      	cmp	r3, #0
 8001012:	d005      	beq.n	8001020 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001014:	4b52      	ldr	r3, [pc, #328]	; (8001160 <HAL_RCC_ClockConfig+0x1b8>)
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	4a51      	ldr	r2, [pc, #324]	; (8001160 <HAL_RCC_ClockConfig+0x1b8>)
 800101a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800101e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001020:	4b4f      	ldr	r3, [pc, #316]	; (8001160 <HAL_RCC_ClockConfig+0x1b8>)
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	494c      	ldr	r1, [pc, #304]	; (8001160 <HAL_RCC_ClockConfig+0x1b8>)
 800102e:	4313      	orrs	r3, r2
 8001030:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	2b00      	cmp	r3, #0
 800103c:	d044      	beq.n	80010c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d107      	bne.n	8001056 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001046:	4b46      	ldr	r3, [pc, #280]	; (8001160 <HAL_RCC_ClockConfig+0x1b8>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d119      	bne.n	8001086 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e07d      	b.n	8001152 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	2b02      	cmp	r3, #2
 800105c:	d003      	beq.n	8001066 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001062:	2b03      	cmp	r3, #3
 8001064:	d107      	bne.n	8001076 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001066:	4b3e      	ldr	r3, [pc, #248]	; (8001160 <HAL_RCC_ClockConfig+0x1b8>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d109      	bne.n	8001086 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e06d      	b.n	8001152 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001076:	4b3a      	ldr	r3, [pc, #232]	; (8001160 <HAL_RCC_ClockConfig+0x1b8>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	2b00      	cmp	r3, #0
 8001080:	d101      	bne.n	8001086 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e065      	b.n	8001152 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001086:	4b36      	ldr	r3, [pc, #216]	; (8001160 <HAL_RCC_ClockConfig+0x1b8>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	f023 0203 	bic.w	r2, r3, #3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	4933      	ldr	r1, [pc, #204]	; (8001160 <HAL_RCC_ClockConfig+0x1b8>)
 8001094:	4313      	orrs	r3, r2
 8001096:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001098:	f7ff fa7c 	bl	8000594 <HAL_GetTick>
 800109c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800109e:	e00a      	b.n	80010b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010a0:	f7ff fa78 	bl	8000594 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d901      	bls.n	80010b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e04d      	b.n	8001152 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010b6:	4b2a      	ldr	r3, [pc, #168]	; (8001160 <HAL_RCC_ClockConfig+0x1b8>)
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f003 020c 	and.w	r2, r3, #12
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d1eb      	bne.n	80010a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010c8:	4b24      	ldr	r3, [pc, #144]	; (800115c <HAL_RCC_ClockConfig+0x1b4>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 030f 	and.w	r3, r3, #15
 80010d0:	683a      	ldr	r2, [r7, #0]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d20c      	bcs.n	80010f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010d6:	4b21      	ldr	r3, [pc, #132]	; (800115c <HAL_RCC_ClockConfig+0x1b4>)
 80010d8:	683a      	ldr	r2, [r7, #0]
 80010da:	b2d2      	uxtb	r2, r2
 80010dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010de:	4b1f      	ldr	r3, [pc, #124]	; (800115c <HAL_RCC_ClockConfig+0x1b4>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 030f 	and.w	r3, r3, #15
 80010e6:	683a      	ldr	r2, [r7, #0]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d001      	beq.n	80010f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e030      	b.n	8001152 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 0304 	and.w	r3, r3, #4
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d008      	beq.n	800110e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010fc:	4b18      	ldr	r3, [pc, #96]	; (8001160 <HAL_RCC_ClockConfig+0x1b8>)
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	4915      	ldr	r1, [pc, #84]	; (8001160 <HAL_RCC_ClockConfig+0x1b8>)
 800110a:	4313      	orrs	r3, r2
 800110c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0308 	and.w	r3, r3, #8
 8001116:	2b00      	cmp	r3, #0
 8001118:	d009      	beq.n	800112e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800111a:	4b11      	ldr	r3, [pc, #68]	; (8001160 <HAL_RCC_ClockConfig+0x1b8>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	691b      	ldr	r3, [r3, #16]
 8001126:	00db      	lsls	r3, r3, #3
 8001128:	490d      	ldr	r1, [pc, #52]	; (8001160 <HAL_RCC_ClockConfig+0x1b8>)
 800112a:	4313      	orrs	r3, r2
 800112c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800112e:	f000 f81d 	bl	800116c <HAL_RCC_GetSysClockFreq>
 8001132:	4601      	mov	r1, r0
 8001134:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <HAL_RCC_ClockConfig+0x1b8>)
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	091b      	lsrs	r3, r3, #4
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	4a09      	ldr	r2, [pc, #36]	; (8001164 <HAL_RCC_ClockConfig+0x1bc>)
 8001140:	5cd3      	ldrb	r3, [r2, r3]
 8001142:	fa21 f303 	lsr.w	r3, r1, r3
 8001146:	4a08      	ldr	r2, [pc, #32]	; (8001168 <HAL_RCC_ClockConfig+0x1c0>)
 8001148:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800114a:	2000      	movs	r0, #0
 800114c:	f7ff f9de 	bl	800050c <HAL_InitTick>

  return HAL_OK;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40023c00 	.word	0x40023c00
 8001160:	40023800 	.word	0x40023800
 8001164:	08001d14 	.word	0x08001d14
 8001168:	20000014 	.word	0x20000014

0800116c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800116c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001172:	2300      	movs	r3, #0
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	2300      	movs	r3, #0
 800117c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800117e:	2300      	movs	r3, #0
 8001180:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001182:	4b50      	ldr	r3, [pc, #320]	; (80012c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f003 030c 	and.w	r3, r3, #12
 800118a:	2b04      	cmp	r3, #4
 800118c:	d007      	beq.n	800119e <HAL_RCC_GetSysClockFreq+0x32>
 800118e:	2b08      	cmp	r3, #8
 8001190:	d008      	beq.n	80011a4 <HAL_RCC_GetSysClockFreq+0x38>
 8001192:	2b00      	cmp	r3, #0
 8001194:	f040 808d 	bne.w	80012b2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001198:	4b4b      	ldr	r3, [pc, #300]	; (80012c8 <HAL_RCC_GetSysClockFreq+0x15c>)
 800119a:	60bb      	str	r3, [r7, #8]
       break;
 800119c:	e08c      	b.n	80012b8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800119e:	4b4b      	ldr	r3, [pc, #300]	; (80012cc <HAL_RCC_GetSysClockFreq+0x160>)
 80011a0:	60bb      	str	r3, [r7, #8]
      break;
 80011a2:	e089      	b.n	80012b8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011a4:	4b47      	ldr	r3, [pc, #284]	; (80012c4 <HAL_RCC_GetSysClockFreq+0x158>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011ac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80011ae:	4b45      	ldr	r3, [pc, #276]	; (80012c4 <HAL_RCC_GetSysClockFreq+0x158>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d023      	beq.n	8001202 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011ba:	4b42      	ldr	r3, [pc, #264]	; (80012c4 <HAL_RCC_GetSysClockFreq+0x158>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	099b      	lsrs	r3, r3, #6
 80011c0:	f04f 0400 	mov.w	r4, #0
 80011c4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80011c8:	f04f 0200 	mov.w	r2, #0
 80011cc:	ea03 0501 	and.w	r5, r3, r1
 80011d0:	ea04 0602 	and.w	r6, r4, r2
 80011d4:	4a3d      	ldr	r2, [pc, #244]	; (80012cc <HAL_RCC_GetSysClockFreq+0x160>)
 80011d6:	fb02 f106 	mul.w	r1, r2, r6
 80011da:	2200      	movs	r2, #0
 80011dc:	fb02 f205 	mul.w	r2, r2, r5
 80011e0:	440a      	add	r2, r1
 80011e2:	493a      	ldr	r1, [pc, #232]	; (80012cc <HAL_RCC_GetSysClockFreq+0x160>)
 80011e4:	fba5 0101 	umull	r0, r1, r5, r1
 80011e8:	1853      	adds	r3, r2, r1
 80011ea:	4619      	mov	r1, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f04f 0400 	mov.w	r4, #0
 80011f2:	461a      	mov	r2, r3
 80011f4:	4623      	mov	r3, r4
 80011f6:	f7fe ffe7 	bl	80001c8 <__aeabi_uldivmod>
 80011fa:	4603      	mov	r3, r0
 80011fc:	460c      	mov	r4, r1
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	e049      	b.n	8001296 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001202:	4b30      	ldr	r3, [pc, #192]	; (80012c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	099b      	lsrs	r3, r3, #6
 8001208:	f04f 0400 	mov.w	r4, #0
 800120c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001210:	f04f 0200 	mov.w	r2, #0
 8001214:	ea03 0501 	and.w	r5, r3, r1
 8001218:	ea04 0602 	and.w	r6, r4, r2
 800121c:	4629      	mov	r1, r5
 800121e:	4632      	mov	r2, r6
 8001220:	f04f 0300 	mov.w	r3, #0
 8001224:	f04f 0400 	mov.w	r4, #0
 8001228:	0154      	lsls	r4, r2, #5
 800122a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800122e:	014b      	lsls	r3, r1, #5
 8001230:	4619      	mov	r1, r3
 8001232:	4622      	mov	r2, r4
 8001234:	1b49      	subs	r1, r1, r5
 8001236:	eb62 0206 	sbc.w	r2, r2, r6
 800123a:	f04f 0300 	mov.w	r3, #0
 800123e:	f04f 0400 	mov.w	r4, #0
 8001242:	0194      	lsls	r4, r2, #6
 8001244:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001248:	018b      	lsls	r3, r1, #6
 800124a:	1a5b      	subs	r3, r3, r1
 800124c:	eb64 0402 	sbc.w	r4, r4, r2
 8001250:	f04f 0100 	mov.w	r1, #0
 8001254:	f04f 0200 	mov.w	r2, #0
 8001258:	00e2      	lsls	r2, r4, #3
 800125a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800125e:	00d9      	lsls	r1, r3, #3
 8001260:	460b      	mov	r3, r1
 8001262:	4614      	mov	r4, r2
 8001264:	195b      	adds	r3, r3, r5
 8001266:	eb44 0406 	adc.w	r4, r4, r6
 800126a:	f04f 0100 	mov.w	r1, #0
 800126e:	f04f 0200 	mov.w	r2, #0
 8001272:	02a2      	lsls	r2, r4, #10
 8001274:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001278:	0299      	lsls	r1, r3, #10
 800127a:	460b      	mov	r3, r1
 800127c:	4614      	mov	r4, r2
 800127e:	4618      	mov	r0, r3
 8001280:	4621      	mov	r1, r4
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f04f 0400 	mov.w	r4, #0
 8001288:	461a      	mov	r2, r3
 800128a:	4623      	mov	r3, r4
 800128c:	f7fe ff9c 	bl	80001c8 <__aeabi_uldivmod>
 8001290:	4603      	mov	r3, r0
 8001292:	460c      	mov	r4, r1
 8001294:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001296:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	0c1b      	lsrs	r3, r3, #16
 800129c:	f003 0303 	and.w	r3, r3, #3
 80012a0:	3301      	adds	r3, #1
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ae:	60bb      	str	r3, [r7, #8]
      break;
 80012b0:	e002      	b.n	80012b8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80012b2:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80012b4:	60bb      	str	r3, [r7, #8]
      break;
 80012b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012b8:	68bb      	ldr	r3, [r7, #8]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800
 80012c8:	00f42400 	.word	0x00f42400
 80012cc:	017d7840 	.word	0x017d7840

080012d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d101      	bne.n	80012e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e056      	b.n	8001390 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d106      	bne.n	8001302 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f000 fbd3 	bl	8001aa8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2202      	movs	r2, #2
 8001306:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001318:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685a      	ldr	r2, [r3, #4]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	431a      	orrs	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	431a      	orrs	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	431a      	orrs	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	695b      	ldr	r3, [r3, #20]
 8001334:	431a      	orrs	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800133e:	431a      	orrs	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	69db      	ldr	r3, [r3, #28]
 8001344:	431a      	orrs	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a1b      	ldr	r3, [r3, #32]
 800134a:	ea42 0103 	orr.w	r1, r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	430a      	orrs	r2, r1
 8001358:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	0c1b      	lsrs	r3, r3, #16
 8001360:	f003 0104 	and.w	r1, r3, #4
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	430a      	orrs	r2, r1
 800136e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	69da      	ldr	r2, [r3, #28]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800137e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2201      	movs	r2, #1
 800138a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800138e:	2300      	movs	r3, #0
}
 8001390:	4618      	mov	r0, r3
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b088      	sub	sp, #32
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	603b      	str	r3, [r7, #0]
 80013a4:	4613      	mov	r3, r2
 80013a6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80013a8:	2300      	movs	r3, #0
 80013aa:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d101      	bne.n	80013ba <HAL_SPI_Transmit+0x22>
 80013b6:	2302      	movs	r3, #2
 80013b8:	e11e      	b.n	80015f8 <HAL_SPI_Transmit+0x260>
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	2201      	movs	r2, #1
 80013be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80013c2:	f7ff f8e7 	bl	8000594 <HAL_GetTick>
 80013c6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80013c8:	88fb      	ldrh	r3, [r7, #6]
 80013ca:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d002      	beq.n	80013de <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80013d8:	2302      	movs	r3, #2
 80013da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80013dc:	e103      	b.n	80015e6 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d002      	beq.n	80013ea <HAL_SPI_Transmit+0x52>
 80013e4:	88fb      	ldrh	r3, [r7, #6]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d102      	bne.n	80013f0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	77fb      	strb	r3, [r7, #31]
    goto error;
 80013ee:	e0fa      	b.n	80015e6 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2203      	movs	r2, #3
 80013f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2200      	movs	r2, #0
 80013fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	68ba      	ldr	r2, [r7, #8]
 8001402:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	88fa      	ldrh	r2, [r7, #6]
 8001408:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	88fa      	ldrh	r2, [r7, #6]
 800140e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2200      	movs	r2, #0
 8001414:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2200      	movs	r2, #0
 800141a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2200      	movs	r2, #0
 8001420:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2200      	movs	r2, #0
 8001426:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2200      	movs	r2, #0
 800142c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001436:	d107      	bne.n	8001448 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001446:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001452:	2b40      	cmp	r3, #64	; 0x40
 8001454:	d007      	beq.n	8001466 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001464:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800146e:	d14b      	bne.n	8001508 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d002      	beq.n	800147e <HAL_SPI_Transmit+0xe6>
 8001478:	8afb      	ldrh	r3, [r7, #22]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d13e      	bne.n	80014fc <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	881a      	ldrh	r2, [r3, #0]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	1c9a      	adds	r2, r3, #2
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001498:	b29b      	uxth	r3, r3
 800149a:	3b01      	subs	r3, #1
 800149c:	b29a      	uxth	r2, r3
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80014a2:	e02b      	b.n	80014fc <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d112      	bne.n	80014d8 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	881a      	ldrh	r2, [r3, #0]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	1c9a      	adds	r2, r3, #2
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	3b01      	subs	r3, #1
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	86da      	strh	r2, [r3, #54]	; 0x36
 80014d6:	e011      	b.n	80014fc <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80014d8:	f7ff f85c 	bl	8000594 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	683a      	ldr	r2, [r7, #0]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d803      	bhi.n	80014f0 <HAL_SPI_Transmit+0x158>
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ee:	d102      	bne.n	80014f6 <HAL_SPI_Transmit+0x15e>
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d102      	bne.n	80014fc <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80014fa:	e074      	b.n	80015e6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001500:	b29b      	uxth	r3, r3
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1ce      	bne.n	80014a4 <HAL_SPI_Transmit+0x10c>
 8001506:	e04c      	b.n	80015a2 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d002      	beq.n	8001516 <HAL_SPI_Transmit+0x17e>
 8001510:	8afb      	ldrh	r3, [r7, #22]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d140      	bne.n	8001598 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	330c      	adds	r3, #12
 8001520:	7812      	ldrb	r2, [r2, #0]
 8001522:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001528:	1c5a      	adds	r2, r3, #1
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001532:	b29b      	uxth	r3, r3
 8001534:	3b01      	subs	r3, #1
 8001536:	b29a      	uxth	r2, r3
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800153c:	e02c      	b.n	8001598 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	2b02      	cmp	r3, #2
 800154a:	d113      	bne.n	8001574 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	330c      	adds	r3, #12
 8001556:	7812      	ldrb	r2, [r2, #0]
 8001558:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	1c5a      	adds	r2, r3, #1
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001568:	b29b      	uxth	r3, r3
 800156a:	3b01      	subs	r3, #1
 800156c:	b29a      	uxth	r2, r3
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	86da      	strh	r2, [r3, #54]	; 0x36
 8001572:	e011      	b.n	8001598 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001574:	f7ff f80e 	bl	8000594 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	429a      	cmp	r2, r3
 8001582:	d803      	bhi.n	800158c <HAL_SPI_Transmit+0x1f4>
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800158a:	d102      	bne.n	8001592 <HAL_SPI_Transmit+0x1fa>
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d102      	bne.n	8001598 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001596:	e026      	b.n	80015e6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800159c:	b29b      	uxth	r3, r3
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1cd      	bne.n	800153e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	6839      	ldr	r1, [r7, #0]
 80015a6:	68f8      	ldr	r0, [r7, #12]
 80015a8:	f000 f894 	bl	80016d4 <SPI_EndRxTxTransaction>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d002      	beq.n	80015b8 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2220      	movs	r2, #32
 80015b6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d10a      	bne.n	80015d6 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80015c0:	2300      	movs	r3, #0
 80015c2:	613b      	str	r3, [r7, #16]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d002      	beq.n	80015e4 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	77fb      	strb	r3, [r7, #31]
 80015e2:	e000      	b.n	80015e6 <HAL_SPI_Transmit+0x24e>
  }

error:
 80015e4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	2201      	movs	r2, #1
 80015ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80015f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3720      	adds	r7, #32
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	603b      	str	r3, [r7, #0]
 800160c:	4613      	mov	r3, r2
 800160e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001610:	e04c      	b.n	80016ac <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001618:	d048      	beq.n	80016ac <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800161a:	f7fe ffbb 	bl	8000594 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	429a      	cmp	r2, r3
 8001628:	d902      	bls.n	8001630 <SPI_WaitFlagStateUntilTimeout+0x30>
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d13d      	bne.n	80016ac <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800163e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001648:	d111      	bne.n	800166e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001652:	d004      	beq.n	800165e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800165c:	d107      	bne.n	800166e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800166c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001676:	d10f      	bne.n	8001698 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001696:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2201      	movs	r2, #1
 800169c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e00f      	b.n	80016cc <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	689a      	ldr	r2, [r3, #8]
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	4013      	ands	r3, r2
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	bf0c      	ite	eq
 80016bc:	2301      	moveq	r3, #1
 80016be:	2300      	movne	r3, #0
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	461a      	mov	r2, r3
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d1a3      	bne.n	8001612 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3710      	adds	r7, #16
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b088      	sub	sp, #32
 80016d8:	af02      	add	r7, sp, #8
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80016e0:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <SPI_EndRxTxTransaction+0x7c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a1b      	ldr	r2, [pc, #108]	; (8001754 <SPI_EndRxTxTransaction+0x80>)
 80016e6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ea:	0d5b      	lsrs	r3, r3, #21
 80016ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016f0:	fb02 f303 	mul.w	r3, r2, r3
 80016f4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80016fe:	d112      	bne.n	8001726 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	2200      	movs	r2, #0
 8001708:	2180      	movs	r1, #128	; 0x80
 800170a:	68f8      	ldr	r0, [r7, #12]
 800170c:	f7ff ff78 	bl	8001600 <SPI_WaitFlagStateUntilTimeout>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d016      	beq.n	8001744 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800171a:	f043 0220 	orr.w	r2, r3, #32
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e00f      	b.n	8001746 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d00a      	beq.n	8001742 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	3b01      	subs	r3, #1
 8001730:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800173c:	2b80      	cmp	r3, #128	; 0x80
 800173e:	d0f2      	beq.n	8001726 <SPI_EndRxTxTransaction+0x52>
 8001740:	e000      	b.n	8001744 <SPI_EndRxTxTransaction+0x70>
        break;
 8001742:	bf00      	nop
  }

  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000014 	.word	0x20000014
 8001754:	165e9f81 	.word	0x165e9f81

08001758 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b088      	sub	sp, #32
 800175c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175e:	f107 030c 	add.w	r3, r7, #12
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
 8001768:	609a      	str	r2, [r3, #8]
 800176a:	60da      	str	r2, [r3, #12]
 800176c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	4b1f      	ldr	r3, [pc, #124]	; (80017f0 <MX_GPIO_Init+0x98>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	4a1e      	ldr	r2, [pc, #120]	; (80017f0 <MX_GPIO_Init+0x98>)
 8001778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800177c:	6313      	str	r3, [r2, #48]	; 0x30
 800177e:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <MX_GPIO_Init+0x98>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	607b      	str	r3, [r7, #4]
 800178e:	4b18      	ldr	r3, [pc, #96]	; (80017f0 <MX_GPIO_Init+0x98>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	4a17      	ldr	r2, [pc, #92]	; (80017f0 <MX_GPIO_Init+0x98>)
 8001794:	f043 0304 	orr.w	r3, r3, #4
 8001798:	6313      	str	r3, [r2, #48]	; 0x30
 800179a:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <MX_GPIO_Init+0x98>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	f003 0304 	and.w	r3, r3, #4
 80017a2:	607b      	str	r3, [r7, #4]
 80017a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	603b      	str	r3, [r7, #0]
 80017aa:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <MX_GPIO_Init+0x98>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	4a10      	ldr	r2, [pc, #64]	; (80017f0 <MX_GPIO_Init+0x98>)
 80017b0:	f043 0308 	orr.w	r3, r3, #8
 80017b4:	6313      	str	r3, [r2, #48]	; 0x30
 80017b6:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <MX_GPIO_Init+0x98>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	f003 0308 	and.w	r3, r3, #8
 80017be:	603b      	str	r3, [r7, #0]
 80017c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_SS_GPIO_Port, SPI3_SS_Pin, GPIO_PIN_RESET);
 80017c2:	2200      	movs	r2, #0
 80017c4:	2101      	movs	r1, #1
 80017c6:	480b      	ldr	r0, [pc, #44]	; (80017f4 <MX_GPIO_Init+0x9c>)
 80017c8:	f7ff f992 	bl	8000af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_SS_Pin;
 80017cc:	2301      	movs	r3, #1
 80017ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d0:	2301      	movs	r3, #1
 80017d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d8:	2300      	movs	r3, #0
 80017da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI3_SS_GPIO_Port, &GPIO_InitStruct);
 80017dc:	f107 030c 	add.w	r3, r7, #12
 80017e0:	4619      	mov	r1, r3
 80017e2:	4804      	ldr	r0, [pc, #16]	; (80017f4 <MX_GPIO_Init+0x9c>)
 80017e4:	f7fe ffea 	bl	80007bc <HAL_GPIO_Init>

}
 80017e8:	bf00      	nop
 80017ea:	3720      	adds	r7, #32
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40020c00 	.word	0x40020c00

080017f8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0


	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80017fe:	f7fe fe63 	bl	80004c8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001802:	f000 f81b 	bl	800183c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001806:	f7ff ffa7 	bl	8001758 <MX_GPIO_Init>
	MX_SPI3_Init();
 800180a:	f000 f917 	bl	8001a3c <MX_SPI3_Init>
	/* USER CODE BEGIN 2 */

	segdisp_init(true, true);
 800180e:	2101      	movs	r1, #1
 8001810:	2001      	movs	r0, #1
 8001812:	f000 f885 	bl	8001920 <segdisp_init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */
		for (i = 0; i < 10; ++i)
 8001816:	2300      	movs	r3, #0
 8001818:	71fb      	strb	r3, [r7, #7]
 800181a:	e00a      	b.n	8001832 <main+0x3a>
		{
			segdisp_show_digit(i);
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	4618      	mov	r0, r3
 8001820:	f000 f89c 	bl	800195c <segdisp_show_digit>
			HAL_Delay(1000);
 8001824:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001828:	f7fe fec0 	bl	80005ac <HAL_Delay>
		for (i = 0; i < 10; ++i)
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	3301      	adds	r3, #1
 8001830:	71fb      	strb	r3, [r7, #7]
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	2b09      	cmp	r3, #9
 8001836:	d9f1      	bls.n	800181c <main+0x24>
 8001838:	e7ed      	b.n	8001816 <main+0x1e>
	...

0800183c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b094      	sub	sp, #80	; 0x50
 8001840:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001842:	f107 0320 	add.w	r3, r7, #32
 8001846:	2230      	movs	r2, #48	; 0x30
 8001848:	2100      	movs	r1, #0
 800184a:	4618      	mov	r0, r3
 800184c:	f000 fa4e 	bl	8001cec <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001850:	f107 030c 	add.w	r3, r7, #12
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001860:	2300      	movs	r3, #0
 8001862:	60bb      	str	r3, [r7, #8]
 8001864:	4b28      	ldr	r3, [pc, #160]	; (8001908 <SystemClock_Config+0xcc>)
 8001866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001868:	4a27      	ldr	r2, [pc, #156]	; (8001908 <SystemClock_Config+0xcc>)
 800186a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800186e:	6413      	str	r3, [r2, #64]	; 0x40
 8001870:	4b25      	ldr	r3, [pc, #148]	; (8001908 <SystemClock_Config+0xcc>)
 8001872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800187c:	2300      	movs	r3, #0
 800187e:	607b      	str	r3, [r7, #4]
 8001880:	4b22      	ldr	r3, [pc, #136]	; (800190c <SystemClock_Config+0xd0>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a21      	ldr	r2, [pc, #132]	; (800190c <SystemClock_Config+0xd0>)
 8001886:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800188a:	6013      	str	r3, [r2, #0]
 800188c:	4b1f      	ldr	r3, [pc, #124]	; (800190c <SystemClock_Config+0xd0>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001898:	2302      	movs	r3, #2
 800189a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800189c:	2301      	movs	r3, #1
 800189e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018a0:	2310      	movs	r3, #16
 80018a2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018a4:	2302      	movs	r3, #2
 80018a6:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018a8:	2300      	movs	r3, #0
 80018aa:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80018ac:	2308      	movs	r3, #8
 80018ae:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80018b0:	23a8      	movs	r3, #168	; 0xa8
 80018b2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018b4:	2302      	movs	r3, #2
 80018b6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80018b8:	2304      	movs	r3, #4
 80018ba:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018bc:	f107 0320 	add.w	r3, r7, #32
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff f92f 	bl	8000b24 <HAL_RCC_OscConfig>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <SystemClock_Config+0x94>
	{
		Error_Handler();
 80018cc:	f000 f820 	bl	8001910 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018d0:	230f      	movs	r3, #15
 80018d2:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018d4:	2302      	movs	r3, #2
 80018d6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80018e0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018e6:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018e8:	f107 030c 	add.w	r3, r7, #12
 80018ec:	2105      	movs	r1, #5
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff fb5a 	bl	8000fa8 <HAL_RCC_ClockConfig>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <SystemClock_Config+0xc2>
	{
		Error_Handler();
 80018fa:	f000 f809 	bl	8001910 <Error_Handler>
	}
}
 80018fe:	bf00      	nop
 8001900:	3750      	adds	r7, #80	; 0x50
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40023800 	.word	0x40023800
 800190c:	40007000 	.word	0x40007000

08001910 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
	...

08001920 <segdisp_init>:
bool disp_logic;
bool q0_to_seg_a;


void segdisp_init(bool is_common_anode, bool seg_a_is_connected_to_q0)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	460a      	mov	r2, r1
 800192a:	71fb      	strb	r3, [r7, #7]
 800192c:	4613      	mov	r3, r2
 800192e:	71bb      	strb	r3, [r7, #6]
	disp_logic = is_common_anode;
 8001930:	4a07      	ldr	r2, [pc, #28]	; (8001950 <segdisp_init+0x30>)
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	7013      	strb	r3, [r2, #0]
	q0_to_seg_a = seg_a_is_connected_to_q0;
 8001936:	4a07      	ldr	r2, [pc, #28]	; (8001954 <segdisp_init+0x34>)
 8001938:	79bb      	ldrb	r3, [r7, #6]
 800193a:	7013      	strb	r3, [r2, #0]

	cs_set();
 800193c:	2200      	movs	r2, #0
 800193e:	2101      	movs	r1, #1
 8001940:	4805      	ldr	r0, [pc, #20]	; (8001958 <segdisp_init+0x38>)
 8001942:	f7ff f8d5 	bl	8000af0 <HAL_GPIO_WritePin>
}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20000038 	.word	0x20000038
 8001954:	20000039 	.word	0x20000039
 8001958:	40020c00 	.word	0x40020c00

0800195c <segdisp_show_digit>:

void segdisp_show_digit(uint8_t digit)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	71fb      	strb	r3, [r7, #7]

	uint8_t dt = digits[digit];
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	4a17      	ldr	r2, [pc, #92]	; (80019c8 <segdisp_show_digit+0x6c>)
 800196a:	5cd3      	ldrb	r3, [r2, r3]
 800196c:	73fb      	strb	r3, [r7, #15]

	if (disp_logic == common_anode)
 800196e:	4b17      	ldr	r3, [pc, #92]	; (80019cc <segdisp_show_digit+0x70>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d002      	beq.n	800197c <segdisp_show_digit+0x20>
		dt = ~dt;
 8001976:	7bfb      	ldrb	r3, [r7, #15]
 8001978:	43db      	mvns	r3, r3
 800197a:	73fb      	strb	r3, [r7, #15]

	if (q0_to_seg_a != true)
 800197c:	4b14      	ldr	r3, [pc, #80]	; (80019d0 <segdisp_show_digit+0x74>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	f083 0301 	eor.w	r3, r3, #1
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d005      	beq.n	8001996 <segdisp_show_digit+0x3a>
		dt = reverse_bits(dt);
 800198a:	7bfb      	ldrb	r3, [r7, #15]
 800198c:	4618      	mov	r0, r3
 800198e:	f000 f825 	bl	80019dc <reverse_bits>
 8001992:	4603      	mov	r3, r0
 8001994:	73fb      	strb	r3, [r7, #15]

	uint8_t tx_buff[] = {dt};
 8001996:	7bfb      	ldrb	r3, [r7, #15]
 8001998:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&hspi3, (uint8_t *) tx_buff, 1, 1000);
 800199a:	f107 010c 	add.w	r1, r7, #12
 800199e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019a2:	2201      	movs	r2, #1
 80019a4:	480b      	ldr	r0, [pc, #44]	; (80019d4 <segdisp_show_digit+0x78>)
 80019a6:	f7ff fcf7 	bl	8001398 <HAL_SPI_Transmit>
	cs_tick();
 80019aa:	2201      	movs	r2, #1
 80019ac:	2101      	movs	r1, #1
 80019ae:	480a      	ldr	r0, [pc, #40]	; (80019d8 <segdisp_show_digit+0x7c>)
 80019b0:	f7ff f89e 	bl	8000af0 <HAL_GPIO_WritePin>
 80019b4:	2200      	movs	r2, #0
 80019b6:	2101      	movs	r1, #1
 80019b8:	4807      	ldr	r0, [pc, #28]	; (80019d8 <segdisp_show_digit+0x7c>)
 80019ba:	f7ff f899 	bl	8000af0 <HAL_GPIO_WritePin>
}
 80019be:	bf00      	nop
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000008 	.word	0x20000008
 80019cc:	20000038 	.word	0x20000038
 80019d0:	20000039 	.word	0x20000039
 80019d4:	2000003c 	.word	0x2000003c
 80019d8:	40020c00 	.word	0x40020c00

080019dc <reverse_bits>:

static uint8_t reverse_bits(uint8_t num)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	71fb      	strb	r3, [r7, #7]
    uint8_t NO_OF_BITS = sizeof(num) * 8;
 80019e6:	2308      	movs	r3, #8
 80019e8:	737b      	strb	r3, [r7, #13]
    uint8_t reverse_num = 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	73fb      	strb	r3, [r7, #15]

    uint8_t i;

    for (i = 0; i < NO_OF_BITS; i++)
 80019ee:	2300      	movs	r3, #0
 80019f0:	73bb      	strb	r3, [r7, #14]
 80019f2:	e017      	b.n	8001a24 <reverse_bits+0x48>
        if((num & (1 << i)))
 80019f4:	79fa      	ldrb	r2, [r7, #7]
 80019f6:	7bbb      	ldrb	r3, [r7, #14]
 80019f8:	fa42 f303 	asr.w	r3, r2, r3
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d00c      	beq.n	8001a1e <reverse_bits+0x42>
           reverse_num |= 1 << ((NO_OF_BITS - 1) - i);
 8001a04:	7b7b      	ldrb	r3, [r7, #13]
 8001a06:	1e5a      	subs	r2, r3, #1
 8001a08:	7bbb      	ldrb	r3, [r7, #14]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	b25a      	sxtb	r2, r3
 8001a14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	b25b      	sxtb	r3, r3
 8001a1c:	73fb      	strb	r3, [r7, #15]
    for (i = 0; i < NO_OF_BITS; i++)
 8001a1e:	7bbb      	ldrb	r3, [r7, #14]
 8001a20:	3301      	adds	r3, #1
 8001a22:	73bb      	strb	r3, [r7, #14]
 8001a24:	7bba      	ldrb	r2, [r7, #14]
 8001a26:	7b7b      	ldrb	r3, [r7, #13]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d3e3      	bcc.n	80019f4 <reverse_bits+0x18>

    return reverse_num;
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
	...

08001a3c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8001a40:	4b17      	ldr	r3, [pc, #92]	; (8001aa0 <MX_SPI3_Init+0x64>)
 8001a42:	4a18      	ldr	r2, [pc, #96]	; (8001aa4 <MX_SPI3_Init+0x68>)
 8001a44:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001a46:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <MX_SPI3_Init+0x64>)
 8001a48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a4c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001a4e:	4b14      	ldr	r3, [pc, #80]	; (8001aa0 <MX_SPI3_Init+0x64>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a54:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <MX_SPI3_Init+0x64>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a5a:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <MX_SPI3_Init+0x64>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a60:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <MX_SPI3_Init+0x64>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001a66:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <MX_SPI3_Init+0x64>)
 8001a68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a6c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a6e:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <MX_SPI3_Init+0x64>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a74:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <MX_SPI3_Init+0x64>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a7a:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <MX_SPI3_Init+0x64>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a80:	4b07      	ldr	r3, [pc, #28]	; (8001aa0 <MX_SPI3_Init+0x64>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001a86:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <MX_SPI3_Init+0x64>)
 8001a88:	220a      	movs	r2, #10
 8001a8a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001a8c:	4804      	ldr	r0, [pc, #16]	; (8001aa0 <MX_SPI3_Init+0x64>)
 8001a8e:	f7ff fc1f 	bl	80012d0 <HAL_SPI_Init>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001a98:	f7ff ff3a 	bl	8001910 <Error_Handler>
  }

}
 8001a9c:	bf00      	nop
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	2000003c 	.word	0x2000003c
 8001aa4:	40003c00 	.word	0x40003c00

08001aa8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08a      	sub	sp, #40	; 0x28
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	60da      	str	r2, [r3, #12]
 8001abe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a19      	ldr	r2, [pc, #100]	; (8001b2c <HAL_SPI_MspInit+0x84>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d12c      	bne.n	8001b24 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	613b      	str	r3, [r7, #16]
 8001ace:	4b18      	ldr	r3, [pc, #96]	; (8001b30 <HAL_SPI_MspInit+0x88>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	4a17      	ldr	r2, [pc, #92]	; (8001b30 <HAL_SPI_MspInit+0x88>)
 8001ad4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8001ada:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <HAL_SPI_MspInit+0x88>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <HAL_SPI_MspInit+0x88>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	4a10      	ldr	r2, [pc, #64]	; (8001b30 <HAL_SPI_MspInit+0x88>)
 8001af0:	f043 0304 	orr.w	r3, r3, #4
 8001af4:	6313      	str	r3, [r2, #48]	; 0x30
 8001af6:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <HAL_SPI_MspInit+0x88>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	f003 0304 	and.w	r3, r3, #4
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001b02:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b10:	2303      	movs	r3, #3
 8001b12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b14:	2306      	movs	r3, #6
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b18:	f107 0314 	add.w	r3, r7, #20
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4805      	ldr	r0, [pc, #20]	; (8001b34 <HAL_SPI_MspInit+0x8c>)
 8001b20:	f7fe fe4c 	bl	80007bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001b24:	bf00      	nop
 8001b26:	3728      	adds	r7, #40	; 0x28
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40003c00 	.word	0x40003c00
 8001b30:	40023800 	.word	0x40023800
 8001b34:	40020800 	.word	0x40020800

08001b38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	607b      	str	r3, [r7, #4]
 8001b42:	4b10      	ldr	r3, [pc, #64]	; (8001b84 <HAL_MspInit+0x4c>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	4a0f      	ldr	r2, [pc, #60]	; (8001b84 <HAL_MspInit+0x4c>)
 8001b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b4e:	4b0d      	ldr	r3, [pc, #52]	; (8001b84 <HAL_MspInit+0x4c>)
 8001b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b56:	607b      	str	r3, [r7, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	603b      	str	r3, [r7, #0]
 8001b5e:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <HAL_MspInit+0x4c>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	4a08      	ldr	r2, [pc, #32]	; (8001b84 <HAL_MspInit+0x4c>)
 8001b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b68:	6413      	str	r3, [r2, #64]	; 0x40
 8001b6a:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <HAL_MspInit+0x4c>)
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b72:	603b      	str	r3, [r7, #0]
 8001b74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	40023800 	.word	0x40023800

08001b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b96:	b480      	push	{r7}
 8001b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b9a:	e7fe      	b.n	8001b9a <HardFault_Handler+0x4>

08001b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ba0:	e7fe      	b.n	8001ba0 <MemManage_Handler+0x4>

08001ba2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ba6:	e7fe      	b.n	8001ba6 <BusFault_Handler+0x4>

08001ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bac:	e7fe      	b.n	8001bac <UsageFault_Handler+0x4>

08001bae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bdc:	f7fe fcc6 	bl	800056c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001be0:	bf00      	nop
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001be8:	4b16      	ldr	r3, [pc, #88]	; (8001c44 <SystemInit+0x60>)
 8001bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bee:	4a15      	ldr	r2, [pc, #84]	; (8001c44 <SystemInit+0x60>)
 8001bf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001bf8:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <SystemInit+0x64>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a12      	ldr	r2, [pc, #72]	; (8001c48 <SystemInit+0x64>)
 8001bfe:	f043 0301 	orr.w	r3, r3, #1
 8001c02:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001c04:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <SystemInit+0x64>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001c0a:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <SystemInit+0x64>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a0e      	ldr	r2, [pc, #56]	; (8001c48 <SystemInit+0x64>)
 8001c10:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001c14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c18:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001c1a:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <SystemInit+0x64>)
 8001c1c:	4a0b      	ldr	r2, [pc, #44]	; (8001c4c <SystemInit+0x68>)
 8001c1e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001c20:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <SystemInit+0x64>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a08      	ldr	r2, [pc, #32]	; (8001c48 <SystemInit+0x64>)
 8001c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001c2c:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <SystemInit+0x64>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c32:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <SystemInit+0x60>)
 8001c34:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c38:	609a      	str	r2, [r3, #8]
#endif
}
 8001c3a:	bf00      	nop
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	e000ed00 	.word	0xe000ed00
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	24003010 	.word	0x24003010

08001c50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c88 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c54:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c56:	e003      	b.n	8001c60 <LoopCopyDataInit>

08001c58 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c58:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c5a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c5c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c5e:	3104      	adds	r1, #4

08001c60 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c60:	480b      	ldr	r0, [pc, #44]	; (8001c90 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001c62:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c64:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c66:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c68:	d3f6      	bcc.n	8001c58 <CopyDataInit>
  ldr  r2, =_sbss
 8001c6a:	4a0b      	ldr	r2, [pc, #44]	; (8001c98 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c6c:	e002      	b.n	8001c74 <LoopFillZerobss>

08001c6e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c6e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c70:	f842 3b04 	str.w	r3, [r2], #4

08001c74 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c74:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c76:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c78:	d3f9      	bcc.n	8001c6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c7a:	f7ff ffb3 	bl	8001be4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c7e:	f000 f811 	bl	8001ca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c82:	f7ff fdb9 	bl	80017f8 <main>
  bx  lr    
 8001c86:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c88:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001c8c:	08001d34 	.word	0x08001d34
  ldr  r0, =_sdata
 8001c90:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c94:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 8001c98:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 8001c9c:	20000094 	.word	0x20000094

08001ca0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ca0:	e7fe      	b.n	8001ca0 <ADC_IRQHandler>
	...

08001ca4 <__libc_init_array>:
 8001ca4:	b570      	push	{r4, r5, r6, lr}
 8001ca6:	4e0d      	ldr	r6, [pc, #52]	; (8001cdc <__libc_init_array+0x38>)
 8001ca8:	4c0d      	ldr	r4, [pc, #52]	; (8001ce0 <__libc_init_array+0x3c>)
 8001caa:	1ba4      	subs	r4, r4, r6
 8001cac:	10a4      	asrs	r4, r4, #2
 8001cae:	2500      	movs	r5, #0
 8001cb0:	42a5      	cmp	r5, r4
 8001cb2:	d109      	bne.n	8001cc8 <__libc_init_array+0x24>
 8001cb4:	4e0b      	ldr	r6, [pc, #44]	; (8001ce4 <__libc_init_array+0x40>)
 8001cb6:	4c0c      	ldr	r4, [pc, #48]	; (8001ce8 <__libc_init_array+0x44>)
 8001cb8:	f000 f820 	bl	8001cfc <_init>
 8001cbc:	1ba4      	subs	r4, r4, r6
 8001cbe:	10a4      	asrs	r4, r4, #2
 8001cc0:	2500      	movs	r5, #0
 8001cc2:	42a5      	cmp	r5, r4
 8001cc4:	d105      	bne.n	8001cd2 <__libc_init_array+0x2e>
 8001cc6:	bd70      	pop	{r4, r5, r6, pc}
 8001cc8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ccc:	4798      	blx	r3
 8001cce:	3501      	adds	r5, #1
 8001cd0:	e7ee      	b.n	8001cb0 <__libc_init_array+0xc>
 8001cd2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001cd6:	4798      	blx	r3
 8001cd8:	3501      	adds	r5, #1
 8001cda:	e7f2      	b.n	8001cc2 <__libc_init_array+0x1e>
 8001cdc:	08001d2c 	.word	0x08001d2c
 8001ce0:	08001d2c 	.word	0x08001d2c
 8001ce4:	08001d2c 	.word	0x08001d2c
 8001ce8:	08001d30 	.word	0x08001d30

08001cec <memset>:
 8001cec:	4402      	add	r2, r0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d100      	bne.n	8001cf6 <memset+0xa>
 8001cf4:	4770      	bx	lr
 8001cf6:	f803 1b01 	strb.w	r1, [r3], #1
 8001cfa:	e7f9      	b.n	8001cf0 <memset+0x4>

08001cfc <_init>:
 8001cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cfe:	bf00      	nop
 8001d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d02:	bc08      	pop	{r3}
 8001d04:	469e      	mov	lr, r3
 8001d06:	4770      	bx	lr

08001d08 <_fini>:
 8001d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d0a:	bf00      	nop
 8001d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d0e:	bc08      	pop	{r3}
 8001d10:	469e      	mov	lr, r3
 8001d12:	4770      	bx	lr
