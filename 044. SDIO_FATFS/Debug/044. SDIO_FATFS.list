
044. SDIO_FATFS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e6c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08006ffc  08006ffc  00016ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800716c  0800716c  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800716c  0800716c  0001716c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007174  08007174  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007174  08007174  00017174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007178  08007178  00017178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800717c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005298  20000088  08007204  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005320  08007204  00025320  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011b2b  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000299e  00000000  00000000  00031be3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d20  00000000  00000000  00034588  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bb8  00000000  00000000  000352a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023253  00000000  00000000  00035e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d6b5  00000000  00000000  000590b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c8968  00000000  00000000  00066768  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012f0d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003700  00000000  00000000  0012f14c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006fe4 	.word	0x08006fe4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08006fe4 	.word	0x08006fe4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <HAL_Init+0x40>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0d      	ldr	r2, [pc, #52]	; (80005c0 <HAL_Init+0x40>)
 800058a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800058e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000590:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <HAL_Init+0x40>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <HAL_Init+0x40>)
 8000596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800059a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <HAL_Init+0x40>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <HAL_Init+0x40>)
 80005a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a8:	2003      	movs	r0, #3
 80005aa:	f000 f92f 	bl	800080c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ae:	2000      	movs	r0, #0
 80005b0:	f000 f808 	bl	80005c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b4:	f005 ff8a 	bl	80064cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005b8:	2300      	movs	r3, #0
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40023c00 	.word	0x40023c00

080005c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005cc:	4b12      	ldr	r3, [pc, #72]	; (8000618 <HAL_InitTick+0x54>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <HAL_InitTick+0x58>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4619      	mov	r1, r3
 80005d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005da:	fbb3 f3f1 	udiv	r3, r3, r1
 80005de:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 f939 	bl	800085a <HAL_SYSTICK_Config>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ee:	2301      	movs	r3, #1
 80005f0:	e00e      	b.n	8000610 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2b0f      	cmp	r3, #15
 80005f6:	d80a      	bhi.n	800060e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005f8:	2200      	movs	r2, #0
 80005fa:	6879      	ldr	r1, [r7, #4]
 80005fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000600:	f000 f90f 	bl	8000822 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000604:	4a06      	ldr	r2, [pc, #24]	; (8000620 <HAL_InitTick+0x5c>)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800060a:	2300      	movs	r3, #0
 800060c:	e000      	b.n	8000610 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
}
 8000610:	4618      	mov	r0, r3
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000020 	.word	0x20000020
 800061c:	20000004 	.word	0x20000004
 8000620:	20000000 	.word	0x20000000

08000624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <HAL_IncTick+0x20>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <HAL_IncTick+0x24>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4413      	add	r3, r2
 8000634:	4a04      	ldr	r2, [pc, #16]	; (8000648 <HAL_IncTick+0x24>)
 8000636:	6013      	str	r3, [r2, #0]
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	20000004 	.word	0x20000004
 8000648:	200000e4 	.word	0x200000e4

0800064c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return uwTick;
 8000650:	4b03      	ldr	r3, [pc, #12]	; (8000660 <HAL_GetTick+0x14>)
 8000652:	681b      	ldr	r3, [r3, #0]
}
 8000654:	4618      	mov	r0, r3
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	200000e4 	.word	0x200000e4

08000664 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800066c:	f7ff ffee 	bl	800064c <HAL_GetTick>
 8000670:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800067c:	d005      	beq.n	800068a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <HAL_Delay+0x40>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	461a      	mov	r2, r3
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	4413      	add	r3, r2
 8000688:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800068a:	bf00      	nop
 800068c:	f7ff ffde 	bl	800064c <HAL_GetTick>
 8000690:	4602      	mov	r2, r0
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	68fa      	ldr	r2, [r7, #12]
 8000698:	429a      	cmp	r2, r3
 800069a:	d8f7      	bhi.n	800068c <HAL_Delay+0x28>
  {
  }
}
 800069c:	bf00      	nop
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000004 	.word	0x20000004

080006a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	f003 0307 	and.w	r3, r3, #7
 80006b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <__NVIC_SetPriorityGrouping+0x44>)
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006be:	68ba      	ldr	r2, [r7, #8]
 80006c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006c4:	4013      	ands	r3, r2
 80006c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006da:	4a04      	ldr	r2, [pc, #16]	; (80006ec <__NVIC_SetPriorityGrouping+0x44>)
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	60d3      	str	r3, [r2, #12]
}
 80006e0:	bf00      	nop
 80006e2:	3714      	adds	r7, #20
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	e000ed00 	.word	0xe000ed00

080006f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006f4:	4b04      	ldr	r3, [pc, #16]	; (8000708 <__NVIC_GetPriorityGrouping+0x18>)
 80006f6:	68db      	ldr	r3, [r3, #12]
 80006f8:	0a1b      	lsrs	r3, r3, #8
 80006fa:	f003 0307 	and.w	r3, r3, #7
}
 80006fe:	4618      	mov	r0, r3
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	6039      	str	r1, [r7, #0]
 8000716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071c:	2b00      	cmp	r3, #0
 800071e:	db0a      	blt.n	8000736 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	b2da      	uxtb	r2, r3
 8000724:	490c      	ldr	r1, [pc, #48]	; (8000758 <__NVIC_SetPriority+0x4c>)
 8000726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072a:	0112      	lsls	r2, r2, #4
 800072c:	b2d2      	uxtb	r2, r2
 800072e:	440b      	add	r3, r1
 8000730:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000734:	e00a      	b.n	800074c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	b2da      	uxtb	r2, r3
 800073a:	4908      	ldr	r1, [pc, #32]	; (800075c <__NVIC_SetPriority+0x50>)
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	f003 030f 	and.w	r3, r3, #15
 8000742:	3b04      	subs	r3, #4
 8000744:	0112      	lsls	r2, r2, #4
 8000746:	b2d2      	uxtb	r2, r2
 8000748:	440b      	add	r3, r1
 800074a:	761a      	strb	r2, [r3, #24]
}
 800074c:	bf00      	nop
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	e000e100 	.word	0xe000e100
 800075c:	e000ed00 	.word	0xe000ed00

08000760 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000760:	b480      	push	{r7}
 8000762:	b089      	sub	sp, #36	; 0x24
 8000764:	af00      	add	r7, sp, #0
 8000766:	60f8      	str	r0, [r7, #12]
 8000768:	60b9      	str	r1, [r7, #8]
 800076a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	f003 0307 	and.w	r3, r3, #7
 8000772:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000774:	69fb      	ldr	r3, [r7, #28]
 8000776:	f1c3 0307 	rsb	r3, r3, #7
 800077a:	2b04      	cmp	r3, #4
 800077c:	bf28      	it	cs
 800077e:	2304      	movcs	r3, #4
 8000780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000782:	69fb      	ldr	r3, [r7, #28]
 8000784:	3304      	adds	r3, #4
 8000786:	2b06      	cmp	r3, #6
 8000788:	d902      	bls.n	8000790 <NVIC_EncodePriority+0x30>
 800078a:	69fb      	ldr	r3, [r7, #28]
 800078c:	3b03      	subs	r3, #3
 800078e:	e000      	b.n	8000792 <NVIC_EncodePriority+0x32>
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000794:	f04f 32ff 	mov.w	r2, #4294967295
 8000798:	69bb      	ldr	r3, [r7, #24]
 800079a:	fa02 f303 	lsl.w	r3, r2, r3
 800079e:	43da      	mvns	r2, r3
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	401a      	ands	r2, r3
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007a8:	f04f 31ff 	mov.w	r1, #4294967295
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	fa01 f303 	lsl.w	r3, r1, r3
 80007b2:	43d9      	mvns	r1, r3
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b8:	4313      	orrs	r3, r2
         );
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3724      	adds	r7, #36	; 0x24
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
	...

080007c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	3b01      	subs	r3, #1
 80007d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007d8:	d301      	bcc.n	80007de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007da:	2301      	movs	r3, #1
 80007dc:	e00f      	b.n	80007fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007de:	4a0a      	ldr	r2, [pc, #40]	; (8000808 <SysTick_Config+0x40>)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	3b01      	subs	r3, #1
 80007e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007e6:	210f      	movs	r1, #15
 80007e8:	f04f 30ff 	mov.w	r0, #4294967295
 80007ec:	f7ff ff8e 	bl	800070c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007f0:	4b05      	ldr	r3, [pc, #20]	; (8000808 <SysTick_Config+0x40>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007f6:	4b04      	ldr	r3, [pc, #16]	; (8000808 <SysTick_Config+0x40>)
 80007f8:	2207      	movs	r2, #7
 80007fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007fc:	2300      	movs	r3, #0
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	e000e010 	.word	0xe000e010

0800080c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f7ff ff47 	bl	80006a8 <__NVIC_SetPriorityGrouping>
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000822:	b580      	push	{r7, lr}
 8000824:	b086      	sub	sp, #24
 8000826:	af00      	add	r7, sp, #0
 8000828:	4603      	mov	r3, r0
 800082a:	60b9      	str	r1, [r7, #8]
 800082c:	607a      	str	r2, [r7, #4]
 800082e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000834:	f7ff ff5c 	bl	80006f0 <__NVIC_GetPriorityGrouping>
 8000838:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800083a:	687a      	ldr	r2, [r7, #4]
 800083c:	68b9      	ldr	r1, [r7, #8]
 800083e:	6978      	ldr	r0, [r7, #20]
 8000840:	f7ff ff8e 	bl	8000760 <NVIC_EncodePriority>
 8000844:	4602      	mov	r2, r0
 8000846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800084a:	4611      	mov	r1, r2
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff ff5d 	bl	800070c <__NVIC_SetPriority>
}
 8000852:	bf00      	nop
 8000854:	3718      	adds	r7, #24
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b082      	sub	sp, #8
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f7ff ffb0 	bl	80007c8 <SysTick_Config>
 8000868:	4603      	mov	r3, r0
}
 800086a:	4618      	mov	r0, r3
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
	...

08000874 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000874:	b480      	push	{r7}
 8000876:	b089      	sub	sp, #36	; 0x24
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800087e:	2300      	movs	r3, #0
 8000880:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000882:	2300      	movs	r3, #0
 8000884:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000886:	2300      	movs	r3, #0
 8000888:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800088a:	2300      	movs	r3, #0
 800088c:	61fb      	str	r3, [r7, #28]
 800088e:	e16b      	b.n	8000b68 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000890:	2201      	movs	r2, #1
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	fa02 f303 	lsl.w	r3, r2, r3
 8000898:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	697a      	ldr	r2, [r7, #20]
 80008a0:	4013      	ands	r3, r2
 80008a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80008a4:	693a      	ldr	r2, [r7, #16]
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	f040 815a 	bne.w	8000b62 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	2b02      	cmp	r3, #2
 80008b4:	d003      	beq.n	80008be <HAL_GPIO_Init+0x4a>
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	2b12      	cmp	r3, #18
 80008bc:	d123      	bne.n	8000906 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	08da      	lsrs	r2, r3, #3
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	3208      	adds	r2, #8
 80008c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008cc:	69fb      	ldr	r3, [r7, #28]
 80008ce:	f003 0307 	and.w	r3, r3, #7
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	220f      	movs	r2, #15
 80008d6:	fa02 f303 	lsl.w	r3, r2, r3
 80008da:	43db      	mvns	r3, r3
 80008dc:	69ba      	ldr	r2, [r7, #24]
 80008de:	4013      	ands	r3, r2
 80008e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	691a      	ldr	r2, [r3, #16]
 80008e6:	69fb      	ldr	r3, [r7, #28]
 80008e8:	f003 0307 	and.w	r3, r3, #7
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	fa02 f303 	lsl.w	r3, r2, r3
 80008f2:	69ba      	ldr	r2, [r7, #24]
 80008f4:	4313      	orrs	r3, r2
 80008f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80008f8:	69fb      	ldr	r3, [r7, #28]
 80008fa:	08da      	lsrs	r2, r3, #3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	3208      	adds	r2, #8
 8000900:	69b9      	ldr	r1, [r7, #24]
 8000902:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800090c:	69fb      	ldr	r3, [r7, #28]
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	2203      	movs	r2, #3
 8000912:	fa02 f303 	lsl.w	r3, r2, r3
 8000916:	43db      	mvns	r3, r3
 8000918:	69ba      	ldr	r2, [r7, #24]
 800091a:	4013      	ands	r3, r2
 800091c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	f003 0203 	and.w	r2, r3, #3
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	fa02 f303 	lsl.w	r3, r2, r3
 800092e:	69ba      	ldr	r2, [r7, #24]
 8000930:	4313      	orrs	r3, r2
 8000932:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	69ba      	ldr	r2, [r7, #24]
 8000938:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	2b01      	cmp	r3, #1
 8000940:	d00b      	beq.n	800095a <HAL_GPIO_Init+0xe6>
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	2b02      	cmp	r3, #2
 8000948:	d007      	beq.n	800095a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800094e:	2b11      	cmp	r3, #17
 8000950:	d003      	beq.n	800095a <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	2b12      	cmp	r3, #18
 8000958:	d130      	bne.n	80009bc <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	689b      	ldr	r3, [r3, #8]
 800095e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000960:	69fb      	ldr	r3, [r7, #28]
 8000962:	005b      	lsls	r3, r3, #1
 8000964:	2203      	movs	r2, #3
 8000966:	fa02 f303 	lsl.w	r3, r2, r3
 800096a:	43db      	mvns	r3, r3
 800096c:	69ba      	ldr	r2, [r7, #24]
 800096e:	4013      	ands	r3, r2
 8000970:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	68da      	ldr	r2, [r3, #12]
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	fa02 f303 	lsl.w	r3, r2, r3
 800097e:	69ba      	ldr	r2, [r7, #24]
 8000980:	4313      	orrs	r3, r2
 8000982:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	69ba      	ldr	r2, [r7, #24]
 8000988:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000990:	2201      	movs	r2, #1
 8000992:	69fb      	ldr	r3, [r7, #28]
 8000994:	fa02 f303 	lsl.w	r3, r2, r3
 8000998:	43db      	mvns	r3, r3
 800099a:	69ba      	ldr	r2, [r7, #24]
 800099c:	4013      	ands	r3, r2
 800099e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	091b      	lsrs	r3, r3, #4
 80009a6:	f003 0201 	and.w	r2, r3, #1
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	fa02 f303 	lsl.w	r3, r2, r3
 80009b0:	69ba      	ldr	r2, [r7, #24]
 80009b2:	4313      	orrs	r3, r2
 80009b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	69ba      	ldr	r2, [r7, #24]
 80009ba:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	2203      	movs	r2, #3
 80009c8:	fa02 f303 	lsl.w	r3, r2, r3
 80009cc:	43db      	mvns	r3, r3
 80009ce:	69ba      	ldr	r2, [r7, #24]
 80009d0:	4013      	ands	r3, r2
 80009d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	689a      	ldr	r2, [r3, #8]
 80009d8:	69fb      	ldr	r3, [r7, #28]
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	fa02 f303 	lsl.w	r3, r2, r3
 80009e0:	69ba      	ldr	r2, [r7, #24]
 80009e2:	4313      	orrs	r3, r2
 80009e4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	69ba      	ldr	r2, [r7, #24]
 80009ea:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	f000 80b4 	beq.w	8000b62 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	4b5f      	ldr	r3, [pc, #380]	; (8000b7c <HAL_GPIO_Init+0x308>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a02:	4a5e      	ldr	r2, [pc, #376]	; (8000b7c <HAL_GPIO_Init+0x308>)
 8000a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a08:	6453      	str	r3, [r2, #68]	; 0x44
 8000a0a:	4b5c      	ldr	r3, [pc, #368]	; (8000b7c <HAL_GPIO_Init+0x308>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a16:	4a5a      	ldr	r2, [pc, #360]	; (8000b80 <HAL_GPIO_Init+0x30c>)
 8000a18:	69fb      	ldr	r3, [r7, #28]
 8000a1a:	089b      	lsrs	r3, r3, #2
 8000a1c:	3302      	adds	r3, #2
 8000a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a24:	69fb      	ldr	r3, [r7, #28]
 8000a26:	f003 0303 	and.w	r3, r3, #3
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	220f      	movs	r2, #15
 8000a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a32:	43db      	mvns	r3, r3
 8000a34:	69ba      	ldr	r2, [r7, #24]
 8000a36:	4013      	ands	r3, r2
 8000a38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4a51      	ldr	r2, [pc, #324]	; (8000b84 <HAL_GPIO_Init+0x310>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d02b      	beq.n	8000a9a <HAL_GPIO_Init+0x226>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4a50      	ldr	r2, [pc, #320]	; (8000b88 <HAL_GPIO_Init+0x314>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d025      	beq.n	8000a96 <HAL_GPIO_Init+0x222>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4a4f      	ldr	r2, [pc, #316]	; (8000b8c <HAL_GPIO_Init+0x318>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d01f      	beq.n	8000a92 <HAL_GPIO_Init+0x21e>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4a4e      	ldr	r2, [pc, #312]	; (8000b90 <HAL_GPIO_Init+0x31c>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d019      	beq.n	8000a8e <HAL_GPIO_Init+0x21a>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a4d      	ldr	r2, [pc, #308]	; (8000b94 <HAL_GPIO_Init+0x320>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d013      	beq.n	8000a8a <HAL_GPIO_Init+0x216>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a4c      	ldr	r2, [pc, #304]	; (8000b98 <HAL_GPIO_Init+0x324>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d00d      	beq.n	8000a86 <HAL_GPIO_Init+0x212>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a4b      	ldr	r2, [pc, #300]	; (8000b9c <HAL_GPIO_Init+0x328>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d007      	beq.n	8000a82 <HAL_GPIO_Init+0x20e>
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4a4a      	ldr	r2, [pc, #296]	; (8000ba0 <HAL_GPIO_Init+0x32c>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d101      	bne.n	8000a7e <HAL_GPIO_Init+0x20a>
 8000a7a:	2307      	movs	r3, #7
 8000a7c:	e00e      	b.n	8000a9c <HAL_GPIO_Init+0x228>
 8000a7e:	2308      	movs	r3, #8
 8000a80:	e00c      	b.n	8000a9c <HAL_GPIO_Init+0x228>
 8000a82:	2306      	movs	r3, #6
 8000a84:	e00a      	b.n	8000a9c <HAL_GPIO_Init+0x228>
 8000a86:	2305      	movs	r3, #5
 8000a88:	e008      	b.n	8000a9c <HAL_GPIO_Init+0x228>
 8000a8a:	2304      	movs	r3, #4
 8000a8c:	e006      	b.n	8000a9c <HAL_GPIO_Init+0x228>
 8000a8e:	2303      	movs	r3, #3
 8000a90:	e004      	b.n	8000a9c <HAL_GPIO_Init+0x228>
 8000a92:	2302      	movs	r3, #2
 8000a94:	e002      	b.n	8000a9c <HAL_GPIO_Init+0x228>
 8000a96:	2301      	movs	r3, #1
 8000a98:	e000      	b.n	8000a9c <HAL_GPIO_Init+0x228>
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	69fa      	ldr	r2, [r7, #28]
 8000a9e:	f002 0203 	and.w	r2, r2, #3
 8000aa2:	0092      	lsls	r2, r2, #2
 8000aa4:	4093      	lsls	r3, r2
 8000aa6:	69ba      	ldr	r2, [r7, #24]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000aac:	4934      	ldr	r1, [pc, #208]	; (8000b80 <HAL_GPIO_Init+0x30c>)
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	089b      	lsrs	r3, r3, #2
 8000ab2:	3302      	adds	r3, #2
 8000ab4:	69ba      	ldr	r2, [r7, #24]
 8000ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000aba:	4b3a      	ldr	r3, [pc, #232]	; (8000ba4 <HAL_GPIO_Init+0x330>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	43db      	mvns	r3, r3
 8000ac4:	69ba      	ldr	r2, [r7, #24]
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d003      	beq.n	8000ade <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000ad6:	69ba      	ldr	r2, [r7, #24]
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ade:	4a31      	ldr	r2, [pc, #196]	; (8000ba4 <HAL_GPIO_Init+0x330>)
 8000ae0:	69bb      	ldr	r3, [r7, #24]
 8000ae2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ae4:	4b2f      	ldr	r3, [pc, #188]	; (8000ba4 <HAL_GPIO_Init+0x330>)
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aea:	693b      	ldr	r3, [r7, #16]
 8000aec:	43db      	mvns	r3, r3
 8000aee:	69ba      	ldr	r2, [r7, #24]
 8000af0:	4013      	ands	r3, r2
 8000af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d003      	beq.n	8000b08 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000b00:	69ba      	ldr	r2, [r7, #24]
 8000b02:	693b      	ldr	r3, [r7, #16]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b08:	4a26      	ldr	r2, [pc, #152]	; (8000ba4 <HAL_GPIO_Init+0x330>)
 8000b0a:	69bb      	ldr	r3, [r7, #24]
 8000b0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b0e:	4b25      	ldr	r3, [pc, #148]	; (8000ba4 <HAL_GPIO_Init+0x330>)
 8000b10:	689b      	ldr	r3, [r3, #8]
 8000b12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b14:	693b      	ldr	r3, [r7, #16]
 8000b16:	43db      	mvns	r3, r3
 8000b18:	69ba      	ldr	r2, [r7, #24]
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d003      	beq.n	8000b32 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000b2a:	69ba      	ldr	r2, [r7, #24]
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b32:	4a1c      	ldr	r2, [pc, #112]	; (8000ba4 <HAL_GPIO_Init+0x330>)
 8000b34:	69bb      	ldr	r3, [r7, #24]
 8000b36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b38:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <HAL_GPIO_Init+0x330>)
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	43db      	mvns	r3, r3
 8000b42:	69ba      	ldr	r2, [r7, #24]
 8000b44:	4013      	ands	r3, r2
 8000b46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d003      	beq.n	8000b5c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000b54:	69ba      	ldr	r2, [r7, #24]
 8000b56:	693b      	ldr	r3, [r7, #16]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b5c:	4a11      	ldr	r2, [pc, #68]	; (8000ba4 <HAL_GPIO_Init+0x330>)
 8000b5e:	69bb      	ldr	r3, [r7, #24]
 8000b60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	3301      	adds	r3, #1
 8000b66:	61fb      	str	r3, [r7, #28]
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	2b0f      	cmp	r3, #15
 8000b6c:	f67f ae90 	bls.w	8000890 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b70:	bf00      	nop
 8000b72:	3724      	adds	r7, #36	; 0x24
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40013800 	.word	0x40013800
 8000b84:	40020000 	.word	0x40020000
 8000b88:	40020400 	.word	0x40020400
 8000b8c:	40020800 	.word	0x40020800
 8000b90:	40020c00 	.word	0x40020c00
 8000b94:	40021000 	.word	0x40021000
 8000b98:	40021400 	.word	0x40021400
 8000b9c:	40021800 	.word	0x40021800
 8000ba0:	40021c00 	.word	0x40021c00
 8000ba4:	40013c00 	.word	0x40013c00

08000ba8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	807b      	strh	r3, [r7, #2]
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bb8:	787b      	ldrb	r3, [r7, #1]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d003      	beq.n	8000bc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bbe:	887a      	ldrh	r2, [r7, #2]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000bc4:	e003      	b.n	8000bce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000bc6:	887b      	ldrh	r3, [r7, #2]
 8000bc8:	041a      	lsls	r2, r3, #16
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	619a      	str	r2, [r3, #24]
}
 8000bce:	bf00      	nop
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
	...

08000bdc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d101      	bne.n	8000bee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	e22d      	b.n	800104a <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d075      	beq.n	8000ce6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000bfa:	4ba3      	ldr	r3, [pc, #652]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	f003 030c 	and.w	r3, r3, #12
 8000c02:	2b04      	cmp	r3, #4
 8000c04:	d00c      	beq.n	8000c20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c06:	4ba0      	ldr	r3, [pc, #640]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c0e:	2b08      	cmp	r3, #8
 8000c10:	d112      	bne.n	8000c38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c12:	4b9d      	ldr	r3, [pc, #628]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000c1e:	d10b      	bne.n	8000c38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c20:	4b99      	ldr	r3, [pc, #612]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d05b      	beq.n	8000ce4 <HAL_RCC_OscConfig+0x108>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d157      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000c34:	2301      	movs	r3, #1
 8000c36:	e208      	b.n	800104a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c40:	d106      	bne.n	8000c50 <HAL_RCC_OscConfig+0x74>
 8000c42:	4b91      	ldr	r3, [pc, #580]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a90      	ldr	r2, [pc, #576]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c4c:	6013      	str	r3, [r2, #0]
 8000c4e:	e01d      	b.n	8000c8c <HAL_RCC_OscConfig+0xb0>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c58:	d10c      	bne.n	8000c74 <HAL_RCC_OscConfig+0x98>
 8000c5a:	4b8b      	ldr	r3, [pc, #556]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a8a      	ldr	r2, [pc, #552]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000c60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c64:	6013      	str	r3, [r2, #0]
 8000c66:	4b88      	ldr	r3, [pc, #544]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a87      	ldr	r2, [pc, #540]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c70:	6013      	str	r3, [r2, #0]
 8000c72:	e00b      	b.n	8000c8c <HAL_RCC_OscConfig+0xb0>
 8000c74:	4b84      	ldr	r3, [pc, #528]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a83      	ldr	r2, [pc, #524]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c7e:	6013      	str	r3, [r2, #0]
 8000c80:	4b81      	ldr	r3, [pc, #516]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a80      	ldr	r2, [pc, #512]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000c86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d013      	beq.n	8000cbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c94:	f7ff fcda 	bl	800064c <HAL_GetTick>
 8000c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c9a:	e008      	b.n	8000cae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c9c:	f7ff fcd6 	bl	800064c <HAL_GetTick>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	2b64      	cmp	r3, #100	; 0x64
 8000ca8:	d901      	bls.n	8000cae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000caa:	2303      	movs	r3, #3
 8000cac:	e1cd      	b.n	800104a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cae:	4b76      	ldr	r3, [pc, #472]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d0f0      	beq.n	8000c9c <HAL_RCC_OscConfig+0xc0>
 8000cba:	e014      	b.n	8000ce6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cbc:	f7ff fcc6 	bl	800064c <HAL_GetTick>
 8000cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cc2:	e008      	b.n	8000cd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cc4:	f7ff fcc2 	bl	800064c <HAL_GetTick>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	2b64      	cmp	r3, #100	; 0x64
 8000cd0:	d901      	bls.n	8000cd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	e1b9      	b.n	800104a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cd6:	4b6c      	ldr	r3, [pc, #432]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d1f0      	bne.n	8000cc4 <HAL_RCC_OscConfig+0xe8>
 8000ce2:	e000      	b.n	8000ce6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d063      	beq.n	8000dba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000cf2:	4b65      	ldr	r3, [pc, #404]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	f003 030c 	and.w	r3, r3, #12
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d00b      	beq.n	8000d16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cfe:	4b62      	ldr	r3, [pc, #392]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d06:	2b08      	cmp	r3, #8
 8000d08:	d11c      	bne.n	8000d44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d0a:	4b5f      	ldr	r3, [pc, #380]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d116      	bne.n	8000d44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d16:	4b5c      	ldr	r3, [pc, #368]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f003 0302 	and.w	r3, r3, #2
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d005      	beq.n	8000d2e <HAL_RCC_OscConfig+0x152>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	68db      	ldr	r3, [r3, #12]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d001      	beq.n	8000d2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e18d      	b.n	800104a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d2e:	4b56      	ldr	r3, [pc, #344]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	691b      	ldr	r3, [r3, #16]
 8000d3a:	00db      	lsls	r3, r3, #3
 8000d3c:	4952      	ldr	r1, [pc, #328]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d42:	e03a      	b.n	8000dba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d020      	beq.n	8000d8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d4c:	4b4f      	ldr	r3, [pc, #316]	; (8000e8c <HAL_RCC_OscConfig+0x2b0>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d52:	f7ff fc7b 	bl	800064c <HAL_GetTick>
 8000d56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d58:	e008      	b.n	8000d6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d5a:	f7ff fc77 	bl	800064c <HAL_GetTick>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	1ad3      	subs	r3, r2, r3
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d901      	bls.n	8000d6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	e16e      	b.n	800104a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d6c:	4b46      	ldr	r3, [pc, #280]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f003 0302 	and.w	r3, r3, #2
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d0f0      	beq.n	8000d5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d78:	4b43      	ldr	r3, [pc, #268]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	691b      	ldr	r3, [r3, #16]
 8000d84:	00db      	lsls	r3, r3, #3
 8000d86:	4940      	ldr	r1, [pc, #256]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	600b      	str	r3, [r1, #0]
 8000d8c:	e015      	b.n	8000dba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d8e:	4b3f      	ldr	r3, [pc, #252]	; (8000e8c <HAL_RCC_OscConfig+0x2b0>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d94:	f7ff fc5a 	bl	800064c <HAL_GetTick>
 8000d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d9a:	e008      	b.n	8000dae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d9c:	f7ff fc56 	bl	800064c <HAL_GetTick>
 8000da0:	4602      	mov	r2, r0
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d901      	bls.n	8000dae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000daa:	2303      	movs	r3, #3
 8000dac:	e14d      	b.n	800104a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dae:	4b36      	ldr	r3, [pc, #216]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d1f0      	bne.n	8000d9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f003 0308 	and.w	r3, r3, #8
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d030      	beq.n	8000e28 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	695b      	ldr	r3, [r3, #20]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d016      	beq.n	8000dfc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dce:	4b30      	ldr	r3, [pc, #192]	; (8000e90 <HAL_RCC_OscConfig+0x2b4>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000dd4:	f7ff fc3a 	bl	800064c <HAL_GetTick>
 8000dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dda:	e008      	b.n	8000dee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ddc:	f7ff fc36 	bl	800064c <HAL_GetTick>
 8000de0:	4602      	mov	r2, r0
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d901      	bls.n	8000dee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000dea:	2303      	movs	r3, #3
 8000dec:	e12d      	b.n	800104a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dee:	4b26      	ldr	r3, [pc, #152]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000df0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000df2:	f003 0302 	and.w	r3, r3, #2
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d0f0      	beq.n	8000ddc <HAL_RCC_OscConfig+0x200>
 8000dfa:	e015      	b.n	8000e28 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dfc:	4b24      	ldr	r3, [pc, #144]	; (8000e90 <HAL_RCC_OscConfig+0x2b4>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e02:	f7ff fc23 	bl	800064c <HAL_GetTick>
 8000e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e08:	e008      	b.n	8000e1c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e0a:	f7ff fc1f 	bl	800064c <HAL_GetTick>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d901      	bls.n	8000e1c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	e116      	b.n	800104a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e1c:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e20:	f003 0302 	and.w	r3, r3, #2
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d1f0      	bne.n	8000e0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f003 0304 	and.w	r3, r3, #4
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	f000 80a0 	beq.w	8000f76 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e36:	2300      	movs	r3, #0
 8000e38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e3a:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d10f      	bne.n	8000e66 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4e:	4a0e      	ldr	r2, [pc, #56]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e54:	6413      	str	r3, [r2, #64]	; 0x40
 8000e56:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <HAL_RCC_OscConfig+0x2ac>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000e62:	2301      	movs	r3, #1
 8000e64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e66:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <HAL_RCC_OscConfig+0x2b8>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d121      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e72:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <HAL_RCC_OscConfig+0x2b8>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a07      	ldr	r2, [pc, #28]	; (8000e94 <HAL_RCC_OscConfig+0x2b8>)
 8000e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e7e:	f7ff fbe5 	bl	800064c <HAL_GetTick>
 8000e82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e84:	e011      	b.n	8000eaa <HAL_RCC_OscConfig+0x2ce>
 8000e86:	bf00      	nop
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	42470000 	.word	0x42470000
 8000e90:	42470e80 	.word	0x42470e80
 8000e94:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e98:	f7ff fbd8 	bl	800064c <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d901      	bls.n	8000eaa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	e0cf      	b.n	800104a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eaa:	4b6a      	ldr	r3, [pc, #424]	; (8001054 <HAL_RCC_OscConfig+0x478>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d0f0      	beq.n	8000e98 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d106      	bne.n	8000ecc <HAL_RCC_OscConfig+0x2f0>
 8000ebe:	4b66      	ldr	r3, [pc, #408]	; (8001058 <HAL_RCC_OscConfig+0x47c>)
 8000ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ec2:	4a65      	ldr	r2, [pc, #404]	; (8001058 <HAL_RCC_OscConfig+0x47c>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	6713      	str	r3, [r2, #112]	; 0x70
 8000eca:	e01c      	b.n	8000f06 <HAL_RCC_OscConfig+0x32a>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	2b05      	cmp	r3, #5
 8000ed2:	d10c      	bne.n	8000eee <HAL_RCC_OscConfig+0x312>
 8000ed4:	4b60      	ldr	r3, [pc, #384]	; (8001058 <HAL_RCC_OscConfig+0x47c>)
 8000ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ed8:	4a5f      	ldr	r2, [pc, #380]	; (8001058 <HAL_RCC_OscConfig+0x47c>)
 8000eda:	f043 0304 	orr.w	r3, r3, #4
 8000ede:	6713      	str	r3, [r2, #112]	; 0x70
 8000ee0:	4b5d      	ldr	r3, [pc, #372]	; (8001058 <HAL_RCC_OscConfig+0x47c>)
 8000ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ee4:	4a5c      	ldr	r2, [pc, #368]	; (8001058 <HAL_RCC_OscConfig+0x47c>)
 8000ee6:	f043 0301 	orr.w	r3, r3, #1
 8000eea:	6713      	str	r3, [r2, #112]	; 0x70
 8000eec:	e00b      	b.n	8000f06 <HAL_RCC_OscConfig+0x32a>
 8000eee:	4b5a      	ldr	r3, [pc, #360]	; (8001058 <HAL_RCC_OscConfig+0x47c>)
 8000ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ef2:	4a59      	ldr	r2, [pc, #356]	; (8001058 <HAL_RCC_OscConfig+0x47c>)
 8000ef4:	f023 0301 	bic.w	r3, r3, #1
 8000ef8:	6713      	str	r3, [r2, #112]	; 0x70
 8000efa:	4b57      	ldr	r3, [pc, #348]	; (8001058 <HAL_RCC_OscConfig+0x47c>)
 8000efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000efe:	4a56      	ldr	r2, [pc, #344]	; (8001058 <HAL_RCC_OscConfig+0x47c>)
 8000f00:	f023 0304 	bic.w	r3, r3, #4
 8000f04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d015      	beq.n	8000f3a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f0e:	f7ff fb9d 	bl	800064c <HAL_GetTick>
 8000f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f14:	e00a      	b.n	8000f2c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f16:	f7ff fb99 	bl	800064c <HAL_GetTick>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d901      	bls.n	8000f2c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	e08e      	b.n	800104a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f2c:	4b4a      	ldr	r3, [pc, #296]	; (8001058 <HAL_RCC_OscConfig+0x47c>)
 8000f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f30:	f003 0302 	and.w	r3, r3, #2
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d0ee      	beq.n	8000f16 <HAL_RCC_OscConfig+0x33a>
 8000f38:	e014      	b.n	8000f64 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f3a:	f7ff fb87 	bl	800064c <HAL_GetTick>
 8000f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f40:	e00a      	b.n	8000f58 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f42:	f7ff fb83 	bl	800064c <HAL_GetTick>
 8000f46:	4602      	mov	r2, r0
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d901      	bls.n	8000f58 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000f54:	2303      	movs	r3, #3
 8000f56:	e078      	b.n	800104a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f58:	4b3f      	ldr	r3, [pc, #252]	; (8001058 <HAL_RCC_OscConfig+0x47c>)
 8000f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f5c:	f003 0302 	and.w	r3, r3, #2
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d1ee      	bne.n	8000f42 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000f64:	7dfb      	ldrb	r3, [r7, #23]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d105      	bne.n	8000f76 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f6a:	4b3b      	ldr	r3, [pc, #236]	; (8001058 <HAL_RCC_OscConfig+0x47c>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	4a3a      	ldr	r2, [pc, #232]	; (8001058 <HAL_RCC_OscConfig+0x47c>)
 8000f70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f74:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	699b      	ldr	r3, [r3, #24]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d064      	beq.n	8001048 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f7e:	4b36      	ldr	r3, [pc, #216]	; (8001058 <HAL_RCC_OscConfig+0x47c>)
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	f003 030c 	and.w	r3, r3, #12
 8000f86:	2b08      	cmp	r3, #8
 8000f88:	d05c      	beq.n	8001044 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	699b      	ldr	r3, [r3, #24]
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d141      	bne.n	8001016 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f92:	4b32      	ldr	r3, [pc, #200]	; (800105c <HAL_RCC_OscConfig+0x480>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f98:	f7ff fb58 	bl	800064c <HAL_GetTick>
 8000f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f9e:	e008      	b.n	8000fb2 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fa0:	f7ff fb54 	bl	800064c <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d901      	bls.n	8000fb2 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e04b      	b.n	800104a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fb2:	4b29      	ldr	r3, [pc, #164]	; (8001058 <HAL_RCC_OscConfig+0x47c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d1f0      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	69da      	ldr	r2, [r3, #28]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6a1b      	ldr	r3, [r3, #32]
 8000fc6:	431a      	orrs	r2, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fcc:	019b      	lsls	r3, r3, #6
 8000fce:	431a      	orrs	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd4:	085b      	lsrs	r3, r3, #1
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	041b      	lsls	r3, r3, #16
 8000fda:	431a      	orrs	r2, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe0:	061b      	lsls	r3, r3, #24
 8000fe2:	491d      	ldr	r1, [pc, #116]	; (8001058 <HAL_RCC_OscConfig+0x47c>)
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fe8:	4b1c      	ldr	r3, [pc, #112]	; (800105c <HAL_RCC_OscConfig+0x480>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fee:	f7ff fb2d 	bl	800064c <HAL_GetTick>
 8000ff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ff4:	e008      	b.n	8001008 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ff6:	f7ff fb29 	bl	800064c <HAL_GetTick>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	2b02      	cmp	r3, #2
 8001002:	d901      	bls.n	8001008 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001004:	2303      	movs	r3, #3
 8001006:	e020      	b.n	800104a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001008:	4b13      	ldr	r3, [pc, #76]	; (8001058 <HAL_RCC_OscConfig+0x47c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d0f0      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x41a>
 8001014:	e018      	b.n	8001048 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001016:	4b11      	ldr	r3, [pc, #68]	; (800105c <HAL_RCC_OscConfig+0x480>)
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800101c:	f7ff fb16 	bl	800064c <HAL_GetTick>
 8001020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001022:	e008      	b.n	8001036 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001024:	f7ff fb12 	bl	800064c <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b02      	cmp	r3, #2
 8001030:	d901      	bls.n	8001036 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	e009      	b.n	800104a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001036:	4b08      	ldr	r3, [pc, #32]	; (8001058 <HAL_RCC_OscConfig+0x47c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d1f0      	bne.n	8001024 <HAL_RCC_OscConfig+0x448>
 8001042:	e001      	b.n	8001048 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	e000      	b.n	800104a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40007000 	.word	0x40007000
 8001058:	40023800 	.word	0x40023800
 800105c:	42470060 	.word	0x42470060

08001060 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d101      	bne.n	8001074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e0ca      	b.n	800120a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001074:	4b67      	ldr	r3, [pc, #412]	; (8001214 <HAL_RCC_ClockConfig+0x1b4>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 030f 	and.w	r3, r3, #15
 800107c:	683a      	ldr	r2, [r7, #0]
 800107e:	429a      	cmp	r2, r3
 8001080:	d90c      	bls.n	800109c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001082:	4b64      	ldr	r3, [pc, #400]	; (8001214 <HAL_RCC_ClockConfig+0x1b4>)
 8001084:	683a      	ldr	r2, [r7, #0]
 8001086:	b2d2      	uxtb	r2, r2
 8001088:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800108a:	4b62      	ldr	r3, [pc, #392]	; (8001214 <HAL_RCC_ClockConfig+0x1b4>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 030f 	and.w	r3, r3, #15
 8001092:	683a      	ldr	r2, [r7, #0]
 8001094:	429a      	cmp	r2, r3
 8001096:	d001      	beq.n	800109c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	e0b6      	b.n	800120a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 0302 	and.w	r3, r3, #2
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d020      	beq.n	80010ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0304 	and.w	r3, r3, #4
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d005      	beq.n	80010c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010b4:	4b58      	ldr	r3, [pc, #352]	; (8001218 <HAL_RCC_ClockConfig+0x1b8>)
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	4a57      	ldr	r2, [pc, #348]	; (8001218 <HAL_RCC_ClockConfig+0x1b8>)
 80010ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80010be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0308 	and.w	r3, r3, #8
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d005      	beq.n	80010d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010cc:	4b52      	ldr	r3, [pc, #328]	; (8001218 <HAL_RCC_ClockConfig+0x1b8>)
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	4a51      	ldr	r2, [pc, #324]	; (8001218 <HAL_RCC_ClockConfig+0x1b8>)
 80010d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80010d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010d8:	4b4f      	ldr	r3, [pc, #316]	; (8001218 <HAL_RCC_ClockConfig+0x1b8>)
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	494c      	ldr	r1, [pc, #304]	; (8001218 <HAL_RCC_ClockConfig+0x1b8>)
 80010e6:	4313      	orrs	r3, r2
 80010e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d044      	beq.n	8001180 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d107      	bne.n	800110e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010fe:	4b46      	ldr	r3, [pc, #280]	; (8001218 <HAL_RCC_ClockConfig+0x1b8>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d119      	bne.n	800113e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e07d      	b.n	800120a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	2b02      	cmp	r3, #2
 8001114:	d003      	beq.n	800111e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800111a:	2b03      	cmp	r3, #3
 800111c:	d107      	bne.n	800112e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800111e:	4b3e      	ldr	r3, [pc, #248]	; (8001218 <HAL_RCC_ClockConfig+0x1b8>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d109      	bne.n	800113e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e06d      	b.n	800120a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800112e:	4b3a      	ldr	r3, [pc, #232]	; (8001218 <HAL_RCC_ClockConfig+0x1b8>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d101      	bne.n	800113e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e065      	b.n	800120a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800113e:	4b36      	ldr	r3, [pc, #216]	; (8001218 <HAL_RCC_ClockConfig+0x1b8>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	f023 0203 	bic.w	r2, r3, #3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	4933      	ldr	r1, [pc, #204]	; (8001218 <HAL_RCC_ClockConfig+0x1b8>)
 800114c:	4313      	orrs	r3, r2
 800114e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001150:	f7ff fa7c 	bl	800064c <HAL_GetTick>
 8001154:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001156:	e00a      	b.n	800116e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001158:	f7ff fa78 	bl	800064c <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	f241 3288 	movw	r2, #5000	; 0x1388
 8001166:	4293      	cmp	r3, r2
 8001168:	d901      	bls.n	800116e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e04d      	b.n	800120a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800116e:	4b2a      	ldr	r3, [pc, #168]	; (8001218 <HAL_RCC_ClockConfig+0x1b8>)
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	f003 020c 	and.w	r2, r3, #12
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	429a      	cmp	r2, r3
 800117e:	d1eb      	bne.n	8001158 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001180:	4b24      	ldr	r3, [pc, #144]	; (8001214 <HAL_RCC_ClockConfig+0x1b4>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 030f 	and.w	r3, r3, #15
 8001188:	683a      	ldr	r2, [r7, #0]
 800118a:	429a      	cmp	r2, r3
 800118c:	d20c      	bcs.n	80011a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800118e:	4b21      	ldr	r3, [pc, #132]	; (8001214 <HAL_RCC_ClockConfig+0x1b4>)
 8001190:	683a      	ldr	r2, [r7, #0]
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001196:	4b1f      	ldr	r3, [pc, #124]	; (8001214 <HAL_RCC_ClockConfig+0x1b4>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 030f 	and.w	r3, r3, #15
 800119e:	683a      	ldr	r2, [r7, #0]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d001      	beq.n	80011a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e030      	b.n	800120a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0304 	and.w	r3, r3, #4
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d008      	beq.n	80011c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011b4:	4b18      	ldr	r3, [pc, #96]	; (8001218 <HAL_RCC_ClockConfig+0x1b8>)
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	4915      	ldr	r1, [pc, #84]	; (8001218 <HAL_RCC_ClockConfig+0x1b8>)
 80011c2:	4313      	orrs	r3, r2
 80011c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0308 	and.w	r3, r3, #8
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d009      	beq.n	80011e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011d2:	4b11      	ldr	r3, [pc, #68]	; (8001218 <HAL_RCC_ClockConfig+0x1b8>)
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	691b      	ldr	r3, [r3, #16]
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	490d      	ldr	r1, [pc, #52]	; (8001218 <HAL_RCC_ClockConfig+0x1b8>)
 80011e2:	4313      	orrs	r3, r2
 80011e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011e6:	f000 f81d 	bl	8001224 <HAL_RCC_GetSysClockFreq>
 80011ea:	4601      	mov	r1, r0
 80011ec:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <HAL_RCC_ClockConfig+0x1b8>)
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	091b      	lsrs	r3, r3, #4
 80011f2:	f003 030f 	and.w	r3, r3, #15
 80011f6:	4a09      	ldr	r2, [pc, #36]	; (800121c <HAL_RCC_ClockConfig+0x1bc>)
 80011f8:	5cd3      	ldrb	r3, [r2, r3]
 80011fa:	fa21 f303 	lsr.w	r3, r1, r3
 80011fe:	4a08      	ldr	r2, [pc, #32]	; (8001220 <HAL_RCC_ClockConfig+0x1c0>)
 8001200:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001202:	2000      	movs	r0, #0
 8001204:	f7ff f9de 	bl	80005c4 <HAL_InitTick>

  return HAL_OK;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40023c00 	.word	0x40023c00
 8001218:	40023800 	.word	0x40023800
 800121c:	08007120 	.word	0x08007120
 8001220:	20000020 	.word	0x20000020

08001224 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800122a:	2300      	movs	r3, #0
 800122c:	607b      	str	r3, [r7, #4]
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	2300      	movs	r3, #0
 8001234:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001236:	2300      	movs	r3, #0
 8001238:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800123a:	4b63      	ldr	r3, [pc, #396]	; (80013c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f003 030c 	and.w	r3, r3, #12
 8001242:	2b04      	cmp	r3, #4
 8001244:	d007      	beq.n	8001256 <HAL_RCC_GetSysClockFreq+0x32>
 8001246:	2b08      	cmp	r3, #8
 8001248:	d008      	beq.n	800125c <HAL_RCC_GetSysClockFreq+0x38>
 800124a:	2b00      	cmp	r3, #0
 800124c:	f040 80b4 	bne.w	80013b8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001250:	4b5e      	ldr	r3, [pc, #376]	; (80013cc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001252:	60bb      	str	r3, [r7, #8]
       break;
 8001254:	e0b3      	b.n	80013be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001256:	4b5e      	ldr	r3, [pc, #376]	; (80013d0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001258:	60bb      	str	r3, [r7, #8]
      break;
 800125a:	e0b0      	b.n	80013be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800125c:	4b5a      	ldr	r3, [pc, #360]	; (80013c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001264:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001266:	4b58      	ldr	r3, [pc, #352]	; (80013c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d04a      	beq.n	8001308 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001272:	4b55      	ldr	r3, [pc, #340]	; (80013c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	099b      	lsrs	r3, r3, #6
 8001278:	f04f 0400 	mov.w	r4, #0
 800127c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001280:	f04f 0200 	mov.w	r2, #0
 8001284:	ea03 0501 	and.w	r5, r3, r1
 8001288:	ea04 0602 	and.w	r6, r4, r2
 800128c:	4629      	mov	r1, r5
 800128e:	4632      	mov	r2, r6
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	f04f 0400 	mov.w	r4, #0
 8001298:	0154      	lsls	r4, r2, #5
 800129a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800129e:	014b      	lsls	r3, r1, #5
 80012a0:	4619      	mov	r1, r3
 80012a2:	4622      	mov	r2, r4
 80012a4:	1b49      	subs	r1, r1, r5
 80012a6:	eb62 0206 	sbc.w	r2, r2, r6
 80012aa:	f04f 0300 	mov.w	r3, #0
 80012ae:	f04f 0400 	mov.w	r4, #0
 80012b2:	0194      	lsls	r4, r2, #6
 80012b4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80012b8:	018b      	lsls	r3, r1, #6
 80012ba:	1a5b      	subs	r3, r3, r1
 80012bc:	eb64 0402 	sbc.w	r4, r4, r2
 80012c0:	f04f 0100 	mov.w	r1, #0
 80012c4:	f04f 0200 	mov.w	r2, #0
 80012c8:	00e2      	lsls	r2, r4, #3
 80012ca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80012ce:	00d9      	lsls	r1, r3, #3
 80012d0:	460b      	mov	r3, r1
 80012d2:	4614      	mov	r4, r2
 80012d4:	195b      	adds	r3, r3, r5
 80012d6:	eb44 0406 	adc.w	r4, r4, r6
 80012da:	f04f 0100 	mov.w	r1, #0
 80012de:	f04f 0200 	mov.w	r2, #0
 80012e2:	0262      	lsls	r2, r4, #9
 80012e4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80012e8:	0259      	lsls	r1, r3, #9
 80012ea:	460b      	mov	r3, r1
 80012ec:	4614      	mov	r4, r2
 80012ee:	4618      	mov	r0, r3
 80012f0:	4621      	mov	r1, r4
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f04f 0400 	mov.w	r4, #0
 80012f8:	461a      	mov	r2, r3
 80012fa:	4623      	mov	r3, r4
 80012fc:	f7fe ffc0 	bl	8000280 <__aeabi_uldivmod>
 8001300:	4603      	mov	r3, r0
 8001302:	460c      	mov	r4, r1
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	e049      	b.n	800139c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001308:	4b2f      	ldr	r3, [pc, #188]	; (80013c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	099b      	lsrs	r3, r3, #6
 800130e:	f04f 0400 	mov.w	r4, #0
 8001312:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001316:	f04f 0200 	mov.w	r2, #0
 800131a:	ea03 0501 	and.w	r5, r3, r1
 800131e:	ea04 0602 	and.w	r6, r4, r2
 8001322:	4629      	mov	r1, r5
 8001324:	4632      	mov	r2, r6
 8001326:	f04f 0300 	mov.w	r3, #0
 800132a:	f04f 0400 	mov.w	r4, #0
 800132e:	0154      	lsls	r4, r2, #5
 8001330:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001334:	014b      	lsls	r3, r1, #5
 8001336:	4619      	mov	r1, r3
 8001338:	4622      	mov	r2, r4
 800133a:	1b49      	subs	r1, r1, r5
 800133c:	eb62 0206 	sbc.w	r2, r2, r6
 8001340:	f04f 0300 	mov.w	r3, #0
 8001344:	f04f 0400 	mov.w	r4, #0
 8001348:	0194      	lsls	r4, r2, #6
 800134a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800134e:	018b      	lsls	r3, r1, #6
 8001350:	1a5b      	subs	r3, r3, r1
 8001352:	eb64 0402 	sbc.w	r4, r4, r2
 8001356:	f04f 0100 	mov.w	r1, #0
 800135a:	f04f 0200 	mov.w	r2, #0
 800135e:	00e2      	lsls	r2, r4, #3
 8001360:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001364:	00d9      	lsls	r1, r3, #3
 8001366:	460b      	mov	r3, r1
 8001368:	4614      	mov	r4, r2
 800136a:	195b      	adds	r3, r3, r5
 800136c:	eb44 0406 	adc.w	r4, r4, r6
 8001370:	f04f 0100 	mov.w	r1, #0
 8001374:	f04f 0200 	mov.w	r2, #0
 8001378:	02a2      	lsls	r2, r4, #10
 800137a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800137e:	0299      	lsls	r1, r3, #10
 8001380:	460b      	mov	r3, r1
 8001382:	4614      	mov	r4, r2
 8001384:	4618      	mov	r0, r3
 8001386:	4621      	mov	r1, r4
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f04f 0400 	mov.w	r4, #0
 800138e:	461a      	mov	r2, r3
 8001390:	4623      	mov	r3, r4
 8001392:	f7fe ff75 	bl	8000280 <__aeabi_uldivmod>
 8001396:	4603      	mov	r3, r0
 8001398:	460c      	mov	r4, r1
 800139a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800139c:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	0c1b      	lsrs	r3, r3, #16
 80013a2:	f003 0303 	and.w	r3, r3, #3
 80013a6:	3301      	adds	r3, #1
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80013ac:	68fa      	ldr	r2, [r7, #12]
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b4:	60bb      	str	r3, [r7, #8]
      break;
 80013b6:	e002      	b.n	80013be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80013b8:	4b04      	ldr	r3, [pc, #16]	; (80013cc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80013ba:	60bb      	str	r3, [r7, #8]
      break;
 80013bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013be:	68bb      	ldr	r3, [r7, #8]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013c8:	40023800 	.word	0x40023800
 80013cc:	00f42400 	.word	0x00f42400
 80013d0:	007a1200 	.word	0x007a1200

080013d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013d8:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80013da:	681b      	ldr	r3, [r3, #0]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000020 	.word	0x20000020

080013ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80013f0:	f7ff fff0 	bl	80013d4 <HAL_RCC_GetHCLKFreq>
 80013f4:	4601      	mov	r1, r0
 80013f6:	4b05      	ldr	r3, [pc, #20]	; (800140c <HAL_RCC_GetPCLK1Freq+0x20>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	0a9b      	lsrs	r3, r3, #10
 80013fc:	f003 0307 	and.w	r3, r3, #7
 8001400:	4a03      	ldr	r2, [pc, #12]	; (8001410 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001402:	5cd3      	ldrb	r3, [r2, r3]
 8001404:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001408:	4618      	mov	r0, r3
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40023800 	.word	0x40023800
 8001410:	08007130 	.word	0x08007130

08001414 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001418:	f7ff ffdc 	bl	80013d4 <HAL_RCC_GetHCLKFreq>
 800141c:	4601      	mov	r1, r0
 800141e:	4b05      	ldr	r3, [pc, #20]	; (8001434 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	0b5b      	lsrs	r3, r3, #13
 8001424:	f003 0307 	and.w	r3, r3, #7
 8001428:	4a03      	ldr	r2, [pc, #12]	; (8001438 <HAL_RCC_GetPCLK2Freq+0x24>)
 800142a:	5cd3      	ldrb	r3, [r2, r3]
 800142c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001430:	4618      	mov	r0, r3
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40023800 	.word	0x40023800
 8001438:	08007130 	.word	0x08007130

0800143c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e01d      	b.n	800148a <HAL_SD_Init+0x4e>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001454:	b2db      	uxtb	r3, r3
 8001456:	2b00      	cmp	r3, #0
 8001458:	d105      	bne.n	8001466 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2200      	movs	r2, #0
 800145e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f004 ffb9 	bl	80063d8 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2203      	movs	r2, #3
 800146a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f000 f810 	bl	8001494 <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2201      	movs	r2, #1
 8001484:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
	...

08001494 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8001494:	b5b0      	push	{r4, r5, r7, lr}
 8001496:	b08e      	sub	sp, #56	; 0x38
 8001498:	af04      	add	r7, sp, #16
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800149c:	2300      	movs	r3, #0
 800149e:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80014b4:	2376      	movs	r3, #118	; 0x76
 80014b6:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681d      	ldr	r5, [r3, #0]
 80014bc:	466c      	mov	r4, sp
 80014be:	f107 0318 	add.w	r3, r7, #24
 80014c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80014c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80014ca:	f107 030c 	add.w	r3, r7, #12
 80014ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014d0:	4628      	mov	r0, r5
 80014d2:	f001 fc69 	bl	8002da8 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd); 
 80014d6:	4b1c      	ldr	r3, [pc, #112]	; (8001548 <HAL_SD_InitCard+0xb4>)
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  SDIO_PowerState_ON(hsd->Instance);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f001 fcaa 	bl	8002e3a <SDIO_PowerState_ON>
  
  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80014e6:	4b18      	ldr	r3, [pc, #96]	; (8001548 <HAL_SD_InitCard+0xb4>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	601a      	str	r2, [r3, #0]
  
  /* Required power up waiting time before starting the SD initialization 
  sequence */
  HAL_Delay(2U);
 80014ec:	2002      	movs	r0, #2
 80014ee:	f7ff f8b9 	bl	8000664 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f000 fee8 	bl	80022c8 <SD_PowerON>
 80014f8:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80014fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d00b      	beq.n	8001518 <HAL_SD_InitCard+0x84>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2201      	movs	r2, #1
 8001504:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150e:	431a      	orrs	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e013      	b.n	8001540 <HAL_SD_InitCard+0xac>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f000 fe0c 	bl	8002136 <SD_InitCard>
 800151e:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8001520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001522:	2b00      	cmp	r3, #0
 8001524:	d00b      	beq.n	800153e <HAL_SD_InitCard+0xaa>
  {
    hsd->State = HAL_SD_STATE_READY;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2201      	movs	r2, #1
 800152a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001534:	431a      	orrs	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e000      	b.n	8001540 <HAL_SD_InitCard+0xac>
  }

  return HAL_OK;
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	3728      	adds	r7, #40	; 0x28
 8001544:	46bd      	mov	sp, r7
 8001546:	bdb0      	pop	{r4, r5, r7, pc}
 8001548:	422580a0 	.word	0x422580a0

0800154c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800154c:	b590      	push	{r4, r7, lr}
 800154e:	b08f      	sub	sp, #60	; 0x3c
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
 8001558:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800155a:	2300      	movs	r3, #0
 800155c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 800155e:	f7ff f875 	bl	800064c <HAL_GetTick>
 8001562:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0U, *tempbuff = (uint32_t *)pData;
 8001564:	2300      	movs	r3, #0
 8001566:	633b      	str	r3, [r7, #48]	; 0x30
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d107      	bne.n	8001582 <HAL_SD_ReadBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001576:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e177      	b.n	8001872 <HAL_SD_ReadBlocks+0x326>
  }
 
  if(hsd->State == HAL_SD_STATE_READY)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b01      	cmp	r3, #1
 800158c:	f040 816a 	bne.w	8001864 <HAL_SD_ReadBlocks+0x318>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2200      	movs	r2, #0
 8001594:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	441a      	add	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d907      	bls.n	80015b4 <HAL_SD_ReadBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015a8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e15e      	b.n	8001872 <HAL_SD_ReadBlocks+0x326>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2203      	movs	r2, #3
 80015b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2200      	movs	r2, #0
 80015c2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d002      	beq.n	80015d2 <HAL_SD_ReadBlocks+0x86>
    {
      BlockAdd *= 512U;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	025b      	lsls	r3, r3, #9
 80015d0:	607b      	str	r3, [r7, #4]
    }
      
    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015da:	4618      	mov	r0, r3
 80015dc:	f001 fcc1 	bl	8002f62 <SDMMC_CmdBlockLength>
 80015e0:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 80015e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d010      	beq.n	800160a <HAL_SD_ReadBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);      
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80015f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015f8:	431a      	orrs	r2, r3
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2201      	movs	r2, #1
 8001602:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e133      	b.n	8001872 <HAL_SD_ReadBlocks+0x326>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800160a:	f04f 33ff 	mov.w	r3, #4294967295
 800160e:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	025b      	lsls	r3, r3, #9
 8001614:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001616:	2390      	movs	r3, #144	; 0x90
 8001618:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800161a:	2302      	movs	r3, #2
 800161c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800161e:	2300      	movs	r3, #0
 8001620:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001622:	2301      	movs	r3, #1
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
    SDIO_ConfigData(hsd->Instance, &config);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f107 0210 	add.w	r2, r7, #16
 800162e:	4611      	mov	r1, r2
 8001630:	4618      	mov	r0, r3
 8001632:	f001 fc6a 	bl	8002f0a <SDIO_ConfigData>
    
    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d90a      	bls.n	8001652 <HAL_SD_ReadBlocks+0x106>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2202      	movs	r2, #2
 8001640:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	4618      	mov	r0, r3
 800164a:	f001 fcd2 	bl	8002ff2 <SDMMC_CmdReadMultiBlock>
 800164e:	6378      	str	r0, [r7, #52]	; 0x34
 8001650:	e009      	b.n	8001666 <HAL_SD_ReadBlocks+0x11a>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2201      	movs	r2, #1
 8001656:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6879      	ldr	r1, [r7, #4]
 800165e:	4618      	mov	r0, r3
 8001660:	f001 fca3 	bl	8002faa <SDMMC_CmdReadSingleBlock>
 8001664:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8001666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001668:	2b00      	cmp	r3, #0
 800166a:	d04a      	beq.n	8001702 <HAL_SD_ReadBlocks+0x1b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001674:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800167a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800167c:	431a      	orrs	r2, r3
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2201      	movs	r2, #1
 8001686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e0f1      	b.n	8001872 <HAL_SD_ReadBlocks+0x326>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001694:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d016      	beq.n	80016ca <HAL_SD_ReadBlocks+0x17e>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800169c:	2300      	movs	r3, #0
 800169e:	633b      	str	r3, [r7, #48]	; 0x30
 80016a0:	e00d      	b.n	80016be <HAL_SD_ReadBlocks+0x172>
        {
          *(tempbuff + count) = SDIO_ReadFIFO(hsd->Instance);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	6819      	ldr	r1, [r3, #0]
 80016a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016ac:	18d4      	adds	r4, r2, r3
 80016ae:	4608      	mov	r0, r1
 80016b0:	f001 fba5 	bl	8002dfe <SDIO_ReadFIFO>
 80016b4:	4603      	mov	r3, r0
 80016b6:	6023      	str	r3, [r4, #0]
        for(count = 0U; count < 8U; count++)
 80016b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016ba:	3301      	adds	r3, #1
 80016bc:	633b      	str	r3, [r7, #48]	; 0x30
 80016be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016c0:	2b07      	cmp	r3, #7
 80016c2:	d9ee      	bls.n	80016a2 <HAL_SD_ReadBlocks+0x156>
        }
        tempbuff += 8U;
 80016c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c6:	3320      	adds	r3, #32
 80016c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 80016ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d007      	beq.n	80016e0 <HAL_SD_ReadBlocks+0x194>
 80016d0:	f7fe ffbc 	bl	800064c <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80016dc:	429a      	cmp	r2, r3
 80016de:	d810      	bhi.n	8001702 <HAL_SD_ReadBlocks+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80016e8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ee:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2201      	movs	r2, #1
 80016fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e0b7      	b.n	8001872 <HAL_SD_ReadBlocks+0x326>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_STA_STBITERR))
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001708:	f240 332a 	movw	r3, #810	; 0x32a
 800170c:	4013      	ands	r3, r2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0bd      	beq.n	800168e <HAL_SD_ReadBlocks+0x142>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171c:	2b00      	cmp	r3, #0
 800171e:	d020      	beq.n	8001762 <HAL_SD_ReadBlocks+0x216>
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d91d      	bls.n	8001762 <HAL_SD_ReadBlocks+0x216>
    {    
      if(hsd->SdCard.CardType != CARD_SECURED)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172a:	2b03      	cmp	r3, #3
 800172c:	d019      	beq.n	8001762 <HAL_SD_ReadBlocks+0x216>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f001 fcca 	bl	80030cc <SDMMC_CmdStopTransfer>
 8001738:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 800173a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800173c:	2b00      	cmp	r3, #0
 800173e:	d010      	beq.n	8001762 <HAL_SD_ReadBlocks+0x216>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001748:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800174e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001750:	431a      	orrs	r2, r3
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2201      	movs	r2, #1
 800175a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e087      	b.n	8001872 <HAL_SD_ReadBlocks+0x326>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001768:	f003 0308 	and.w	r3, r3, #8
 800176c:	2b00      	cmp	r3, #0
 800176e:	d010      	beq.n	8001792 <HAL_SD_ReadBlocks+0x246>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001778:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800177e:	f043 0208 	orr.w	r2, r3, #8
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2201      	movs	r2, #1
 800178a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e06f      	b.n	8001872 <HAL_SD_ReadBlocks+0x326>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d010      	beq.n	80017c2 <HAL_SD_ReadBlocks+0x276>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80017a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ae:	f043 0202 	orr.w	r2, r3, #2
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2201      	movs	r2, #1
 80017ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e057      	b.n	8001872 <HAL_SD_ReadBlocks+0x326>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017c8:	f003 0320 	and.w	r3, r3, #32
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d037      	beq.n	8001840 <HAL_SD_ReadBlocks+0x2f4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80017d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017de:	f043 0220 	orr.w	r2, r3, #32
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2201      	movs	r2, #1
 80017ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e03f      	b.n	8001872 <HAL_SD_ReadBlocks+0x326>
    }
    
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
    {
      *tempbuff = SDIO_ReadFIFO(hsd->Instance);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f001 fb01 	bl	8002dfe <SDIO_ReadFIFO>
 80017fc:	4602      	mov	r2, r0
 80017fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001800:	601a      	str	r2, [r3, #0]
      tempbuff++;
 8001802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001804:	3304      	adds	r3, #4
 8001806:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8001808:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800180a:	2b00      	cmp	r3, #0
 800180c:	d007      	beq.n	800181e <HAL_SD_ReadBlocks+0x2d2>
 800180e:	f7fe ff1d 	bl	800064c <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800181a:	429a      	cmp	r2, r3
 800181c:	d810      	bhi.n	8001840 <HAL_SD_ReadBlocks+0x2f4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);        
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001826:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800182c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e018      	b.n	8001872 <HAL_SD_ReadBlocks+0x326>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001846:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1d1      	bne.n	80017f2 <HAL_SD_ReadBlocks+0x2a6>
      }
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001856:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8001860:	2300      	movs	r3, #0
 8001862:	e006      	b.n	8001872 <HAL_SD_ReadBlocks+0x326>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001868:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
  }
}
 8001872:	4618      	mov	r0, r3
 8001874:	373c      	adds	r7, #60	; 0x3c
 8001876:	46bd      	mov	sp, r7
 8001878:	bd90      	pop	{r4, r7, pc}

0800187a <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b08e      	sub	sp, #56	; 0x38
 800187e:	af00      	add	r7, sp, #0
 8001880:	60f8      	str	r0, [r7, #12]
 8001882:	60b9      	str	r1, [r7, #8]
 8001884:	607a      	str	r2, [r7, #4]
 8001886:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8001888:	2300      	movs	r3, #0
 800188a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 800188c:	f7fe fede 	bl	800064c <HAL_GetTick>
 8001890:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0U;
 8001892:	2300      	movs	r3, #0
 8001894:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t *tempbuff = (uint32_t *)pData;
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d107      	bne.n	80018b0 <HAL_SD_WriteBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e148      	b.n	8001b42 <HAL_SD_WriteBlocks+0x2c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	f040 813b 	bne.w	8001b34 <HAL_SD_WriteBlocks+0x2ba>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2200      	movs	r2, #0
 80018c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	441a      	add	r2, r3
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d907      	bls.n	80018e2 <HAL_SD_WriteBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018d6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e12f      	b.n	8001b42 <HAL_SD_WriteBlocks+0x2c8>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2203      	movs	r2, #3
 80018e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2200      	movs	r2, #0
 80018f0:	62da      	str	r2, [r3, #44]	; 0x2c
     
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d002      	beq.n	8001900 <HAL_SD_WriteBlocks+0x86>
    {
      BlockAdd *= 512U;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	025b      	lsls	r3, r3, #9
 80018fe:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001908:	4618      	mov	r0, r3
 800190a:	f001 fb2a 	bl	8002f62 <SDMMC_CmdBlockLength>
 800190e:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 8001910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001912:	2b00      	cmp	r3, #0
 8001914:	d010      	beq.n	8001938 <HAL_SD_WriteBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800191e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001926:	431a      	orrs	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e104      	b.n	8001b42 <HAL_SD_WriteBlocks+0x2c8>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d90a      	bls.n	8001954 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	2220      	movs	r2, #32
 8001942:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6879      	ldr	r1, [r7, #4]
 800194a:	4618      	mov	r0, r3
 800194c:	f001 fb99 	bl	8003082 <SDMMC_CmdWriteMultiBlock>
 8001950:	6378      	str	r0, [r7, #52]	; 0x34
 8001952:	e009      	b.n	8001968 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2210      	movs	r2, #16
 8001958:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	4618      	mov	r0, r3
 8001962:	f001 fb6a 	bl	800303a <SDMMC_CmdWriteSingleBlock>
 8001966:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8001968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800196a:	2b00      	cmp	r3, #0
 800196c:	d010      	beq.n	8001990 <HAL_SD_WriteBlocks+0x116>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001976:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800197c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800197e:	431a      	orrs	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e0d8      	b.n	8001b42 <HAL_SD_WriteBlocks+0x2c8>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001990:	f04f 33ff 	mov.w	r3, #4294967295
 8001994:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	025b      	lsls	r3, r3, #9
 800199a:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800199c:	2390      	movs	r3, #144	; 0x90
 800199e:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80019a0:	2300      	movs	r3, #0
 80019a2:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80019a4:	2300      	movs	r3, #0
 80019a6:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 80019a8:	2301      	movs	r3, #1
 80019aa:	627b      	str	r3, [r7, #36]	; 0x24
    SDIO_ConfigData(hsd->Instance, &config);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f107 0210 	add.w	r2, r7, #16
 80019b4:	4611      	mov	r1, r2
 80019b6:	4618      	mov	r0, r3
 80019b8:	f001 faa7 	bl	8002f0a <SDIO_ConfigData>
    
    /* Write block(s) in polling mode */
#ifdef SDIO_STA_STBITERR
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80019bc:	e037      	b.n	8001a2e <HAL_SD_WriteBlocks+0x1b4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE))
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d014      	beq.n	80019f6 <HAL_SD_WriteBlocks+0x17c>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80019cc:	2300      	movs	r3, #0
 80019ce:	633b      	str	r3, [r7, #48]	; 0x30
 80019d0:	e00b      	b.n	80019ea <HAL_SD_WriteBlocks+0x170>
        {
          SDIO_WriteFIFO(hsd->Instance, (tempbuff + count));
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	6818      	ldr	r0, [r3, #0]
 80019d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019dc:	4413      	add	r3, r2
 80019de:	4619      	mov	r1, r3
 80019e0:	f001 fa1a 	bl	8002e18 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80019e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019e6:	3301      	adds	r3, #1
 80019e8:	633b      	str	r3, [r7, #48]	; 0x30
 80019ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ec:	2b07      	cmp	r3, #7
 80019ee:	d9f0      	bls.n	80019d2 <HAL_SD_WriteBlocks+0x158>
        }
        tempbuff += 8U;
 80019f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019f2:	3320      	adds	r3, #32
 80019f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 80019f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d007      	beq.n	8001a0c <HAL_SD_WriteBlocks+0x192>
 80019fc:	f7fe fe26 	bl	800064c <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d810      	bhi.n	8001a2e <HAL_SD_WriteBlocks+0x1b4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001a14:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a1c:	431a      	orrs	r2, r3
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2201      	movs	r2, #1
 8001a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e089      	b.n	8001b42 <HAL_SD_WriteBlocks+0x2c8>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a34:	f240 331a 	movw	r3, #794	; 0x31a
 8001a38:	4013      	ands	r3, r2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d0bf      	beq.n	80019be <HAL_SD_WriteBlocks+0x144>
      }
    }
    
    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d020      	beq.n	8001a8e <HAL_SD_WriteBlocks+0x214>
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d91d      	bls.n	8001a8e <HAL_SD_WriteBlocks+0x214>
    { 
      if(hsd->SdCard.CardType != CARD_SECURED)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a56:	2b03      	cmp	r3, #3
 8001a58:	d019      	beq.n	8001a8e <HAL_SD_WriteBlocks+0x214>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f001 fb34 	bl	80030cc <SDMMC_CmdStopTransfer>
 8001a64:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8001a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d010      	beq.n	8001a8e <HAL_SD_WriteBlocks+0x214>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001a74:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2201      	movs	r2, #1
 8001a86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e059      	b.n	8001b42 <HAL_SD_WriteBlocks+0x2c8>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a94:	f003 0308 	and.w	r3, r3, #8
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d010      	beq.n	8001abe <HAL_SD_WriteBlocks+0x244>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001aa4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aaa:	f043 0208 	orr.w	r2, r3, #8
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e041      	b.n	8001b42 <HAL_SD_WriteBlocks+0x2c8>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d010      	beq.n	8001aee <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001ad4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ada:	f043 0202 	orr.w	r2, r3, #2
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e029      	b.n	8001b42 <HAL_SD_WriteBlocks+0x2c8>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001af4:	f003 0310 	and.w	r3, r3, #16
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d010      	beq.n	8001b1e <HAL_SD_WriteBlocks+0x2a4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001b04:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b0a:	f043 0210 	orr.w	r2, r3, #16
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2201      	movs	r2, #1
 8001b16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e011      	b.n	8001b42 <HAL_SD_WriteBlocks+0x2c8>
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001b26:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8001b30:	2300      	movs	r3, #0
 8001b32:	e006      	b.n	8001b42 <HAL_SD_WriteBlocks+0x2c8>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b38:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
  }
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3738      	adds	r7, #56	; 0x38
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b085      	sub	sp, #20
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
 8001b52:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8001b54:	2300      	movs	r3, #0
 8001b56:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b5c:	0e1b      	lsrs	r3, r3, #24
 8001b5e:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	099b      	lsrs	r3, r3, #6
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	089b      	lsrs	r3, r3, #2
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	f003 030f 	and.w	r3, r3, #15
 8001b7a:	b2da      	uxtb	r2, r3
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	f003 0303 	and.w	r3, r3, #3
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0U] & 0x00FF0000U) >> 16U;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b92:	0c1b      	lsrs	r3, r3, #16
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	b2da      	uxtb	r2, r3
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0U] & 0x0000FF00U) >> 8U;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ba4:	0a1b      	lsrs	r3, r3, #8
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	b2da      	uxtb	r2, r3
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0U] & 0x000000FFU;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001bc6:	0e1b      	lsrs	r3, r3, #24
 8001bc8:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	011b      	lsls	r3, r3, #4
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1U] & 0x00FF0000U) >> 16U;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001bda:	0c1b      	lsrs	r3, r3, #16
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	88db      	ldrh	r3, [r3, #6]
 8001be4:	b29a      	uxth	r2, r3
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	091b      	lsrs	r3, r3, #4
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	f003 030f 	and.w	r3, r3, #15
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	f003 030f 	and.w	r3, r3, #15
 8001c02:	b2da      	uxtb	r2, r3
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c0c:	0a1b      	lsrs	r3, r3, #8
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	09db      	lsrs	r3, r3, #7
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	099b      	lsrs	r3, r3, #6
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	095b      	lsrs	r3, r3, #5
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	f003 0301 	and.w	r3, r3, #1
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	091b      	lsrs	r3, r3, #4
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	2200      	movs	r2, #0
 8001c56:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f040 8087 	bne.w	8001d70 <HAL_SD_GetCardCSD+0x226>
  {
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	029b      	lsls	r3, r3, #10
 8001c66:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2U;
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	691a      	ldr	r2, [r3, #16]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c88:	0e1b      	lsrs	r3, r3, #24
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	691a      	ldr	r2, [r3, #16]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	099b      	lsrs	r3, r3, #6
 8001c96:	f003 0303 	and.w	r3, r3, #3
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	08db      	lsrs	r3, r3, #3
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	b2da      	uxtb	r2, r3
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cc2:	0c1b      	lsrs	r3, r3, #16
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	095b      	lsrs	r3, r3, #5
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	089b      	lsrs	r3, r3, #2
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	f003 0306 	and.w	r3, r3, #6
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cfe:	0a1b      	lsrs	r3, r3, #8
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	7e1b      	ldrb	r3, [r3, #24]
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	09db      	lsrs	r3, r3, #7
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	4313      	orrs	r3, r2
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	1c5a      	adds	r2, r3, #1
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	7e1b      	ldrb	r3, [r3, #24]
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	3302      	adds	r3, #2
 8001d30:	2201      	movs	r2, #1
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001d3a:	fb02 f203 	mul.w	r2, r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	7a1b      	ldrb	r3, [r3, #8]
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	461a      	mov	r2, r3
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	fa03 f202 	lsl.w	r2, r3, r2
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001d5c:	0a52      	lsrs	r2, r2, #9
 8001d5e:	fb02 f203 	mul.w	r2, r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d6c:	661a      	str	r2, [r3, #96]	; 0x60
 8001d6e:	e04d      	b.n	8001e0c <HAL_SD_GetCardCSD+0x2c2>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d138      	bne.n	8001dea <HAL_SD_GetCardCSD+0x2a0>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1U] & 0x000000FFU);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	041b      	lsls	r3, r3, #16
 8001d84:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d90:	0e1b      	lsrs	r3, r3, #24
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8U);
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	691a      	ldr	r2, [r3, #16]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	021b      	lsls	r3, r3, #8
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x00FF0000U) >> 16U);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001da8:	0c1b      	lsrs	r3, r3, #16
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	691a      	ldr	r2, [r3, #16]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	431a      	orrs	r2, r3
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2U] & 0x0000FF00U) >> 8U);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001dbe:	0a1b      	lsrs	r3, r3, #8
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	029a      	lsls	r2, r3, #10
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	655a      	str	r2, [r3, #84]	; 0x54
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dde:	659a      	str	r2, [r3, #88]	; 0x58
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	661a      	str	r2, [r3, #96]	; 0x60
 8001de8:	e010      	b.n	8001e0c <HAL_SD_GetCardCSD+0x2c2>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001df2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e0c1      	b.n	8001f90 <HAL_SD_GetCardCSD+0x446>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	099b      	lsrs	r3, r3, #6
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	7e9b      	ldrb	r3, [r3, #26]
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	09db      	lsrs	r3, r3, #7
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e62:	0e1b      	lsrs	r3, r3, #24
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	09db      	lsrs	r3, r3, #7
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	095b      	lsrs	r3, r3, #5
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	089b      	lsrs	r3, r3, #2
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	f003 030c 	and.w	r3, r3, #12
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x00FF0000U) >> 16U);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eae:	0c1b      	lsrs	r3, r3, #16
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	7fdb      	ldrb	r3, [r3, #31]
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	099b      	lsrs	r3, r3, #6
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	f003 0303 	and.w	r3, r3, #3
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	b2da      	uxtb	r2, r3
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	095b      	lsrs	r3, r3, #5
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0U;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3U] & 0x0000FF00U) >> 8U);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efc:	0a1b      	lsrs	r3, r3, #8
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	09db      	lsrs	r3, r3, #7
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	099b      	lsrs	r3, r3, #6
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	095b      	lsrs	r3, r3, #5
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	091b      	lsrs	r3, r3, #4
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	089b      	lsrs	r3, r3, #2
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	f003 0303 	and.w	r3, r3, #3
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	f003 0303 	and.w	r3, r3, #3
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3U] & 0x000000FFU);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	085b      	lsrs	r3, r3, #1
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3714      	adds	r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8001ff4:	b5b0      	push	{r4, r5, r7, lr}
 8001ff6:	b08e      	sub	sp, #56	; 0x38
 8001ff8:	af04      	add	r7, sp, #16
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8001ffe:	2300      	movs	r3, #0
 8002000:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2203      	movs	r2, #3
 8002006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200e:	2b03      	cmp	r3, #3
 8002010:	d02e      	beq.n	8002070 <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002018:	d106      	bne.n	8002028 <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800201e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	639a      	str	r2, [r3, #56]	; 0x38
 8002026:	e029      	b.n	800207c <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800202e:	d10a      	bne.n	8002046 <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 fa1b 	bl	800246c <SD_WideBus_Enable>
 8002036:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203e:	431a      	orrs	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	639a      	str	r2, [r3, #56]	; 0x38
 8002044:	e01a      	b.n	800207c <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d10a      	bne.n	8002062 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 fa5a 	bl	8002506 <SD_WideBus_Disable>
 8002052:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205a:	431a      	orrs	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	639a      	str	r2, [r3, #56]	; 0x38
 8002060:	e00c      	b.n	800207c <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002066:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	639a      	str	r2, [r3, #56]	; 0x38
 800206e:	e005      	b.n	800207c <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002074:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002080:	2b00      	cmp	r3, #0
 8002082:	d00a      	beq.n	800209a <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800208c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e024      	b.n	80020e4 <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	623b      	str	r3, [r7, #32]
    SDIO_Init(hsd->Instance, Init);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681d      	ldr	r5, [r3, #0]
 80020c0:	466c      	mov	r4, sp
 80020c2:	f107 0318 	add.w	r3, r7, #24
 80020c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80020ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80020ce:	f107 030c 	add.w	r3, r7, #12
 80020d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020d4:	4628      	mov	r0, r5
 80020d6:	f000 fe67 	bl	8002da8 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3728      	adds	r7, #40	; 0x28
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bdb0      	pop	{r4, r5, r7, pc}

080020ec <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 80020f4:	2304      	movs	r3, #4
 80020f6:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80020f8:	2300      	movs	r3, #0
 80020fa:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 80020fc:	2300      	movs	r3, #0
 80020fe:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 8002100:	f107 030c 	add.w	r3, r7, #12
 8002104:	4619      	mov	r1, r3
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f986 	bl	8002418 <SD_SendStatus>
 800210c:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d005      	beq.n	8002120 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	431a      	orrs	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9U) & 0x0FU);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	0a5b      	lsrs	r3, r3, #9
 8002124:	b2db      	uxtb	r3, r3
 8002126:	f003 030f 	and.w	r3, r3, #15
 800212a:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 800212c:	7dfb      	ldrb	r3, [r7, #23]
}
 800212e:	4618      	mov	r0, r3
 8002130:	3718      	adds	r7, #24
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002136:	b5b0      	push	{r4, r5, r7, lr}
 8002138:	b094      	sub	sp, #80	; 0x50
 800213a:	af04      	add	r7, sp, #16
 800213c:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800213e:	2300      	movs	r3, #0
 8002140:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1U;
 8002142:	2301      	movs	r3, #1
 8002144:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	f000 fe83 	bl	8002e56 <SDIO_GetPowerState>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d102      	bne.n	800215c <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002156:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800215a:	e0b1      	b.n	80022c0 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002160:	2b03      	cmp	r3, #3
 8002162:	d02f      	beq.n	80021c4 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f001 f8c9 	bl	8003300 <SDMMC_CmdSendCID>
 800216e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <SD_InitCard+0x44>
    {
      return errorstate;
 8002176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002178:	e0a2      	b.n	80022c0 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2100      	movs	r1, #0
 8002180:	4618      	mov	r0, r3
 8002182:	f000 fead 	bl	8002ee0 <SDIO_GetResponse>
 8002186:	4602      	mov	r2, r0
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2104      	movs	r1, #4
 8002192:	4618      	mov	r0, r3
 8002194:	f000 fea4 	bl	8002ee0 <SDIO_GetResponse>
 8002198:	4602      	mov	r2, r0
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2108      	movs	r1, #8
 80021a4:	4618      	mov	r0, r3
 80021a6:	f000 fe9b 	bl	8002ee0 <SDIO_GetResponse>
 80021aa:	4602      	mov	r2, r0
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	210c      	movs	r1, #12
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 fe92 	bl	8002ee0 <SDIO_GetResponse>
 80021bc:	4602      	mov	r2, r0
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c8:	2b03      	cmp	r3, #3
 80021ca:	d00d      	beq.n	80021e8 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f107 020e 	add.w	r2, r7, #14
 80021d4:	4611      	mov	r1, r2
 80021d6:	4618      	mov	r0, r3
 80021d8:	f001 f8d3 	bl	8003382 <SDMMC_CmdSetRelAdd>
 80021dc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80021de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <SD_InitCard+0xb2>
    {
      return errorstate;
 80021e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021e6:	e06b      	b.n	80022c0 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ec:	2b03      	cmp	r3, #3
 80021ee:	d036      	beq.n	800225e <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80021f0:	89fb      	ldrh	r3, [r7, #14]
 80021f2:	461a      	mov	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002200:	041b      	lsls	r3, r3, #16
 8002202:	4619      	mov	r1, r3
 8002204:	4610      	mov	r0, r2
 8002206:	f001 f89b 	bl	8003340 <SDMMC_CmdSendCSD>
 800220a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800220c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <SD_InitCard+0xe0>
    {
      return errorstate;
 8002212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002214:	e054      	b.n	80022c0 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2100      	movs	r1, #0
 800221c:	4618      	mov	r0, r3
 800221e:	f000 fe5f 	bl	8002ee0 <SDIO_GetResponse>
 8002222:	4602      	mov	r2, r0
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2104      	movs	r1, #4
 800222e:	4618      	mov	r0, r3
 8002230:	f000 fe56 	bl	8002ee0 <SDIO_GetResponse>
 8002234:	4602      	mov	r2, r0
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2108      	movs	r1, #8
 8002240:	4618      	mov	r0, r3
 8002242:	f000 fe4d 	bl	8002ee0 <SDIO_GetResponse>
 8002246:	4602      	mov	r2, r0
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	210c      	movs	r1, #12
 8002252:	4618      	mov	r0, r3
 8002254:	f000 fe44 	bl	8002ee0 <SDIO_GetResponse>
 8002258:	4602      	mov	r2, r0
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2104      	movs	r1, #4
 8002264:	4618      	mov	r0, r3
 8002266:	f000 fe3b 	bl	8002ee0 <SDIO_GetResponse>
 800226a:	4603      	mov	r3, r0
 800226c:	0d1a      	lsrs	r2, r3, #20
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 8002272:	f107 0310 	add.w	r3, r7, #16
 8002276:	4619      	mov	r1, r3
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f7ff fc66 	bl	8001b4a <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6819      	ldr	r1, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002286:	041b      	lsls	r3, r3, #16
 8002288:	f04f 0400 	mov.w	r4, #0
 800228c:	461a      	mov	r2, r3
 800228e:	4623      	mov	r3, r4
 8002290:	4608      	mov	r0, r1
 8002292:	f000 ff3f 	bl	8003114 <SDMMC_CmdSelDesel>
 8002296:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8002298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <SD_InitCard+0x16c>
  {
    return errorstate;
 800229e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022a0:	e00e      	b.n	80022c0 <SD_InitCard+0x18a>
  }

  /* Configure SDIO peripheral interface */     
  SDIO_Init(hsd->Instance, hsd->Init);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681d      	ldr	r5, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	466c      	mov	r4, sp
 80022aa:	f103 0210 	add.w	r2, r3, #16
 80022ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80022b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80022b4:	3304      	adds	r3, #4
 80022b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022b8:	4628      	mov	r0, r5
 80022ba:	f000 fd75 	bl	8002da8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3740      	adds	r7, #64	; 0x40
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bdb0      	pop	{r4, r5, r7, pc}

080022c8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80022d0:	2300      	movs	r3, #0
 80022d2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80022d4:	2300      	movs	r3, #0
 80022d6:	617b      	str	r3, [r7, #20]
 80022d8:	2300      	movs	r3, #0
 80022da:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80022dc:	2300      	movs	r3, #0
 80022de:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f000 ff3a 	bl	800315e <SDMMC_CmdGoIdleState>
 80022ea:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <SD_PowerON+0x2e>
  {
    return errorstate;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	e08c      	b.n	8002410 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f000 ff4f 	bl	800319e <SDMMC_CmdOperCond>
 8002300:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d03d      	beq.n	8002384 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 800230e:	e032      	b.n	8002376 <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	1c5a      	adds	r2, r3, #1
 8002314:	60ba      	str	r2, [r7, #8]
 8002316:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800231a:	4293      	cmp	r3, r2
 800231c:	d102      	bne.n	8002324 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800231e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002322:	e075      	b.n	8002410 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2100      	movs	r1, #0
 800232a:	4618      	mov	r0, r3
 800232c:	f000 ff58 	bl	80031e0 <SDMMC_CmdAppCommand>
 8002330:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d002      	beq.n	800233e <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002338:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800233c:	e068      	b.n	8002410 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2100      	movs	r1, #0
 8002344:	4618      	mov	r0, r3
 8002346:	f000 ff6f 	bl	8003228 <SDMMC_CmdAppOperCommand>
 800234a:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d002      	beq.n	8002358 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002352:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002356:	e05b      	b.n	8002410 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2100      	movs	r1, #0
 800235e:	4618      	mov	r0, r3
 8002360:	f000 fdbe 	bl	8002ee0 <SDIO_GetResponse>
 8002364:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	0fdb      	lsrs	r3, r3, #31
 800236a:	2b01      	cmp	r3, #1
 800236c:	d101      	bne.n	8002372 <SD_PowerON+0xaa>
 800236e:	2301      	movs	r3, #1
 8002370:	e000      	b.n	8002374 <SD_PowerON+0xac>
 8002372:	2300      	movs	r3, #0
 8002374:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0c9      	beq.n	8002310 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	645a      	str	r2, [r3, #68]	; 0x44
 8002382:	e044      	b.n	800240e <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0U)
 800238a:	e031      	b.n	80023f0 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	1c5a      	adds	r2, r3, #1
 8002390:	60ba      	str	r2, [r7, #8]
 8002392:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002396:	4293      	cmp	r3, r2
 8002398:	d102      	bne.n	80023a0 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800239a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800239e:	e037      	b.n	8002410 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2100      	movs	r1, #0
 80023a6:	4618      	mov	r0, r3
 80023a8:	f000 ff1a 	bl	80031e0 <SDMMC_CmdAppCommand>
 80023ac:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <SD_PowerON+0xf0>
      {
        return errorstate;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	e02b      	b.n	8002410 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80023c0:	4618      	mov	r0, r3
 80023c2:	f000 ff31 	bl	8003228 <SDMMC_CmdAppOperCommand>
 80023c6:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <SD_PowerON+0x10a>
      {
        return errorstate;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	e01e      	b.n	8002410 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2100      	movs	r1, #0
 80023d8:	4618      	mov	r0, r3
 80023da:	f000 fd81 	bl	8002ee0 <SDIO_GetResponse>
 80023de:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	0fdb      	lsrs	r3, r3, #31
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d101      	bne.n	80023ec <SD_PowerON+0x124>
 80023e8:	2301      	movs	r3, #1
 80023ea:	e000      	b.n	80023ee <SD_PowerON+0x126>
 80023ec:	2300      	movs	r3, #0
 80023ee:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0U)
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d0ca      	beq.n	800238c <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d003      	beq.n	8002408 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	645a      	str	r2, [r3, #68]	; 0x44
 8002406:	e002      	b.n	800240e <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3718      	adds	r7, #24
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002422:	2300      	movs	r3, #0
 8002424:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d102      	bne.n	8002432 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 800242c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002430:	e018      	b.n	8002464 <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800243a:	041b      	lsls	r3, r3, #16
 800243c:	4619      	mov	r1, r3
 800243e:	4610      	mov	r0, r2
 8002440:	f000 ffc2 	bl	80033c8 <SDMMC_CmdSendStatus>
 8002444:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <SD_SendStatus+0x38>
  {
    return errorstate;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	e009      	b.n	8002464 <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2100      	movs	r1, #0
 8002456:	4618      	mov	r0, r3
 8002458:	f000 fd42 	bl	8002ee0 <SDIO_GetResponse>
 800245c:	4602      	mov	r2, r0
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8002474:	2300      	movs	r3, #0
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	2300      	movs	r3, #0
 800247a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800247c:	2300      	movs	r3, #0
 800247e:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2100      	movs	r1, #0
 8002486:	4618      	mov	r0, r3
 8002488:	f000 fd2a 	bl	8002ee0 <SDIO_GetResponse>
 800248c:	4603      	mov	r3, r0
 800248e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002492:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002496:	d102      	bne.n	800249e <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002498:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800249c:	e02f      	b.n	80024fe <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800249e:	f107 030c 	add.w	r3, r7, #12
 80024a2:	4619      	mov	r1, r3
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 f87b 	bl	80025a0 <SD_FindSCR>
 80024aa:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	e023      	b.n	80024fe <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d01c      	beq.n	80024fa <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024c8:	041b      	lsls	r3, r3, #16
 80024ca:	4619      	mov	r1, r3
 80024cc:	4610      	mov	r0, r2
 80024ce:	f000 fe87 	bl	80031e0 <SDMMC_CmdAppCommand>
 80024d2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	e00f      	b.n	80024fe <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2102      	movs	r1, #2
 80024e4:	4618      	mov	r0, r3
 80024e6:	f000 fec4 	bl	8003272 <SDMMC_CmdBusWidth>
 80024ea:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	e003      	b.n	80024fe <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 80024f6:	2300      	movs	r3, #0
 80024f8:	e001      	b.n	80024fe <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80024fa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b086      	sub	sp, #24
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800250e:	2300      	movs	r3, #0
 8002510:	60fb      	str	r3, [r7, #12]
 8002512:	2300      	movs	r3, #0
 8002514:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8002516:	2300      	movs	r3, #0
 8002518:	617b      	str	r3, [r7, #20]
  
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2100      	movs	r1, #0
 8002520:	4618      	mov	r0, r3
 8002522:	f000 fcdd 	bl	8002ee0 <SDIO_GetResponse>
 8002526:	4603      	mov	r3, r0
 8002528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002530:	d102      	bne.n	8002538 <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002532:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002536:	e02f      	b.n	8002598 <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8002538:	f107 030c 	add.w	r3, r7, #12
 800253c:	4619      	mov	r1, r3
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f82e 	bl	80025a0 <SD_FindSCR>
 8002544:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	e023      	b.n	8002598 <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d01c      	beq.n	8002594 <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002562:	041b      	lsls	r3, r3, #16
 8002564:	4619      	mov	r1, r3
 8002566:	4610      	mov	r0, r2
 8002568:	f000 fe3a 	bl	80031e0 <SDMMC_CmdAppCommand>
 800256c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	e00f      	b.n	8002598 <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2100      	movs	r1, #0
 800257e:	4618      	mov	r0, r3
 8002580:	f000 fe77 	bl	8003272 <SDMMC_CmdBusWidth>
 8002584:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	e003      	b.n	8002598 <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 8002590:	2300      	movs	r3, #0
 8002592:	e001      	b.n	8002598 <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002594:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8002598:	4618      	mov	r0, r3
 800259a:	3718      	adds	r7, #24
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80025a0:	b590      	push	{r4, r7, lr}
 80025a2:	b08f      	sub	sp, #60	; 0x3c
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80025aa:	2300      	movs	r3, #0
 80025ac:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80025ae:	f7fe f84d 	bl	800064c <HAL_GetTick>
 80025b2:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0U;
 80025b4:	2300      	movs	r3, #0
 80025b6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80025b8:	2300      	movs	r3, #0
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	2300      	movs	r3, #0
 80025be:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2108      	movs	r1, #8
 80025c6:	4618      	mov	r0, r3
 80025c8:	f000 fccb 	bl	8002f62 <SDMMC_CmdBlockLength>
 80025cc:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 80025ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80025d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d6:	e0a8      	b.n	800272a <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025e0:	041b      	lsls	r3, r3, #16
 80025e2:	4619      	mov	r1, r3
 80025e4:	4610      	mov	r0, r2
 80025e6:	f000 fdfb 	bl	80031e0 <SDMMC_CmdAppCommand>
 80025ea:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 80025ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <SD_FindSCR+0x56>
  {
    return errorstate;
 80025f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f4:	e099      	b.n	800272a <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80025f6:	f04f 33ff 	mov.w	r3, #4294967295
 80025fa:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8U;
 80025fc:	2308      	movs	r3, #8
 80025fe:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8002600:	2330      	movs	r3, #48	; 0x30
 8002602:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002604:	2302      	movs	r3, #2
 8002606:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002608:	2300      	movs	r3, #0
 800260a:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDIO_DPSM_ENABLE;
 800260c:	2301      	movs	r3, #1
 800260e:	62bb      	str	r3, [r7, #40]	; 0x28
  SDIO_ConfigData(hsd->Instance, &config);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f107 0214 	add.w	r2, r7, #20
 8002618:	4611      	mov	r1, r2
 800261a:	4618      	mov	r0, r3
 800261c:	f000 fc75 	bl	8002f0a <SDIO_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f000 fe48 	bl	80032ba <SDMMC_CmdSendSCR>
 800262a:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 800262c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800262e:	2b00      	cmp	r3, #0
 8002630:	d022      	beq.n	8002678 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8002632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002634:	e079      	b.n	800272a <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800263c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00e      	beq.n	8002662 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6819      	ldr	r1, [r3, #0]
 8002648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	f107 020c 	add.w	r2, r7, #12
 8002650:	18d4      	adds	r4, r2, r3
 8002652:	4608      	mov	r0, r1
 8002654:	f000 fbd3 	bl	8002dfe <SDIO_ReadFIFO>
 8002658:	4603      	mov	r3, r0
 800265a:	6023      	str	r3, [r4, #0]
      index++;
 800265c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800265e:	3301      	adds	r3, #1
 8002660:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8002662:	f7fd fff3 	bl	800064c <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002670:	d102      	bne.n	8002678 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8002672:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002676:	e058      	b.n	800272a <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800267e:	f240 432a 	movw	r3, #1066	; 0x42a
 8002682:	4013      	ands	r3, r2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0d6      	beq.n	8002636 <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800268e:	f003 0308 	and.w	r3, r3, #8
 8002692:	2b00      	cmp	r3, #0
 8002694:	d005      	beq.n	80026a2 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2208      	movs	r2, #8
 800269c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800269e:	2308      	movs	r3, #8
 80026a0:	e043      	b.n	800272a <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d005      	beq.n	80026bc <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2202      	movs	r2, #2
 80026b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80026b8:	2302      	movs	r3, #2
 80026ba:	e036      	b.n	800272a <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c2:	f003 0320 	and.w	r3, r3, #32
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d005      	beq.n	80026d6 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2220      	movs	r2, #32
 80026d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 80026d2:	2320      	movs	r3, #32
 80026d4:	e029      	b.n	800272a <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80026de:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	061a      	lsls	r2, r3, #24
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	021b      	lsls	r3, r3, #8
 80026e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80026ec:	431a      	orrs	r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	0a1b      	lsrs	r3, r3, #8
 80026f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 80026f6:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	3304      	adds	r3, #4
      ((tempscr[0U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0U] & SDMMC_24TO31BITS) >> 24U);
 8002702:	430a      	orrs	r2, r1
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 8002704:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	061a      	lsls	r2, r3, #24
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	021b      	lsls	r3, r3, #8
 800270e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002712:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	0a1b      	lsrs	r3, r3, #8
 8002718:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 800271c:	431a      	orrs	r2, r3
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	0e1b      	lsrs	r3, r3, #24
 8002722:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	373c      	adds	r7, #60	; 0x3c
 800272e:	46bd      	mov	sp, r7
 8002730:	bd90      	pop	{r4, r7, pc}

08002732 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b082      	sub	sp, #8
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d101      	bne.n	8002744 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e03f      	b.n	80027c4 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b00      	cmp	r3, #0
 800274e:	d106      	bne.n	800275e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f003 ff99 	bl	8006690 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2224      	movs	r2, #36	; 0x24
 8002762:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68da      	ldr	r2, [r3, #12]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002774:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f90c 	bl	8002994 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	691a      	ldr	r2, [r3, #16]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800278a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	695a      	ldr	r2, [r3, #20]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800279a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027aa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2220      	movs	r2, #32
 80027b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2220      	movs	r2, #32
 80027be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b088      	sub	sp, #32
 80027d0:	af02      	add	r7, sp, #8
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	603b      	str	r3, [r7, #0]
 80027d8:	4613      	mov	r3, r2
 80027da:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80027dc:	2300      	movs	r3, #0
 80027de:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b20      	cmp	r3, #32
 80027ea:	f040 8083 	bne.w	80028f4 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d002      	beq.n	80027fa <HAL_UART_Transmit+0x2e>
 80027f4:	88fb      	ldrh	r3, [r7, #6]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e07b      	b.n	80028f6 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002804:	2b01      	cmp	r3, #1
 8002806:	d101      	bne.n	800280c <HAL_UART_Transmit+0x40>
 8002808:	2302      	movs	r3, #2
 800280a:	e074      	b.n	80028f6 <HAL_UART_Transmit+0x12a>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2221      	movs	r2, #33	; 0x21
 800281e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002822:	f7fd ff13 	bl	800064c <HAL_GetTick>
 8002826:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	88fa      	ldrh	r2, [r7, #6]
 800282c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	88fa      	ldrh	r2, [r7, #6]
 8002832:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002834:	e042      	b.n	80028bc <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800283a:	b29b      	uxth	r3, r3
 800283c:	3b01      	subs	r3, #1
 800283e:	b29a      	uxth	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800284c:	d122      	bne.n	8002894 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	9300      	str	r3, [sp, #0]
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	2200      	movs	r2, #0
 8002856:	2180      	movs	r1, #128	; 0x80
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f000 f850 	bl	80028fe <UART_WaitOnFlagUntilTimeout>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e046      	b.n	80028f6 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	881b      	ldrh	r3, [r3, #0]
 8002870:	461a      	mov	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800287a:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d103      	bne.n	800288c <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	3302      	adds	r3, #2
 8002888:	60bb      	str	r3, [r7, #8]
 800288a:	e017      	b.n	80028bc <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	3301      	adds	r3, #1
 8002890:	60bb      	str	r3, [r7, #8]
 8002892:	e013      	b.n	80028bc <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	2200      	movs	r2, #0
 800289c:	2180      	movs	r1, #128	; 0x80
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f000 f82d 	bl	80028fe <UART_WaitOnFlagUntilTimeout>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e023      	b.n	80028f6 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	1c5a      	adds	r2, r3, #1
 80028b2:	60ba      	str	r2, [r7, #8]
 80028b4:	781a      	ldrb	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1b7      	bne.n	8002836 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	9300      	str	r3, [sp, #0]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	2200      	movs	r2, #0
 80028ce:	2140      	movs	r1, #64	; 0x40
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 f814 	bl	80028fe <UART_WaitOnFlagUntilTimeout>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e00a      	b.n	80028f6 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2220      	movs	r2, #32
 80028e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80028f0:	2300      	movs	r3, #0
 80028f2:	e000      	b.n	80028f6 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80028f4:	2302      	movs	r3, #2
  }
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3718      	adds	r7, #24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b084      	sub	sp, #16
 8002902:	af00      	add	r7, sp, #0
 8002904:	60f8      	str	r0, [r7, #12]
 8002906:	60b9      	str	r1, [r7, #8]
 8002908:	603b      	str	r3, [r7, #0]
 800290a:	4613      	mov	r3, r2
 800290c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800290e:	e02c      	b.n	800296a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002916:	d028      	beq.n	800296a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d007      	beq.n	800292e <UART_WaitOnFlagUntilTimeout+0x30>
 800291e:	f7fd fe95 	bl	800064c <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	429a      	cmp	r2, r3
 800292c:	d21d      	bcs.n	800296a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68da      	ldr	r2, [r3, #12]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800293c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	695a      	ldr	r2, [r3, #20]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 0201 	bic.w	r2, r2, #1
 800294c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2220      	movs	r2, #32
 8002952:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2220      	movs	r2, #32
 800295a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e00f      	b.n	800298a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	4013      	ands	r3, r2
 8002974:	68ba      	ldr	r2, [r7, #8]
 8002976:	429a      	cmp	r2, r3
 8002978:	bf0c      	ite	eq
 800297a:	2301      	moveq	r3, #1
 800297c:	2300      	movne	r3, #0
 800297e:	b2db      	uxtb	r3, r3
 8002980:	461a      	mov	r2, r3
 8002982:	79fb      	ldrb	r3, [r7, #7]
 8002984:	429a      	cmp	r2, r3
 8002986:	d0c3      	beq.n	8002910 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
	...

08002994 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002994:	b5b0      	push	{r4, r5, r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68da      	ldr	r2, [r3, #12]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	430a      	orrs	r2, r1
 80029b0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	689a      	ldr	r2, [r3, #8]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	431a      	orrs	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	431a      	orrs	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80029d4:	f023 030c 	bic.w	r3, r3, #12
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	6812      	ldr	r2, [r2, #0]
 80029dc:	68f9      	ldr	r1, [r7, #12]
 80029de:	430b      	orrs	r3, r1
 80029e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	699a      	ldr	r2, [r3, #24]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	69db      	ldr	r3, [r3, #28]
 80029fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a00:	f040 80e4 	bne.w	8002bcc <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4aab      	ldr	r2, [pc, #684]	; (8002cb8 <UART_SetConfig+0x324>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d004      	beq.n	8002a18 <UART_SetConfig+0x84>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4aaa      	ldr	r2, [pc, #680]	; (8002cbc <UART_SetConfig+0x328>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d16c      	bne.n	8002af2 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002a18:	f7fe fcfc 	bl	8001414 <HAL_RCC_GetPCLK2Freq>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	4613      	mov	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	009a      	lsls	r2, r3, #2
 8002a26:	441a      	add	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a32:	4aa3      	ldr	r2, [pc, #652]	; (8002cc0 <UART_SetConfig+0x32c>)
 8002a34:	fba2 2303 	umull	r2, r3, r2, r3
 8002a38:	095b      	lsrs	r3, r3, #5
 8002a3a:	011c      	lsls	r4, r3, #4
 8002a3c:	f7fe fcea 	bl	8001414 <HAL_RCC_GetPCLK2Freq>
 8002a40:	4602      	mov	r2, r0
 8002a42:	4613      	mov	r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	4413      	add	r3, r2
 8002a48:	009a      	lsls	r2, r3, #2
 8002a4a:	441a      	add	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	fbb2 f5f3 	udiv	r5, r2, r3
 8002a56:	f7fe fcdd 	bl	8001414 <HAL_RCC_GetPCLK2Freq>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	009a      	lsls	r2, r3, #2
 8002a64:	441a      	add	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a70:	4a93      	ldr	r2, [pc, #588]	; (8002cc0 <UART_SetConfig+0x32c>)
 8002a72:	fba2 2303 	umull	r2, r3, r2, r3
 8002a76:	095b      	lsrs	r3, r3, #5
 8002a78:	2264      	movs	r2, #100	; 0x64
 8002a7a:	fb02 f303 	mul.w	r3, r2, r3
 8002a7e:	1aeb      	subs	r3, r5, r3
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	3332      	adds	r3, #50	; 0x32
 8002a84:	4a8e      	ldr	r2, [pc, #568]	; (8002cc0 <UART_SetConfig+0x32c>)
 8002a86:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8a:	095b      	lsrs	r3, r3, #5
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a92:	441c      	add	r4, r3
 8002a94:	f7fe fcbe 	bl	8001414 <HAL_RCC_GetPCLK2Freq>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4413      	add	r3, r2
 8002aa0:	009a      	lsls	r2, r3, #2
 8002aa2:	441a      	add	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	fbb2 f5f3 	udiv	r5, r2, r3
 8002aae:	f7fe fcb1 	bl	8001414 <HAL_RCC_GetPCLK2Freq>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	009a      	lsls	r2, r3, #2
 8002abc:	441a      	add	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac8:	4a7d      	ldr	r2, [pc, #500]	; (8002cc0 <UART_SetConfig+0x32c>)
 8002aca:	fba2 2303 	umull	r2, r3, r2, r3
 8002ace:	095b      	lsrs	r3, r3, #5
 8002ad0:	2264      	movs	r2, #100	; 0x64
 8002ad2:	fb02 f303 	mul.w	r3, r2, r3
 8002ad6:	1aeb      	subs	r3, r5, r3
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	3332      	adds	r3, #50	; 0x32
 8002adc:	4a78      	ldr	r2, [pc, #480]	; (8002cc0 <UART_SetConfig+0x32c>)
 8002ade:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae2:	095b      	lsrs	r3, r3, #5
 8002ae4:	f003 0207 	and.w	r2, r3, #7
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4422      	add	r2, r4
 8002aee:	609a      	str	r2, [r3, #8]
 8002af0:	e154      	b.n	8002d9c <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002af2:	f7fe fc7b 	bl	80013ec <HAL_RCC_GetPCLK1Freq>
 8002af6:	4602      	mov	r2, r0
 8002af8:	4613      	mov	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	009a      	lsls	r2, r3, #2
 8002b00:	441a      	add	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b0c:	4a6c      	ldr	r2, [pc, #432]	; (8002cc0 <UART_SetConfig+0x32c>)
 8002b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b12:	095b      	lsrs	r3, r3, #5
 8002b14:	011c      	lsls	r4, r3, #4
 8002b16:	f7fe fc69 	bl	80013ec <HAL_RCC_GetPCLK1Freq>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4413      	add	r3, r2
 8002b22:	009a      	lsls	r2, r3, #2
 8002b24:	441a      	add	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	fbb2 f5f3 	udiv	r5, r2, r3
 8002b30:	f7fe fc5c 	bl	80013ec <HAL_RCC_GetPCLK1Freq>
 8002b34:	4602      	mov	r2, r0
 8002b36:	4613      	mov	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	009a      	lsls	r2, r3, #2
 8002b3e:	441a      	add	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b4a:	4a5d      	ldr	r2, [pc, #372]	; (8002cc0 <UART_SetConfig+0x32c>)
 8002b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b50:	095b      	lsrs	r3, r3, #5
 8002b52:	2264      	movs	r2, #100	; 0x64
 8002b54:	fb02 f303 	mul.w	r3, r2, r3
 8002b58:	1aeb      	subs	r3, r5, r3
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	3332      	adds	r3, #50	; 0x32
 8002b5e:	4a58      	ldr	r2, [pc, #352]	; (8002cc0 <UART_SetConfig+0x32c>)
 8002b60:	fba2 2303 	umull	r2, r3, r2, r3
 8002b64:	095b      	lsrs	r3, r3, #5
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b6c:	441c      	add	r4, r3
 8002b6e:	f7fe fc3d 	bl	80013ec <HAL_RCC_GetPCLK1Freq>
 8002b72:	4602      	mov	r2, r0
 8002b74:	4613      	mov	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4413      	add	r3, r2
 8002b7a:	009a      	lsls	r2, r3, #2
 8002b7c:	441a      	add	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	fbb2 f5f3 	udiv	r5, r2, r3
 8002b88:	f7fe fc30 	bl	80013ec <HAL_RCC_GetPCLK1Freq>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	4613      	mov	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4413      	add	r3, r2
 8002b94:	009a      	lsls	r2, r3, #2
 8002b96:	441a      	add	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba2:	4a47      	ldr	r2, [pc, #284]	; (8002cc0 <UART_SetConfig+0x32c>)
 8002ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba8:	095b      	lsrs	r3, r3, #5
 8002baa:	2264      	movs	r2, #100	; 0x64
 8002bac:	fb02 f303 	mul.w	r3, r2, r3
 8002bb0:	1aeb      	subs	r3, r5, r3
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	3332      	adds	r3, #50	; 0x32
 8002bb6:	4a42      	ldr	r2, [pc, #264]	; (8002cc0 <UART_SetConfig+0x32c>)
 8002bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bbc:	095b      	lsrs	r3, r3, #5
 8002bbe:	f003 0207 	and.w	r2, r3, #7
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4422      	add	r2, r4
 8002bc8:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8002bca:	e0e7      	b.n	8002d9c <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a39      	ldr	r2, [pc, #228]	; (8002cb8 <UART_SetConfig+0x324>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d004      	beq.n	8002be0 <UART_SetConfig+0x24c>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a38      	ldr	r2, [pc, #224]	; (8002cbc <UART_SetConfig+0x328>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d171      	bne.n	8002cc4 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002be0:	f7fe fc18 	bl	8001414 <HAL_RCC_GetPCLK2Freq>
 8002be4:	4602      	mov	r2, r0
 8002be6:	4613      	mov	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	009a      	lsls	r2, r3, #2
 8002bee:	441a      	add	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfa:	4a31      	ldr	r2, [pc, #196]	; (8002cc0 <UART_SetConfig+0x32c>)
 8002bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002c00:	095b      	lsrs	r3, r3, #5
 8002c02:	011c      	lsls	r4, r3, #4
 8002c04:	f7fe fc06 	bl	8001414 <HAL_RCC_GetPCLK2Freq>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4413      	add	r3, r2
 8002c10:	009a      	lsls	r2, r3, #2
 8002c12:	441a      	add	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	fbb2 f5f3 	udiv	r5, r2, r3
 8002c1e:	f7fe fbf9 	bl	8001414 <HAL_RCC_GetPCLK2Freq>
 8002c22:	4602      	mov	r2, r0
 8002c24:	4613      	mov	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	009a      	lsls	r2, r3, #2
 8002c2c:	441a      	add	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c38:	4a21      	ldr	r2, [pc, #132]	; (8002cc0 <UART_SetConfig+0x32c>)
 8002c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3e:	095b      	lsrs	r3, r3, #5
 8002c40:	2264      	movs	r2, #100	; 0x64
 8002c42:	fb02 f303 	mul.w	r3, r2, r3
 8002c46:	1aeb      	subs	r3, r5, r3
 8002c48:	011b      	lsls	r3, r3, #4
 8002c4a:	3332      	adds	r3, #50	; 0x32
 8002c4c:	4a1c      	ldr	r2, [pc, #112]	; (8002cc0 <UART_SetConfig+0x32c>)
 8002c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c52:	095b      	lsrs	r3, r3, #5
 8002c54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c58:	441c      	add	r4, r3
 8002c5a:	f7fe fbdb 	bl	8001414 <HAL_RCC_GetPCLK2Freq>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	4613      	mov	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4413      	add	r3, r2
 8002c66:	009a      	lsls	r2, r3, #2
 8002c68:	441a      	add	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	fbb2 f5f3 	udiv	r5, r2, r3
 8002c74:	f7fe fbce 	bl	8001414 <HAL_RCC_GetPCLK2Freq>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4413      	add	r3, r2
 8002c80:	009a      	lsls	r2, r3, #2
 8002c82:	441a      	add	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8e:	4a0c      	ldr	r2, [pc, #48]	; (8002cc0 <UART_SetConfig+0x32c>)
 8002c90:	fba2 2303 	umull	r2, r3, r2, r3
 8002c94:	095b      	lsrs	r3, r3, #5
 8002c96:	2264      	movs	r2, #100	; 0x64
 8002c98:	fb02 f303 	mul.w	r3, r2, r3
 8002c9c:	1aeb      	subs	r3, r5, r3
 8002c9e:	011b      	lsls	r3, r3, #4
 8002ca0:	3332      	adds	r3, #50	; 0x32
 8002ca2:	4a07      	ldr	r2, [pc, #28]	; (8002cc0 <UART_SetConfig+0x32c>)
 8002ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca8:	095b      	lsrs	r3, r3, #5
 8002caa:	f003 020f 	and.w	r2, r3, #15
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4422      	add	r2, r4
 8002cb4:	609a      	str	r2, [r3, #8]
 8002cb6:	e071      	b.n	8002d9c <UART_SetConfig+0x408>
 8002cb8:	40011000 	.word	0x40011000
 8002cbc:	40011400 	.word	0x40011400
 8002cc0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002cc4:	f7fe fb92 	bl	80013ec <HAL_RCC_GetPCLK1Freq>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	4613      	mov	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	009a      	lsls	r2, r3, #2
 8002cd2:	441a      	add	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cde:	4a31      	ldr	r2, [pc, #196]	; (8002da4 <UART_SetConfig+0x410>)
 8002ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce4:	095b      	lsrs	r3, r3, #5
 8002ce6:	011c      	lsls	r4, r3, #4
 8002ce8:	f7fe fb80 	bl	80013ec <HAL_RCC_GetPCLK1Freq>
 8002cec:	4602      	mov	r2, r0
 8002cee:	4613      	mov	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	009a      	lsls	r2, r3, #2
 8002cf6:	441a      	add	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	fbb2 f5f3 	udiv	r5, r2, r3
 8002d02:	f7fe fb73 	bl	80013ec <HAL_RCC_GetPCLK1Freq>
 8002d06:	4602      	mov	r2, r0
 8002d08:	4613      	mov	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4413      	add	r3, r2
 8002d0e:	009a      	lsls	r2, r3, #2
 8002d10:	441a      	add	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d1c:	4a21      	ldr	r2, [pc, #132]	; (8002da4 <UART_SetConfig+0x410>)
 8002d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d22:	095b      	lsrs	r3, r3, #5
 8002d24:	2264      	movs	r2, #100	; 0x64
 8002d26:	fb02 f303 	mul.w	r3, r2, r3
 8002d2a:	1aeb      	subs	r3, r5, r3
 8002d2c:	011b      	lsls	r3, r3, #4
 8002d2e:	3332      	adds	r3, #50	; 0x32
 8002d30:	4a1c      	ldr	r2, [pc, #112]	; (8002da4 <UART_SetConfig+0x410>)
 8002d32:	fba2 2303 	umull	r2, r3, r2, r3
 8002d36:	095b      	lsrs	r3, r3, #5
 8002d38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d3c:	441c      	add	r4, r3
 8002d3e:	f7fe fb55 	bl	80013ec <HAL_RCC_GetPCLK1Freq>
 8002d42:	4602      	mov	r2, r0
 8002d44:	4613      	mov	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4413      	add	r3, r2
 8002d4a:	009a      	lsls	r2, r3, #2
 8002d4c:	441a      	add	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	fbb2 f5f3 	udiv	r5, r2, r3
 8002d58:	f7fe fb48 	bl	80013ec <HAL_RCC_GetPCLK1Freq>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	4613      	mov	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4413      	add	r3, r2
 8002d64:	009a      	lsls	r2, r3, #2
 8002d66:	441a      	add	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d72:	4a0c      	ldr	r2, [pc, #48]	; (8002da4 <UART_SetConfig+0x410>)
 8002d74:	fba2 2303 	umull	r2, r3, r2, r3
 8002d78:	095b      	lsrs	r3, r3, #5
 8002d7a:	2264      	movs	r2, #100	; 0x64
 8002d7c:	fb02 f303 	mul.w	r3, r2, r3
 8002d80:	1aeb      	subs	r3, r5, r3
 8002d82:	011b      	lsls	r3, r3, #4
 8002d84:	3332      	adds	r3, #50	; 0x32
 8002d86:	4a07      	ldr	r2, [pc, #28]	; (8002da4 <UART_SetConfig+0x410>)
 8002d88:	fba2 2303 	umull	r2, r3, r2, r3
 8002d8c:	095b      	lsrs	r3, r3, #5
 8002d8e:	f003 020f 	and.w	r2, r3, #15
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4422      	add	r2, r4
 8002d98:	609a      	str	r2, [r3, #8]
}
 8002d9a:	e7ff      	b.n	8002d9c <UART_SetConfig+0x408>
 8002d9c:	bf00      	nop
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bdb0      	pop	{r4, r5, r7, pc}
 8002da4:	51eb851f 	.word	0x51eb851f

08002da8 <SDIO_Init>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8002da8:	b084      	sub	sp, #16
 8002daa:	b480      	push	{r7}
 8002dac:	b085      	sub	sp, #20
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
 8002db2:	f107 001c 	add.w	r0, r7, #28
 8002db6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0U;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8002dbe:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8002dc0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8002dc2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8002dc6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8002dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8002dca:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8002dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8002dce:	431a      	orrs	r2, r3
             Init.ClockDiv
 8002dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8002dd2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8002de2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	431a      	orrs	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3714      	adds	r7, #20
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	b004      	add	sp, #16
 8002dfc:	4770      	bx	lr

08002dfe <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <SDIO_WriteFIFO>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8002e3a:	b480      	push	{r7}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2203      	movs	r2, #3
 8002e46:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8002e56:	b480      	push	{r7}
 8002e58:	b083      	sub	sp, #12
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0303 	and.w	r3, r3, #3
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr

08002e72 <SDIO_SendCommand>:
  * @param  Command pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8002e72:	b480      	push	{r7}
 8002e74:	b085      	sub	sp, #20
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
 8002e7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8002e90:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8002e96:	431a      	orrs	r2, r3
                       Command->CPSM);
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8002e9c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002eac:	f023 030f 	bic.w	r3, r3, #15
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b083      	sub	sp, #12
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	b2db      	uxtb	r3, r3
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <SDIO_GetResponse>:
  *            @arg SDIO_RESP1: Response Register 3
  *            @arg SDIO_RESP1: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8002eea:	2300      	movs	r3, #0
 8002eec:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	3314      	adds	r3, #20
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
}  
 8002efe:	4618      	mov	r0, r3
 8002f00:	3714      	adds	r7, #20
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr

08002f0a <SDIO_ConfigData>:
  * @param  Data  pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b085      	sub	sp, #20
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
 8002f12:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002f14:	2300      	movs	r3, #0
 8002f16:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685a      	ldr	r2, [r3, #4]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8002f30:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8002f36:	431a      	orrs	r2, r3
                       Data->DPSM);
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8002f3c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f48:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8002f54:	2300      	movs	r3, #0

}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3714      	adds	r7, #20
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr

08002f62 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b088      	sub	sp, #32
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
 8002f6a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8002f74:	2310      	movs	r3, #16
 8002f76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002f78:	2340      	movs	r3, #64	; 0x40
 8002f7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002f80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f84:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002f86:	f107 0308 	add.w	r3, r7, #8
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7ff ff70 	bl	8002e72 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8002f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f96:	2110      	movs	r1, #16
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 fa63 	bl	8003464 <SDMMC_GetCmdResp1>
 8002f9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002fa0:	69fb      	ldr	r3, [r7, #28]
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3720      	adds	r7, #32
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b088      	sub	sp, #32
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
 8002fb2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8002fbc:	2311      	movs	r3, #17
 8002fbe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002fc0:	2340      	movs	r3, #64	; 0x40
 8002fc2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002fc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fcc:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002fce:	f107 0308 	add.w	r3, r7, #8
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f7ff ff4c 	bl	8002e72 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8002fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fde:	2111      	movs	r1, #17
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 fa3f 	bl	8003464 <SDMMC_GetCmdResp1>
 8002fe6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002fe8:	69fb      	ldr	r3, [r7, #28]
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3720      	adds	r7, #32
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b088      	sub	sp, #32
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
 8002ffa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8003004:	2312      	movs	r3, #18
 8003006:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003008:	2340      	movs	r3, #64	; 0x40
 800300a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800300c:	2300      	movs	r3, #0
 800300e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003010:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003014:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003016:	f107 0308 	add.w	r3, r7, #8
 800301a:	4619      	mov	r1, r3
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f7ff ff28 	bl	8002e72 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8003022:	f241 3288 	movw	r2, #5000	; 0x1388
 8003026:	2112      	movs	r1, #18
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 fa1b 	bl	8003464 <SDMMC_GetCmdResp1>
 800302e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003030:	69fb      	ldr	r3, [r7, #28]
}
 8003032:	4618      	mov	r0, r3
 8003034:	3720      	adds	r7, #32
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b088      	sub	sp, #32
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
 8003042:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003044:	2300      	movs	r3, #0
 8003046:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800304c:	2318      	movs	r3, #24
 800304e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003050:	2340      	movs	r3, #64	; 0x40
 8003052:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003054:	2300      	movs	r3, #0
 8003056:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003058:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800305c:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800305e:	f107 0308 	add.w	r3, r7, #8
 8003062:	4619      	mov	r1, r3
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f7ff ff04 	bl	8002e72 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800306a:	f241 3288 	movw	r2, #5000	; 0x1388
 800306e:	2118      	movs	r1, #24
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 f9f7 	bl	8003464 <SDMMC_GetCmdResp1>
 8003076:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003078:	69fb      	ldr	r3, [r7, #28]
}
 800307a:	4618      	mov	r0, r3
 800307c:	3720      	adds	r7, #32
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b088      	sub	sp, #32
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
 800308a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800308c:	2300      	movs	r3, #0
 800308e:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8003094:	2319      	movs	r3, #25
 8003096:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003098:	2340      	movs	r3, #64	; 0x40
 800309a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800309c:	2300      	movs	r3, #0
 800309e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80030a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030a4:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80030a6:	f107 0308 	add.w	r3, r7, #8
 80030aa:	4619      	mov	r1, r3
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f7ff fee0 	bl	8002e72 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80030b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b6:	2119      	movs	r1, #25
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 f9d3 	bl	8003464 <SDMMC_GetCmdResp1>
 80030be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80030c0:	69fb      	ldr	r3, [r7, #28]
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3720      	adds	r7, #32
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
	...

080030cc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b088      	sub	sp, #32
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80030d4:	2300      	movs	r3, #0
 80030d6:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80030d8:	2300      	movs	r3, #0
 80030da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80030dc:	230c      	movs	r3, #12
 80030de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80030e0:	2340      	movs	r3, #64	; 0x40
 80030e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80030e4:	2300      	movs	r3, #0
 80030e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80030e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030ec:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80030ee:	f107 0308 	add.w	r3, r7, #8
 80030f2:	4619      	mov	r1, r3
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f7ff febc 	bl	8002e72 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 80030fa:	4a05      	ldr	r2, [pc, #20]	; (8003110 <SDMMC_CmdStopTransfer+0x44>)
 80030fc:	210c      	movs	r1, #12
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f9b0 	bl	8003464 <SDMMC_GetCmdResp1>
 8003104:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003106:	69fb      	ldr	r3, [r7, #28]
}
 8003108:	4618      	mov	r0, r3
 800310a:	3720      	adds	r7, #32
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	05f5e100 	.word	0x05f5e100

08003114 <SDMMC_CmdSelDesel>:
  * @param  SDIOx Pointer to SDIO register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b08a      	sub	sp, #40	; 0x28
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003120:	2300      	movs	r3, #0
 8003122:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8003128:	2307      	movs	r3, #7
 800312a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800312c:	2340      	movs	r3, #64	; 0x40
 800312e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003130:	2300      	movs	r3, #0
 8003132:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003134:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003138:	623b      	str	r3, [r7, #32]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800313a:	f107 0310 	add.w	r3, r7, #16
 800313e:	4619      	mov	r1, r3
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f7ff fe96 	bl	8002e72 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8003146:	f241 3288 	movw	r2, #5000	; 0x1388
 800314a:	2107      	movs	r1, #7
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f000 f989 	bl	8003464 <SDMMC_GetCmdResp1>
 8003152:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8003154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003156:	4618      	mov	r0, r3
 8003158:	3728      	adds	r7, #40	; 0x28
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b088      	sub	sp, #32
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003166:	2300      	movs	r3, #0
 8003168:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0U;
 800316a:	2300      	movs	r3, #0
 800316c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800316e:	2300      	movs	r3, #0
 8003170:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8003172:	2300      	movs	r3, #0
 8003174:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003176:	2300      	movs	r3, #0
 8003178:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800317a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800317e:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003180:	f107 0308 	add.w	r3, r7, #8
 8003184:	4619      	mov	r1, r3
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7ff fe73 	bl	8002e72 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 f93f 	bl	8003410 <SDMMC_GetCmdError>
 8003192:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003194:	69fb      	ldr	r3, [r7, #28]
}
 8003196:	4618      	mov	r0, r3
 8003198:	3720      	adds	r7, #32
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b088      	sub	sp, #32
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80031a6:	2300      	movs	r3, #0
 80031a8:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80031aa:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80031ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80031b0:	2308      	movs	r3, #8
 80031b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80031b4:	2340      	movs	r3, #64	; 0x40
 80031b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80031b8:	2300      	movs	r3, #0
 80031ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80031bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031c0:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80031c2:	f107 0308 	add.w	r3, r7, #8
 80031c6:	4619      	mov	r1, r3
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f7ff fe52 	bl	8002e72 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 fb10 	bl	80037f4 <SDMMC_GetCmdResp7>
 80031d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80031d6:	69fb      	ldr	r3, [r7, #28]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3720      	adds	r7, #32
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b088      	sub	sp, #32
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80031ea:	2300      	movs	r3, #0
 80031ec:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80031f2:	2337      	movs	r3, #55	; 0x37
 80031f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80031f6:	2340      	movs	r3, #64	; 0x40
 80031f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80031fa:	2300      	movs	r3, #0
 80031fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80031fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003202:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003204:	f107 0308 	add.w	r3, r7, #8
 8003208:	4619      	mov	r1, r3
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7ff fe31 	bl	8002e72 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8003210:	f241 3288 	movw	r2, #5000	; 0x1388
 8003214:	2137      	movs	r1, #55	; 0x37
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f924 	bl	8003464 <SDMMC_GetCmdResp1>
 800321c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800321e:	69fb      	ldr	r3, [r7, #28]
}
 8003220:	4618      	mov	r0, r3
 8003222:	3720      	adds	r7, #32
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t SdType)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b088      	sub	sp, #32
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003232:	2300      	movs	r3, #0
 8003234:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800323c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003240:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8003242:	2329      	movs	r3, #41	; 0x29
 8003244:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003246:	2340      	movs	r3, #64	; 0x40
 8003248:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800324a:	2300      	movs	r3, #0
 800324c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800324e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003252:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003254:	f107 0308 	add.w	r3, r7, #8
 8003258:	4619      	mov	r1, r3
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7ff fe09 	bl	8002e72 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 fa25 	bl	80036b0 <SDMMC_GetCmdResp3>
 8003266:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003268:	69fb      	ldr	r3, [r7, #28]
}
 800326a:	4618      	mov	r0, r3
 800326c:	3720      	adds	r7, #32
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b088      	sub	sp, #32
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
 800327a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800327c:	2300      	movs	r3, #0
 800327e:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8003284:	2306      	movs	r3, #6
 8003286:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003288:	2340      	movs	r3, #64	; 0x40
 800328a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800328c:	2300      	movs	r3, #0
 800328e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003290:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003294:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003296:	f107 0308 	add.w	r3, r7, #8
 800329a:	4619      	mov	r1, r3
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f7ff fde8 	bl	8002e72 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80032a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a6:	2106      	movs	r1, #6
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f000 f8db 	bl	8003464 <SDMMC_GetCmdResp1>
 80032ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80032b0:	69fb      	ldr	r3, [r7, #28]
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3720      	adds	r7, #32
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b088      	sub	sp, #32
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80032c2:	2300      	movs	r3, #0
 80032c4:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80032c6:	2300      	movs	r3, #0
 80032c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80032ca:	2333      	movs	r3, #51	; 0x33
 80032cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80032ce:	2340      	movs	r3, #64	; 0x40
 80032d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80032d2:	2300      	movs	r3, #0
 80032d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80032d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032da:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80032dc:	f107 0308 	add.w	r3, r7, #8
 80032e0:	4619      	mov	r1, r3
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7ff fdc5 	bl	8002e72 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80032e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ec:	2133      	movs	r1, #51	; 0x33
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 f8b8 	bl	8003464 <SDMMC_GetCmdResp1>
 80032f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80032f6:	69fb      	ldr	r3, [r7, #28]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3720      	adds	r7, #32
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b088      	sub	sp, #32
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8003308:	2300      	movs	r3, #0
 800330a:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800330c:	2300      	movs	r3, #0
 800330e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8003310:	2302      	movs	r3, #2
 8003312:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003314:	23c0      	movs	r3, #192	; 0xc0
 8003316:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003318:	2300      	movs	r3, #0
 800331a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800331c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003320:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003322:	f107 0308 	add.w	r3, r7, #8
 8003326:	4619      	mov	r1, r3
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f7ff fda2 	bl	8002e72 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f97e 	bl	8003630 <SDMMC_GetCmdResp2>
 8003334:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003336:	69fb      	ldr	r3, [r7, #28]
}
 8003338:	4618      	mov	r0, r3
 800333a:	3720      	adds	r7, #32
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b088      	sub	sp, #32
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800334a:	2300      	movs	r3, #0
 800334c:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8003352:	2309      	movs	r3, #9
 8003354:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003356:	23c0      	movs	r3, #192	; 0xc0
 8003358:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800335a:	2300      	movs	r3, #0
 800335c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800335e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003362:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003364:	f107 0308 	add.w	r3, r7, #8
 8003368:	4619      	mov	r1, r3
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7ff fd81 	bl	8002e72 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 f95d 	bl	8003630 <SDMMC_GetCmdResp2>
 8003376:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003378:	69fb      	ldr	r3, [r7, #28]
}
 800337a:	4618      	mov	r0, r3
 800337c:	3720      	adds	r7, #32
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b088      	sub	sp, #32
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
 800338a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800338c:	2300      	movs	r3, #0
 800338e:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8003390:	2300      	movs	r3, #0
 8003392:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8003394:	2303      	movs	r3, #3
 8003396:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003398:	2340      	movs	r3, #64	; 0x40
 800339a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800339c:	2300      	movs	r3, #0
 800339e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80033a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033a4:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80033a6:	f107 0308 	add.w	r3, r7, #8
 80033aa:	4619      	mov	r1, r3
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f7ff fd60 	bl	8002e72 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	2103      	movs	r1, #3
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f9ae 	bl	8003718 <SDMMC_GetCmdResp6>
 80033bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80033be:	69fb      	ldr	r3, [r7, #28]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3720      	adds	r7, #32
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDIOx Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b088      	sub	sp, #32
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80033d2:	2300      	movs	r3, #0
 80033d4:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80033da:	230d      	movs	r3, #13
 80033dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80033de:	2340      	movs	r3, #64	; 0x40
 80033e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80033e2:	2300      	movs	r3, #0
 80033e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80033e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033ea:	61bb      	str	r3, [r7, #24]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80033ec:	f107 0308 	add.w	r3, r7, #8
 80033f0:	4619      	mov	r1, r3
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7ff fd3d 	bl	8002e72 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80033f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033fc:	210d      	movs	r1, #13
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 f830 	bl	8003464 <SDMMC_GetCmdResp1>
 8003404:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8003406:	69fb      	ldr	r3, [r7, #28]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3720      	adds	r7, #32
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8003410:	b490      	push	{r4, r7}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003418:	4b10      	ldr	r3, [pc, #64]	; (800345c <SDMMC_GetCmdError+0x4c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a10      	ldr	r2, [pc, #64]	; (8003460 <SDMMC_GetCmdError+0x50>)
 800341e:	fba2 2303 	umull	r2, r3, r2, r3
 8003422:	0a5b      	lsrs	r3, r3, #9
 8003424:	f241 3288 	movw	r2, #5000	; 0x1388
 8003428:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800342c:	4623      	mov	r3, r4
 800342e:	1e5c      	subs	r4, r3, #1
 8003430:	2b00      	cmp	r3, #0
 8003432:	d102      	bne.n	800343a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003434:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003438:	e00a      	b.n	8003450 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800343e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003442:	2b00      	cmp	r3, #0
 8003444:	d0f2      	beq.n	800342c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800344c:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3708      	adds	r7, #8
 8003454:	46bd      	mov	sp, r7
 8003456:	bc90      	pop	{r4, r7}
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	20000020 	.word	0x20000020
 8003460:	10624dd3 	.word	0x10624dd3

08003464 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8003464:	b590      	push	{r4, r7, lr}
 8003466:	b087      	sub	sp, #28
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	460b      	mov	r3, r1
 800346e:	607a      	str	r2, [r7, #4]
 8003470:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8003472:	4b6c      	ldr	r3, [pc, #432]	; (8003624 <SDMMC_GetCmdResp1+0x1c0>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a6c      	ldr	r2, [pc, #432]	; (8003628 <SDMMC_GetCmdResp1+0x1c4>)
 8003478:	fba2 2303 	umull	r2, r3, r2, r3
 800347c:	0a5b      	lsrs	r3, r3, #9
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8003484:	4623      	mov	r3, r4
 8003486:	1e5c      	subs	r4, r3, #1
 8003488:	2b00      	cmp	r3, #0
 800348a:	d102      	bne.n	8003492 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800348c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003490:	e0c3      	b.n	800361a <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003496:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800349a:	2b00      	cmp	r3, #0
 800349c:	d0f2      	beq.n	8003484 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034a2:	f003 0304 	and.w	r3, r3, #4
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d004      	beq.n	80034b4 <SDMMC_GetCmdResp1+0x50>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2204      	movs	r2, #4
 80034ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80034b0:	2304      	movs	r3, #4
 80034b2:	e0b2      	b.n	800361a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d004      	beq.n	80034ca <SDMMC_GetCmdResp1+0x66>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2201      	movs	r2, #1
 80034c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e0a7      	b.n	800361a <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f7ff fcfb 	bl	8002ec6 <SDIO_GetCommandResponse>
 80034d0:	4603      	mov	r3, r0
 80034d2:	461a      	mov	r2, r3
 80034d4:	7afb      	ldrb	r3, [r7, #11]
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d001      	beq.n	80034de <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80034da:	2301      	movs	r3, #1
 80034dc:	e09d      	b.n	800361a <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80034e4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80034e6:	2100      	movs	r1, #0
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f7ff fcf9 	bl	8002ee0 <SDIO_GetResponse>
 80034ee:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	4b4e      	ldr	r3, [pc, #312]	; (800362c <SDMMC_GetCmdResp1+0x1c8>)
 80034f4:	4013      	ands	r3, r2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 80034fa:	2300      	movs	r3, #0
 80034fc:	e08d      	b.n	800361a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	2b00      	cmp	r3, #0
 8003502:	da02      	bge.n	800350a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8003504:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003508:	e087      	b.n	800361a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8003514:	2340      	movs	r3, #64	; 0x40
 8003516:	e080      	b.n	800361a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8003522:	2380      	movs	r3, #128	; 0x80
 8003524:	e079      	b.n	800361a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d002      	beq.n	8003536 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8003530:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003534:	e071      	b.n	800361a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d002      	beq.n	8003546 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8003540:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003544:	e069      	b.n	800361a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d002      	beq.n	8003556 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8003550:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003554:	e061      	b.n	800361a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d002      	beq.n	8003566 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8003560:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003564:	e059      	b.n	800361a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d002      	beq.n	8003576 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8003570:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003574:	e051      	b.n	800361a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d002      	beq.n	8003586 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8003580:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003584:	e049      	b.n	800361a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d002      	beq.n	8003596 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8003590:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003594:	e041      	b.n	800361a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d002      	beq.n	80035a6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 80035a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035a4:	e039      	b.n	800361a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d002      	beq.n	80035b6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80035b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035b4:	e031      	b.n	800361a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d002      	beq.n	80035c6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80035c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80035c4:	e029      	b.n	800361a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d002      	beq.n	80035d6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80035d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80035d4:	e021      	b.n	800361a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d002      	beq.n	80035e6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80035e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80035e4:	e019      	b.n	800361a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d002      	beq.n	80035f6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80035f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80035f4:	e011      	b.n	800361a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d002      	beq.n	8003606 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8003600:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003604:	e009      	b.n	800361a <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	f003 0308 	and.w	r3, r3, #8
 800360c:	2b00      	cmp	r3, #0
 800360e:	d002      	beq.n	8003616 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8003610:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003614:	e001      	b.n	800361a <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8003616:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800361a:	4618      	mov	r0, r3
 800361c:	371c      	adds	r7, #28
 800361e:	46bd      	mov	sp, r7
 8003620:	bd90      	pop	{r4, r7, pc}
 8003622:	bf00      	nop
 8003624:	20000020 	.word	0x20000020
 8003628:	10624dd3 	.word	0x10624dd3
 800362c:	fdffe008 	.word	0xfdffe008

08003630 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8003630:	b490      	push	{r4, r7}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003638:	4b1b      	ldr	r3, [pc, #108]	; (80036a8 <SDMMC_GetCmdResp2+0x78>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a1b      	ldr	r2, [pc, #108]	; (80036ac <SDMMC_GetCmdResp2+0x7c>)
 800363e:	fba2 2303 	umull	r2, r3, r2, r3
 8003642:	0a5b      	lsrs	r3, r3, #9
 8003644:	f241 3288 	movw	r2, #5000	; 0x1388
 8003648:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800364c:	4623      	mov	r3, r4
 800364e:	1e5c      	subs	r4, r3, #1
 8003650:	2b00      	cmp	r3, #0
 8003652:	d102      	bne.n	800365a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003654:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003658:	e020      	b.n	800369c <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800365e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8003662:	2b00      	cmp	r3, #0
 8003664:	d0f2      	beq.n	800364c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800366a:	f003 0304 	and.w	r3, r3, #4
 800366e:	2b00      	cmp	r3, #0
 8003670:	d004      	beq.n	800367c <SDMMC_GetCmdResp2+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2204      	movs	r2, #4
 8003676:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003678:	2304      	movs	r3, #4
 800367a:	e00f      	b.n	800369c <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b00      	cmp	r3, #0
 8003686:	d004      	beq.n	8003692 <SDMMC_GetCmdResp2+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800368e:	2301      	movs	r3, #1
 8003690:	e004      	b.n	800369c <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003698:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3708      	adds	r7, #8
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bc90      	pop	{r4, r7}
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	20000020 	.word	0x20000020
 80036ac:	10624dd3 	.word	0x10624dd3

080036b0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80036b0:	b490      	push	{r4, r7}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80036b8:	4b15      	ldr	r3, [pc, #84]	; (8003710 <SDMMC_GetCmdResp3+0x60>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a15      	ldr	r2, [pc, #84]	; (8003714 <SDMMC_GetCmdResp3+0x64>)
 80036be:	fba2 2303 	umull	r2, r3, r2, r3
 80036c2:	0a5b      	lsrs	r3, r3, #9
 80036c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80036cc:	4623      	mov	r3, r4
 80036ce:	1e5c      	subs	r4, r3, #1
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d102      	bne.n	80036da <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80036d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80036d8:	e015      	b.n	8003706 <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036de:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d0f2      	beq.n	80036cc <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ea:	f003 0304 	and.w	r3, r3, #4
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d004      	beq.n	80036fc <SDMMC_GetCmdResp3+0x4c>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2204      	movs	r2, #4
 80036f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80036f8:	2304      	movs	r3, #4
 80036fa:	e004      	b.n	8003706 <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003702:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bc90      	pop	{r4, r7}
 800370e:	4770      	bx	lr
 8003710:	20000020 	.word	0x20000020
 8003714:	10624dd3 	.word	0x10624dd3

08003718 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8003718:	b590      	push	{r4, r7, lr}
 800371a:	b087      	sub	sp, #28
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	460b      	mov	r3, r1
 8003722:	607a      	str	r2, [r7, #4]
 8003724:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003726:	4b31      	ldr	r3, [pc, #196]	; (80037ec <SDMMC_GetCmdResp6+0xd4>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a31      	ldr	r2, [pc, #196]	; (80037f0 <SDMMC_GetCmdResp6+0xd8>)
 800372c:	fba2 2303 	umull	r2, r3, r2, r3
 8003730:	0a5b      	lsrs	r3, r3, #9
 8003732:	f241 3288 	movw	r2, #5000	; 0x1388
 8003736:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800373a:	4623      	mov	r3, r4
 800373c:	1e5c      	subs	r4, r3, #1
 800373e:	2b00      	cmp	r3, #0
 8003740:	d102      	bne.n	8003748 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003742:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003746:	e04c      	b.n	80037e2 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800374c:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8003750:	2b00      	cmp	r3, #0
 8003752:	d0f2      	beq.n	800373a <SDMMC_GetCmdResp6+0x22>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003758:	f003 0304 	and.w	r3, r3, #4
 800375c:	2b00      	cmp	r3, #0
 800375e:	d004      	beq.n	800376a <SDMMC_GetCmdResp6+0x52>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2204      	movs	r2, #4
 8003764:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003766:	2304      	movs	r3, #4
 8003768:	e03b      	b.n	80037e2 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d004      	beq.n	8003780 <SDMMC_GetCmdResp6+0x68>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2201      	movs	r2, #1
 800377a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800377c:	2301      	movs	r3, #1
 800377e:	e030      	b.n	80037e2 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f7ff fba0 	bl	8002ec6 <SDIO_GetCommandResponse>
 8003786:	4603      	mov	r3, r0
 8003788:	461a      	mov	r2, r3
 800378a:	7afb      	ldrb	r3, [r7, #11]
 800378c:	4293      	cmp	r3, r2
 800378e:	d001      	beq.n	8003794 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003790:	2301      	movs	r3, #1
 8003792:	e026      	b.n	80037e2 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800379a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800379c:	2100      	movs	r1, #0
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f7ff fb9e 	bl	8002ee0 <SDIO_GetResponse>
 80037a4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d106      	bne.n	80037be <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	0c1b      	lsrs	r3, r3, #16
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80037ba:	2300      	movs	r3, #0
 80037bc:	e011      	b.n	80037e2 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d002      	beq.n	80037ce <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80037c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037cc:	e009      	b.n	80037e2 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d002      	beq.n	80037de <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80037d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037dc:	e001      	b.n	80037e2 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80037de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	371c      	adds	r7, #28
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd90      	pop	{r4, r7, pc}
 80037ea:	bf00      	nop
 80037ec:	20000020 	.word	0x20000020
 80037f0:	10624dd3 	.word	0x10624dd3

080037f4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80037f4:	b490      	push	{r4, r7}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80037fc:	4b18      	ldr	r3, [pc, #96]	; (8003860 <SDMMC_GetCmdResp7+0x6c>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a18      	ldr	r2, [pc, #96]	; (8003864 <SDMMC_GetCmdResp7+0x70>)
 8003802:	fba2 2303 	umull	r2, r3, r2, r3
 8003806:	0a5b      	lsrs	r3, r3, #9
 8003808:	f241 3288 	movw	r2, #5000	; 0x1388
 800380c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8003810:	4623      	mov	r3, r4
 8003812:	1e5c      	subs	r4, r3, #1
 8003814:	2b00      	cmp	r3, #0
 8003816:	d102      	bne.n	800381e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8003818:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800381c:	e01a      	b.n	8003854 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003822:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0f2      	beq.n	8003810 <SDMMC_GetCmdResp7+0x1c>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800382e:	f003 0304 	and.w	r3, r3, #4
 8003832:	2b00      	cmp	r3, #0
 8003834:	d004      	beq.n	8003840 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2240      	movs	r2, #64	; 0x40
 800383a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800383c:	2304      	movs	r3, #4
 800383e:	e009      	b.n	8003854 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003848:	2b00      	cmp	r3, #0
 800384a:	d002      	beq.n	8003852 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2240      	movs	r2, #64	; 0x40
 8003850:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003852:	2300      	movs	r3, #0
  
}
 8003854:	4618      	mov	r0, r3
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bc90      	pop	{r4, r7}
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	20000020 	.word	0x20000020
 8003864:	10624dd3 	.word	0x10624dd3

08003868 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	4603      	mov	r3, r0
 8003870:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003872:	79fb      	ldrb	r3, [r7, #7]
 8003874:	4a08      	ldr	r2, [pc, #32]	; (8003898 <disk_status+0x30>)
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4413      	add	r3, r2
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	79fa      	ldrb	r2, [r7, #7]
 8003880:	4905      	ldr	r1, [pc, #20]	; (8003898 <disk_status+0x30>)
 8003882:	440a      	add	r2, r1
 8003884:	7a12      	ldrb	r2, [r2, #8]
 8003886:	4610      	mov	r0, r2
 8003888:	4798      	blx	r3
 800388a:	4603      	mov	r3, r0
 800388c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800388e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003890:	4618      	mov	r0, r3
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	200000cc 	.word	0x200000cc

0800389c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	4603      	mov	r3, r0
 80038a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80038a6:	2300      	movs	r3, #0
 80038a8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80038aa:	79fb      	ldrb	r3, [r7, #7]
 80038ac:	4a0d      	ldr	r2, [pc, #52]	; (80038e4 <disk_initialize+0x48>)
 80038ae:	5cd3      	ldrb	r3, [r2, r3]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d111      	bne.n	80038d8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80038b4:	79fb      	ldrb	r3, [r7, #7]
 80038b6:	4a0b      	ldr	r2, [pc, #44]	; (80038e4 <disk_initialize+0x48>)
 80038b8:	2101      	movs	r1, #1
 80038ba:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80038bc:	79fb      	ldrb	r3, [r7, #7]
 80038be:	4a09      	ldr	r2, [pc, #36]	; (80038e4 <disk_initialize+0x48>)
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	4413      	add	r3, r2
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	79fa      	ldrb	r2, [r7, #7]
 80038ca:	4906      	ldr	r1, [pc, #24]	; (80038e4 <disk_initialize+0x48>)
 80038cc:	440a      	add	r2, r1
 80038ce:	7a12      	ldrb	r2, [r2, #8]
 80038d0:	4610      	mov	r0, r2
 80038d2:	4798      	blx	r3
 80038d4:	4603      	mov	r3, r0
 80038d6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80038d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	200000cc 	.word	0x200000cc

080038e8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80038e8:	b590      	push	{r4, r7, lr}
 80038ea:	b087      	sub	sp, #28
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60b9      	str	r1, [r7, #8]
 80038f0:	607a      	str	r2, [r7, #4]
 80038f2:	603b      	str	r3, [r7, #0]
 80038f4:	4603      	mov	r3, r0
 80038f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80038f8:	7bfb      	ldrb	r3, [r7, #15]
 80038fa:	4a0a      	ldr	r2, [pc, #40]	; (8003924 <disk_read+0x3c>)
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4413      	add	r3, r2
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	689c      	ldr	r4, [r3, #8]
 8003904:	7bfb      	ldrb	r3, [r7, #15]
 8003906:	4a07      	ldr	r2, [pc, #28]	; (8003924 <disk_read+0x3c>)
 8003908:	4413      	add	r3, r2
 800390a:	7a18      	ldrb	r0, [r3, #8]
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	68b9      	ldr	r1, [r7, #8]
 8003912:	47a0      	blx	r4
 8003914:	4603      	mov	r3, r0
 8003916:	75fb      	strb	r3, [r7, #23]
  return res;
 8003918:	7dfb      	ldrb	r3, [r7, #23]
}
 800391a:	4618      	mov	r0, r3
 800391c:	371c      	adds	r7, #28
 800391e:	46bd      	mov	sp, r7
 8003920:	bd90      	pop	{r4, r7, pc}
 8003922:	bf00      	nop
 8003924:	200000cc 	.word	0x200000cc

08003928 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003928:	b590      	push	{r4, r7, lr}
 800392a:	b087      	sub	sp, #28
 800392c:	af00      	add	r7, sp, #0
 800392e:	60b9      	str	r1, [r7, #8]
 8003930:	607a      	str	r2, [r7, #4]
 8003932:	603b      	str	r3, [r7, #0]
 8003934:	4603      	mov	r3, r0
 8003936:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003938:	7bfb      	ldrb	r3, [r7, #15]
 800393a:	4a0a      	ldr	r2, [pc, #40]	; (8003964 <disk_write+0x3c>)
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	4413      	add	r3, r2
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	68dc      	ldr	r4, [r3, #12]
 8003944:	7bfb      	ldrb	r3, [r7, #15]
 8003946:	4a07      	ldr	r2, [pc, #28]	; (8003964 <disk_write+0x3c>)
 8003948:	4413      	add	r3, r2
 800394a:	7a18      	ldrb	r0, [r3, #8]
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	68b9      	ldr	r1, [r7, #8]
 8003952:	47a0      	blx	r4
 8003954:	4603      	mov	r3, r0
 8003956:	75fb      	strb	r3, [r7, #23]
  return res;
 8003958:	7dfb      	ldrb	r3, [r7, #23]
}
 800395a:	4618      	mov	r0, r3
 800395c:	371c      	adds	r7, #28
 800395e:	46bd      	mov	sp, r7
 8003960:	bd90      	pop	{r4, r7, pc}
 8003962:	bf00      	nop
 8003964:	200000cc 	.word	0x200000cc

08003968 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	4603      	mov	r3, r0
 8003970:	603a      	str	r2, [r7, #0]
 8003972:	71fb      	strb	r3, [r7, #7]
 8003974:	460b      	mov	r3, r1
 8003976:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003978:	79fb      	ldrb	r3, [r7, #7]
 800397a:	4a09      	ldr	r2, [pc, #36]	; (80039a0 <disk_ioctl+0x38>)
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4413      	add	r3, r2
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	79fa      	ldrb	r2, [r7, #7]
 8003986:	4906      	ldr	r1, [pc, #24]	; (80039a0 <disk_ioctl+0x38>)
 8003988:	440a      	add	r2, r1
 800398a:	7a10      	ldrb	r0, [r2, #8]
 800398c:	79b9      	ldrb	r1, [r7, #6]
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	4798      	blx	r3
 8003992:	4603      	mov	r3, r0
 8003994:	73fb      	strb	r3, [r7, #15]
  return res;
 8003996:	7bfb      	ldrb	r3, [r7, #15]
}
 8003998:	4618      	mov	r0, r3
 800399a:	3710      	adds	r7, #16
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	200000cc 	.word	0x200000cc

080039a4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3301      	adds	r3, #1
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80039b4:	89fb      	ldrh	r3, [r7, #14]
 80039b6:	021b      	lsls	r3, r3, #8
 80039b8:	b21a      	sxth	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	b21b      	sxth	r3, r3
 80039c0:	4313      	orrs	r3, r2
 80039c2:	b21b      	sxth	r3, r3
 80039c4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80039c6:	89fb      	ldrh	r3, [r7, #14]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3714      	adds	r7, #20
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3303      	adds	r3, #3
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	021b      	lsls	r3, r3, #8
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	3202      	adds	r2, #2
 80039ec:	7812      	ldrb	r2, [r2, #0]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	021b      	lsls	r3, r3, #8
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	3201      	adds	r2, #1
 80039fa:	7812      	ldrb	r2, [r2, #0]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	021b      	lsls	r3, r3, #8
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	7812      	ldrb	r2, [r2, #0]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	60fb      	str	r3, [r7, #12]
	return rv;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr

08003a1a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b083      	sub	sp, #12
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
 8003a22:	460b      	mov	r3, r1
 8003a24:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	1c5a      	adds	r2, r3, #1
 8003a2a:	607a      	str	r2, [r7, #4]
 8003a2c:	887a      	ldrh	r2, [r7, #2]
 8003a2e:	b2d2      	uxtb	r2, r2
 8003a30:	701a      	strb	r2, [r3, #0]
 8003a32:	887b      	ldrh	r3, [r7, #2]
 8003a34:	0a1b      	lsrs	r3, r3, #8
 8003a36:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	1c5a      	adds	r2, r3, #1
 8003a3c:	607a      	str	r2, [r7, #4]
 8003a3e:	887a      	ldrh	r2, [r7, #2]
 8003a40:	b2d2      	uxtb	r2, r2
 8003a42:	701a      	strb	r2, [r3, #0]
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	1c5a      	adds	r2, r3, #1
 8003a5e:	607a      	str	r2, [r7, #4]
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	b2d2      	uxtb	r2, r2
 8003a64:	701a      	strb	r2, [r3, #0]
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	0a1b      	lsrs	r3, r3, #8
 8003a6a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	1c5a      	adds	r2, r3, #1
 8003a70:	607a      	str	r2, [r7, #4]
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	b2d2      	uxtb	r2, r2
 8003a76:	701a      	strb	r2, [r3, #0]
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	0a1b      	lsrs	r3, r3, #8
 8003a7c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	1c5a      	adds	r2, r3, #1
 8003a82:	607a      	str	r2, [r7, #4]
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	b2d2      	uxtb	r2, r2
 8003a88:	701a      	strb	r2, [r3, #0]
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	0a1b      	lsrs	r3, r3, #8
 8003a8e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	1c5a      	adds	r2, r3, #1
 8003a94:	607a      	str	r2, [r7, #4]
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	b2d2      	uxtb	r2, r2
 8003a9a:	701a      	strb	r2, [r3, #0]
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003aa8:	b480      	push	{r7}
 8003aaa:	b087      	sub	sp, #28
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00d      	beq.n	8003ade <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	1c53      	adds	r3, r2, #1
 8003ac6:	613b      	str	r3, [r7, #16]
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	1c59      	adds	r1, r3, #1
 8003acc:	6179      	str	r1, [r7, #20]
 8003ace:	7812      	ldrb	r2, [r2, #0]
 8003ad0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	607b      	str	r3, [r7, #4]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1f1      	bne.n	8003ac2 <mem_cpy+0x1a>
	}
}
 8003ade:	bf00      	nop
 8003ae0:	371c      	adds	r7, #28
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr

08003aea <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003aea:	b480      	push	{r7}
 8003aec:	b087      	sub	sp, #28
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	60f8      	str	r0, [r7, #12]
 8003af2:	60b9      	str	r1, [r7, #8]
 8003af4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	1c5a      	adds	r2, r3, #1
 8003afe:	617a      	str	r2, [r7, #20]
 8003b00:	68ba      	ldr	r2, [r7, #8]
 8003b02:	b2d2      	uxtb	r2, r2
 8003b04:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	607b      	str	r3, [r7, #4]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1f3      	bne.n	8003afa <mem_set+0x10>
}
 8003b12:	bf00      	nop
 8003b14:	371c      	adds	r7, #28
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003b1e:	b480      	push	{r7}
 8003b20:	b089      	sub	sp, #36	; 0x24
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	60f8      	str	r0, [r7, #12]
 8003b26:	60b9      	str	r1, [r7, #8]
 8003b28:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	61fb      	str	r3, [r7, #28]
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003b32:	2300      	movs	r3, #0
 8003b34:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	1c5a      	adds	r2, r3, #1
 8003b3a:	61fa      	str	r2, [r7, #28]
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	4619      	mov	r1, r3
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	1c5a      	adds	r2, r3, #1
 8003b44:	61ba      	str	r2, [r7, #24]
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	1acb      	subs	r3, r1, r3
 8003b4a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	607b      	str	r3, [r7, #4]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d002      	beq.n	8003b5e <mem_cmp+0x40>
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d0eb      	beq.n	8003b36 <mem_cmp+0x18>

	return r;
 8003b5e:	697b      	ldr	r3, [r7, #20]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3724      	adds	r7, #36	; 0x24
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003b76:	e002      	b.n	8003b7e <chk_chr+0x12>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	607b      	str	r3, [r7, #4]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d005      	beq.n	8003b92 <chk_chr+0x26>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d1f2      	bne.n	8003b78 <chk_chr+0xc>
	return *str;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	781b      	ldrb	r3, [r3, #0]
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	370c      	adds	r7, #12
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
	...

08003ba4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003bae:	2300      	movs	r3, #0
 8003bb0:	60bb      	str	r3, [r7, #8]
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	60fb      	str	r3, [r7, #12]
 8003bb6:	e029      	b.n	8003c0c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8003bb8:	4a27      	ldr	r2, [pc, #156]	; (8003c58 <chk_lock+0xb4>)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	011b      	lsls	r3, r3, #4
 8003bbe:	4413      	add	r3, r2
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d01d      	beq.n	8003c02 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003bc6:	4a24      	ldr	r2, [pc, #144]	; (8003c58 <chk_lock+0xb4>)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	011b      	lsls	r3, r3, #4
 8003bcc:	4413      	add	r3, r2
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d116      	bne.n	8003c06 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8003bd8:	4a1f      	ldr	r2, [pc, #124]	; (8003c58 <chk_lock+0xb4>)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	011b      	lsls	r3, r3, #4
 8003bde:	4413      	add	r3, r2
 8003be0:	3304      	adds	r3, #4
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d10c      	bne.n	8003c06 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003bec:	4a1a      	ldr	r2, [pc, #104]	; (8003c58 <chk_lock+0xb4>)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	011b      	lsls	r3, r3, #4
 8003bf2:	4413      	add	r3, r2
 8003bf4:	3308      	adds	r3, #8
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d102      	bne.n	8003c06 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003c00:	e007      	b.n	8003c12 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8003c02:	2301      	movs	r3, #1
 8003c04:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	60fb      	str	r3, [r7, #12]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d9d2      	bls.n	8003bb8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d109      	bne.n	8003c2c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d102      	bne.n	8003c24 <chk_lock+0x80>
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d101      	bne.n	8003c28 <chk_lock+0x84>
 8003c24:	2300      	movs	r3, #0
 8003c26:	e010      	b.n	8003c4a <chk_lock+0xa6>
 8003c28:	2312      	movs	r3, #18
 8003c2a:	e00e      	b.n	8003c4a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d108      	bne.n	8003c44 <chk_lock+0xa0>
 8003c32:	4a09      	ldr	r2, [pc, #36]	; (8003c58 <chk_lock+0xb4>)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	011b      	lsls	r3, r3, #4
 8003c38:	4413      	add	r3, r2
 8003c3a:	330c      	adds	r3, #12
 8003c3c:	881b      	ldrh	r3, [r3, #0]
 8003c3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c42:	d101      	bne.n	8003c48 <chk_lock+0xa4>
 8003c44:	2310      	movs	r3, #16
 8003c46:	e000      	b.n	8003c4a <chk_lock+0xa6>
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3714      	adds	r7, #20
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	200000ac 	.word	0x200000ac

08003c5c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003c62:	2300      	movs	r3, #0
 8003c64:	607b      	str	r3, [r7, #4]
 8003c66:	e002      	b.n	8003c6e <enq_lock+0x12>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	607b      	str	r3, [r7, #4]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d806      	bhi.n	8003c82 <enq_lock+0x26>
 8003c74:	4a09      	ldr	r2, [pc, #36]	; (8003c9c <enq_lock+0x40>)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	011b      	lsls	r3, r3, #4
 8003c7a:	4413      	add	r3, r2
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1f2      	bne.n	8003c68 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	bf14      	ite	ne
 8003c88:	2301      	movne	r3, #1
 8003c8a:	2300      	moveq	r3, #0
 8003c8c:	b2db      	uxtb	r3, r3
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	200000ac 	.word	0x200000ac

08003ca0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003caa:	2300      	movs	r3, #0
 8003cac:	60fb      	str	r3, [r7, #12]
 8003cae:	e01f      	b.n	8003cf0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8003cb0:	4a41      	ldr	r2, [pc, #260]	; (8003db8 <inc_lock+0x118>)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	011b      	lsls	r3, r3, #4
 8003cb6:	4413      	add	r3, r2
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d113      	bne.n	8003cea <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8003cc2:	4a3d      	ldr	r2, [pc, #244]	; (8003db8 <inc_lock+0x118>)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	011b      	lsls	r3, r3, #4
 8003cc8:	4413      	add	r3, r2
 8003cca:	3304      	adds	r3, #4
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d109      	bne.n	8003cea <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8003cd6:	4a38      	ldr	r2, [pc, #224]	; (8003db8 <inc_lock+0x118>)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	011b      	lsls	r3, r3, #4
 8003cdc:	4413      	add	r3, r2
 8003cde:	3308      	adds	r3, #8
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d006      	beq.n	8003cf8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	3301      	adds	r3, #1
 8003cee:	60fb      	str	r3, [r7, #12]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d9dc      	bls.n	8003cb0 <inc_lock+0x10>
 8003cf6:	e000      	b.n	8003cfa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8003cf8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d132      	bne.n	8003d66 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003d00:	2300      	movs	r3, #0
 8003d02:	60fb      	str	r3, [r7, #12]
 8003d04:	e002      	b.n	8003d0c <inc_lock+0x6c>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	3301      	adds	r3, #1
 8003d0a:	60fb      	str	r3, [r7, #12]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d806      	bhi.n	8003d20 <inc_lock+0x80>
 8003d12:	4a29      	ldr	r2, [pc, #164]	; (8003db8 <inc_lock+0x118>)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	011b      	lsls	r3, r3, #4
 8003d18:	4413      	add	r3, r2
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d1f2      	bne.n	8003d06 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d101      	bne.n	8003d2a <inc_lock+0x8a>
 8003d26:	2300      	movs	r3, #0
 8003d28:	e040      	b.n	8003dac <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	4922      	ldr	r1, [pc, #136]	; (8003db8 <inc_lock+0x118>)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	011b      	lsls	r3, r3, #4
 8003d34:	440b      	add	r3, r1
 8003d36:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689a      	ldr	r2, [r3, #8]
 8003d3c:	491e      	ldr	r1, [pc, #120]	; (8003db8 <inc_lock+0x118>)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	011b      	lsls	r3, r3, #4
 8003d42:	440b      	add	r3, r1
 8003d44:	3304      	adds	r3, #4
 8003d46:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	695a      	ldr	r2, [r3, #20]
 8003d4c:	491a      	ldr	r1, [pc, #104]	; (8003db8 <inc_lock+0x118>)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	011b      	lsls	r3, r3, #4
 8003d52:	440b      	add	r3, r1
 8003d54:	3308      	adds	r3, #8
 8003d56:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8003d58:	4a17      	ldr	r2, [pc, #92]	; (8003db8 <inc_lock+0x118>)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	011b      	lsls	r3, r3, #4
 8003d5e:	4413      	add	r3, r2
 8003d60:	330c      	adds	r3, #12
 8003d62:	2200      	movs	r2, #0
 8003d64:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d009      	beq.n	8003d80 <inc_lock+0xe0>
 8003d6c:	4a12      	ldr	r2, [pc, #72]	; (8003db8 <inc_lock+0x118>)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	011b      	lsls	r3, r3, #4
 8003d72:	4413      	add	r3, r2
 8003d74:	330c      	adds	r3, #12
 8003d76:	881b      	ldrh	r3, [r3, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <inc_lock+0xe0>
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	e015      	b.n	8003dac <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d108      	bne.n	8003d98 <inc_lock+0xf8>
 8003d86:	4a0c      	ldr	r2, [pc, #48]	; (8003db8 <inc_lock+0x118>)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	011b      	lsls	r3, r3, #4
 8003d8c:	4413      	add	r3, r2
 8003d8e:	330c      	adds	r3, #12
 8003d90:	881b      	ldrh	r3, [r3, #0]
 8003d92:	3301      	adds	r3, #1
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	e001      	b.n	8003d9c <inc_lock+0xfc>
 8003d98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d9c:	4906      	ldr	r1, [pc, #24]	; (8003db8 <inc_lock+0x118>)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	011b      	lsls	r3, r3, #4
 8003da2:	440b      	add	r3, r1
 8003da4:	330c      	adds	r3, #12
 8003da6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	3301      	adds	r3, #1
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3714      	adds	r7, #20
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr
 8003db8:	200000ac 	.word	0x200000ac

08003dbc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	607b      	str	r3, [r7, #4]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d825      	bhi.n	8003e1c <dec_lock+0x60>
		n = Files[i].ctr;
 8003dd0:	4a17      	ldr	r2, [pc, #92]	; (8003e30 <dec_lock+0x74>)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	011b      	lsls	r3, r3, #4
 8003dd6:	4413      	add	r3, r2
 8003dd8:	330c      	adds	r3, #12
 8003dda:	881b      	ldrh	r3, [r3, #0]
 8003ddc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003dde:	89fb      	ldrh	r3, [r7, #14]
 8003de0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003de4:	d101      	bne.n	8003dea <dec_lock+0x2e>
 8003de6:	2300      	movs	r3, #0
 8003de8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8003dea:	89fb      	ldrh	r3, [r7, #14]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d002      	beq.n	8003df6 <dec_lock+0x3a>
 8003df0:	89fb      	ldrh	r3, [r7, #14]
 8003df2:	3b01      	subs	r3, #1
 8003df4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8003df6:	4a0e      	ldr	r2, [pc, #56]	; (8003e30 <dec_lock+0x74>)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	011b      	lsls	r3, r3, #4
 8003dfc:	4413      	add	r3, r2
 8003dfe:	330c      	adds	r3, #12
 8003e00:	89fa      	ldrh	r2, [r7, #14]
 8003e02:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003e04:	89fb      	ldrh	r3, [r7, #14]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d105      	bne.n	8003e16 <dec_lock+0x5a>
 8003e0a:	4a09      	ldr	r2, [pc, #36]	; (8003e30 <dec_lock+0x74>)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	011b      	lsls	r3, r3, #4
 8003e10:	4413      	add	r3, r2
 8003e12:	2200      	movs	r2, #0
 8003e14:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003e16:	2300      	movs	r3, #0
 8003e18:	737b      	strb	r3, [r7, #13]
 8003e1a:	e001      	b.n	8003e20 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003e20:	7b7b      	ldrb	r3, [r7, #13]
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3714      	adds	r7, #20
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	200000ac 	.word	0x200000ac

08003e34 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	60fb      	str	r3, [r7, #12]
 8003e40:	e010      	b.n	8003e64 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003e42:	4a0d      	ldr	r2, [pc, #52]	; (8003e78 <clear_lock+0x44>)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	011b      	lsls	r3, r3, #4
 8003e48:	4413      	add	r3, r2
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d105      	bne.n	8003e5e <clear_lock+0x2a>
 8003e52:	4a09      	ldr	r2, [pc, #36]	; (8003e78 <clear_lock+0x44>)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	011b      	lsls	r3, r3, #4
 8003e58:	4413      	add	r3, r2
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	3301      	adds	r3, #1
 8003e62:	60fb      	str	r3, [r7, #12]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d9eb      	bls.n	8003e42 <clear_lock+0xe>
	}
}
 8003e6a:	bf00      	nop
 8003e6c:	3714      	adds	r7, #20
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	200000ac 	.word	0x200000ac

08003e7c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003e84:	2300      	movs	r3, #0
 8003e86:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	78db      	ldrb	r3, [r3, #3]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d034      	beq.n	8003efa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e94:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	7858      	ldrb	r0, [r3, #1]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	f7ff fd40 	bl	8003928 <disk_write>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d002      	beq.n	8003eb4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	73fb      	strb	r3, [r7, #15]
 8003eb2:	e022      	b.n	8003efa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	1ad2      	subs	r2, r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d217      	bcs.n	8003efa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	789b      	ldrb	r3, [r3, #2]
 8003ece:	613b      	str	r3, [r7, #16]
 8003ed0:	e010      	b.n	8003ef4 <sync_window+0x78>
					wsect += fs->fsize;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	4413      	add	r3, r2
 8003eda:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	7858      	ldrb	r0, [r3, #1]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	f7ff fd1d 	bl	8003928 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	613b      	str	r3, [r7, #16]
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d8eb      	bhi.n	8003ed2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8003efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3718      	adds	r7, #24
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f16:	683a      	ldr	r2, [r7, #0]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d01b      	beq.n	8003f54 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f7ff ffad 	bl	8003e7c <sync_window>
 8003f22:	4603      	mov	r3, r0
 8003f24:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003f26:	7bfb      	ldrb	r3, [r7, #15]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d113      	bne.n	8003f54 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	7858      	ldrb	r0, [r3, #1]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003f36:	2301      	movs	r3, #1
 8003f38:	683a      	ldr	r2, [r7, #0]
 8003f3a:	f7ff fcd5 	bl	80038e8 <disk_read>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d004      	beq.n	8003f4e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003f44:	f04f 33ff 	mov.w	r3, #4294967295
 8003f48:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8003f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3710      	adds	r7, #16
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
	...

08003f60 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f7ff ff87 	bl	8003e7c <sync_window>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003f72:	7bfb      	ldrb	r3, [r7, #15]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d159      	bne.n	800402c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	2b03      	cmp	r3, #3
 8003f7e:	d149      	bne.n	8004014 <sync_fs+0xb4>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	791b      	ldrb	r3, [r3, #4]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d145      	bne.n	8004014 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	899b      	ldrh	r3, [r3, #12]
 8003f92:	461a      	mov	r2, r3
 8003f94:	2100      	movs	r1, #0
 8003f96:	f7ff fda8 	bl	8003aea <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	3334      	adds	r3, #52	; 0x34
 8003f9e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003fa2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7ff fd37 	bl	8003a1a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	3334      	adds	r3, #52	; 0x34
 8003fb0:	4921      	ldr	r1, [pc, #132]	; (8004038 <sync_fs+0xd8>)
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7ff fd4c 	bl	8003a50 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3334      	adds	r3, #52	; 0x34
 8003fbc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003fc0:	491e      	ldr	r1, [pc, #120]	; (800403c <sync_fs+0xdc>)
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7ff fd44 	bl	8003a50 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	3334      	adds	r3, #52	; 0x34
 8003fcc:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	4610      	mov	r0, r2
 8003fd8:	f7ff fd3a 	bl	8003a50 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3334      	adds	r3, #52	; 0x34
 8003fe0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	4619      	mov	r1, r3
 8003fea:	4610      	mov	r0, r2
 8003fec:	f7ff fd30 	bl	8003a50 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	1c5a      	adds	r2, r3, #1
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	7858      	ldrb	r0, [r3, #1]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004008:	2301      	movs	r3, #1
 800400a:	f7ff fc8d 	bl	8003928 <disk_write>
			fs->fsi_flag = 0;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	785b      	ldrb	r3, [r3, #1]
 8004018:	2200      	movs	r2, #0
 800401a:	2100      	movs	r1, #0
 800401c:	4618      	mov	r0, r3
 800401e:	f7ff fca3 	bl	8003968 <disk_ioctl>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d001      	beq.n	800402c <sync_fs+0xcc>
 8004028:	2301      	movs	r3, #1
 800402a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800402c:	7bfb      	ldrb	r3, [r7, #15]
}
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	41615252 	.word	0x41615252
 800403c:	61417272 	.word	0x61417272

08004040 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	3b02      	subs	r3, #2
 800404e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	3b02      	subs	r3, #2
 8004056:	683a      	ldr	r2, [r7, #0]
 8004058:	429a      	cmp	r2, r3
 800405a:	d301      	bcc.n	8004060 <clust2sect+0x20>
 800405c:	2300      	movs	r3, #0
 800405e:	e008      	b.n	8004072 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	895b      	ldrh	r3, [r3, #10]
 8004064:	461a      	mov	r2, r3
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	fb03 f202 	mul.w	r2, r3, r2
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004070:	4413      	add	r3, r2
}
 8004072:	4618      	mov	r0, r3
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr

0800407e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b086      	sub	sp, #24
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
 8004086:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d904      	bls.n	800409e <get_fat+0x20>
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	429a      	cmp	r2, r3
 800409c:	d302      	bcc.n	80040a4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800409e:	2301      	movs	r3, #1
 80040a0:	617b      	str	r3, [r7, #20]
 80040a2:	e0b7      	b.n	8004214 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80040a4:	f04f 33ff 	mov.w	r3, #4294967295
 80040a8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d05a      	beq.n	8004168 <get_fat+0xea>
 80040b2:	2b03      	cmp	r3, #3
 80040b4:	d07d      	beq.n	80041b2 <get_fat+0x134>
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	f040 80a2 	bne.w	8004200 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	60fb      	str	r3, [r7, #12]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	085b      	lsrs	r3, r3, #1
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	4413      	add	r3, r2
 80040c8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	899b      	ldrh	r3, [r3, #12]
 80040d2:	4619      	mov	r1, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80040da:	4413      	add	r3, r2
 80040dc:	4619      	mov	r1, r3
 80040de:	6938      	ldr	r0, [r7, #16]
 80040e0:	f7ff ff10 	bl	8003f04 <move_window>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	f040 808d 	bne.w	8004206 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	1c5a      	adds	r2, r3, #1
 80040f0:	60fa      	str	r2, [r7, #12]
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	8992      	ldrh	r2, [r2, #12]
 80040f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80040fa:	fb02 f201 	mul.w	r2, r2, r1
 80040fe:	1a9b      	subs	r3, r3, r2
 8004100:	693a      	ldr	r2, [r7, #16]
 8004102:	4413      	add	r3, r2
 8004104:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004108:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	899b      	ldrh	r3, [r3, #12]
 8004112:	4619      	mov	r1, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	fbb3 f3f1 	udiv	r3, r3, r1
 800411a:	4413      	add	r3, r2
 800411c:	4619      	mov	r1, r3
 800411e:	6938      	ldr	r0, [r7, #16]
 8004120:	f7ff fef0 	bl	8003f04 <move_window>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d16f      	bne.n	800420a <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	899b      	ldrh	r3, [r3, #12]
 800412e:	461a      	mov	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	fbb3 f1f2 	udiv	r1, r3, r2
 8004136:	fb02 f201 	mul.w	r2, r2, r1
 800413a:	1a9b      	subs	r3, r3, r2
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	4413      	add	r3, r2
 8004140:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004144:	021b      	lsls	r3, r3, #8
 8004146:	461a      	mov	r2, r3
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	4313      	orrs	r3, r2
 800414c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	2b00      	cmp	r3, #0
 8004156:	d002      	beq.n	800415e <get_fat+0xe0>
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	091b      	lsrs	r3, r3, #4
 800415c:	e002      	b.n	8004164 <get_fat+0xe6>
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004164:	617b      	str	r3, [r7, #20]
			break;
 8004166:	e055      	b.n	8004214 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	899b      	ldrh	r3, [r3, #12]
 8004170:	085b      	lsrs	r3, r3, #1
 8004172:	b29b      	uxth	r3, r3
 8004174:	4619      	mov	r1, r3
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	fbb3 f3f1 	udiv	r3, r3, r1
 800417c:	4413      	add	r3, r2
 800417e:	4619      	mov	r1, r3
 8004180:	6938      	ldr	r0, [r7, #16]
 8004182:	f7ff febf 	bl	8003f04 <move_window>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d140      	bne.n	800420e <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	005b      	lsls	r3, r3, #1
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	8992      	ldrh	r2, [r2, #12]
 800419a:	fbb3 f0f2 	udiv	r0, r3, r2
 800419e:	fb02 f200 	mul.w	r2, r2, r0
 80041a2:	1a9b      	subs	r3, r3, r2
 80041a4:	440b      	add	r3, r1
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7ff fbfc 	bl	80039a4 <ld_word>
 80041ac:	4603      	mov	r3, r0
 80041ae:	617b      	str	r3, [r7, #20]
			break;
 80041b0:	e030      	b.n	8004214 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	899b      	ldrh	r3, [r3, #12]
 80041ba:	089b      	lsrs	r3, r3, #2
 80041bc:	b29b      	uxth	r3, r3
 80041be:	4619      	mov	r1, r3
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80041c6:	4413      	add	r3, r2
 80041c8:	4619      	mov	r1, r3
 80041ca:	6938      	ldr	r0, [r7, #16]
 80041cc:	f7ff fe9a 	bl	8003f04 <move_window>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d11d      	bne.n	8004212 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	8992      	ldrh	r2, [r2, #12]
 80041e4:	fbb3 f0f2 	udiv	r0, r3, r2
 80041e8:	fb02 f200 	mul.w	r2, r2, r0
 80041ec:	1a9b      	subs	r3, r3, r2
 80041ee:	440b      	add	r3, r1
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7ff fbef 	bl	80039d4 <ld_dword>
 80041f6:	4603      	mov	r3, r0
 80041f8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80041fc:	617b      	str	r3, [r7, #20]
			break;
 80041fe:	e009      	b.n	8004214 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004200:	2301      	movs	r3, #1
 8004202:	617b      	str	r3, [r7, #20]
 8004204:	e006      	b.n	8004214 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004206:	bf00      	nop
 8004208:	e004      	b.n	8004214 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800420a:	bf00      	nop
 800420c:	e002      	b.n	8004214 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800420e:	bf00      	nop
 8004210:	e000      	b.n	8004214 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004212:	bf00      	nop
		}
	}

	return val;
 8004214:	697b      	ldr	r3, [r7, #20]
}
 8004216:	4618      	mov	r0, r3
 8004218:	3718      	adds	r7, #24
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800421e:	b590      	push	{r4, r7, lr}
 8004220:	b089      	sub	sp, #36	; 0x24
 8004222:	af00      	add	r7, sp, #0
 8004224:	60f8      	str	r0, [r7, #12]
 8004226:	60b9      	str	r1, [r7, #8]
 8004228:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800422a:	2302      	movs	r3, #2
 800422c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	2b01      	cmp	r3, #1
 8004232:	f240 8106 	bls.w	8004442 <put_fat+0x224>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	68ba      	ldr	r2, [r7, #8]
 800423c:	429a      	cmp	r2, r3
 800423e:	f080 8100 	bcs.w	8004442 <put_fat+0x224>
		switch (fs->fs_type) {
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	2b02      	cmp	r3, #2
 8004248:	f000 8088 	beq.w	800435c <put_fat+0x13e>
 800424c:	2b03      	cmp	r3, #3
 800424e:	f000 80b0 	beq.w	80043b2 <put_fat+0x194>
 8004252:	2b01      	cmp	r3, #1
 8004254:	f040 80f5 	bne.w	8004442 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	61bb      	str	r3, [r7, #24]
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	085b      	lsrs	r3, r3, #1
 8004260:	69ba      	ldr	r2, [r7, #24]
 8004262:	4413      	add	r3, r2
 8004264:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	899b      	ldrh	r3, [r3, #12]
 800426e:	4619      	mov	r1, r3
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	fbb3 f3f1 	udiv	r3, r3, r1
 8004276:	4413      	add	r3, r2
 8004278:	4619      	mov	r1, r3
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f7ff fe42 	bl	8003f04 <move_window>
 8004280:	4603      	mov	r3, r0
 8004282:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004284:	7ffb      	ldrb	r3, [r7, #31]
 8004286:	2b00      	cmp	r3, #0
 8004288:	f040 80d4 	bne.w	8004434 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	1c5a      	adds	r2, r3, #1
 8004296:	61ba      	str	r2, [r7, #24]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	8992      	ldrh	r2, [r2, #12]
 800429c:	fbb3 f0f2 	udiv	r0, r3, r2
 80042a0:	fb02 f200 	mul.w	r2, r2, r0
 80042a4:	1a9b      	subs	r3, r3, r2
 80042a6:	440b      	add	r3, r1
 80042a8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	f003 0301 	and.w	r3, r3, #1
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00d      	beq.n	80042d0 <put_fat+0xb2>
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	b25b      	sxtb	r3, r3
 80042ba:	f003 030f 	and.w	r3, r3, #15
 80042be:	b25a      	sxtb	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	011b      	lsls	r3, r3, #4
 80042c6:	b25b      	sxtb	r3, r3
 80042c8:	4313      	orrs	r3, r2
 80042ca:	b25b      	sxtb	r3, r3
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	e001      	b.n	80042d4 <put_fat+0xb6>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2201      	movs	r2, #1
 80042dc:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	899b      	ldrh	r3, [r3, #12]
 80042e6:	4619      	mov	r1, r3
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80042ee:	4413      	add	r3, r2
 80042f0:	4619      	mov	r1, r3
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f7ff fe06 	bl	8003f04 <move_window>
 80042f8:	4603      	mov	r3, r0
 80042fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80042fc:	7ffb      	ldrb	r3, [r7, #31]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	f040 809a 	bne.w	8004438 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	899b      	ldrh	r3, [r3, #12]
 800430e:	461a      	mov	r2, r3
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	fbb3 f0f2 	udiv	r0, r3, r2
 8004316:	fb02 f200 	mul.w	r2, r2, r0
 800431a:	1a9b      	subs	r3, r3, r2
 800431c:	440b      	add	r3, r1
 800431e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <put_fat+0x114>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	091b      	lsrs	r3, r3, #4
 800432e:	b2db      	uxtb	r3, r3
 8004330:	e00e      	b.n	8004350 <put_fat+0x132>
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	b25b      	sxtb	r3, r3
 8004338:	f023 030f 	bic.w	r3, r3, #15
 800433c:	b25a      	sxtb	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	0a1b      	lsrs	r3, r3, #8
 8004342:	b25b      	sxtb	r3, r3
 8004344:	f003 030f 	and.w	r3, r3, #15
 8004348:	b25b      	sxtb	r3, r3
 800434a:	4313      	orrs	r3, r2
 800434c:	b25b      	sxtb	r3, r3
 800434e:	b2db      	uxtb	r3, r3
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2201      	movs	r2, #1
 8004358:	70da      	strb	r2, [r3, #3]
			break;
 800435a:	e072      	b.n	8004442 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	899b      	ldrh	r3, [r3, #12]
 8004364:	085b      	lsrs	r3, r3, #1
 8004366:	b29b      	uxth	r3, r3
 8004368:	4619      	mov	r1, r3
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004370:	4413      	add	r3, r2
 8004372:	4619      	mov	r1, r3
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f7ff fdc5 	bl	8003f04 <move_window>
 800437a:	4603      	mov	r3, r0
 800437c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800437e:	7ffb      	ldrb	r3, [r7, #31]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d15b      	bne.n	800443c <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	8992      	ldrh	r2, [r2, #12]
 8004392:	fbb3 f0f2 	udiv	r0, r3, r2
 8004396:	fb02 f200 	mul.w	r2, r2, r0
 800439a:	1a9b      	subs	r3, r3, r2
 800439c:	440b      	add	r3, r1
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	b292      	uxth	r2, r2
 80043a2:	4611      	mov	r1, r2
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7ff fb38 	bl	8003a1a <st_word>
			fs->wflag = 1;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2201      	movs	r2, #1
 80043ae:	70da      	strb	r2, [r3, #3]
			break;
 80043b0:	e047      	b.n	8004442 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	899b      	ldrh	r3, [r3, #12]
 80043ba:	089b      	lsrs	r3, r3, #2
 80043bc:	b29b      	uxth	r3, r3
 80043be:	4619      	mov	r1, r3
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80043c6:	4413      	add	r3, r2
 80043c8:	4619      	mov	r1, r3
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f7ff fd9a 	bl	8003f04 <move_window>
 80043d0:	4603      	mov	r3, r0
 80043d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80043d4:	7ffb      	ldrb	r3, [r7, #31]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d132      	bne.n	8004440 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	8992      	ldrh	r2, [r2, #12]
 80043ee:	fbb3 f0f2 	udiv	r0, r3, r2
 80043f2:	fb02 f200 	mul.w	r2, r2, r0
 80043f6:	1a9b      	subs	r3, r3, r2
 80043f8:	440b      	add	r3, r1
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7ff faea 	bl	80039d4 <ld_dword>
 8004400:	4603      	mov	r3, r0
 8004402:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004406:	4323      	orrs	r3, r4
 8004408:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	8992      	ldrh	r2, [r2, #12]
 8004418:	fbb3 f0f2 	udiv	r0, r3, r2
 800441c:	fb02 f200 	mul.w	r2, r2, r0
 8004420:	1a9b      	subs	r3, r3, r2
 8004422:	440b      	add	r3, r1
 8004424:	6879      	ldr	r1, [r7, #4]
 8004426:	4618      	mov	r0, r3
 8004428:	f7ff fb12 	bl	8003a50 <st_dword>
			fs->wflag = 1;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2201      	movs	r2, #1
 8004430:	70da      	strb	r2, [r3, #3]
			break;
 8004432:	e006      	b.n	8004442 <put_fat+0x224>
			if (res != FR_OK) break;
 8004434:	bf00      	nop
 8004436:	e004      	b.n	8004442 <put_fat+0x224>
			if (res != FR_OK) break;
 8004438:	bf00      	nop
 800443a:	e002      	b.n	8004442 <put_fat+0x224>
			if (res != FR_OK) break;
 800443c:	bf00      	nop
 800443e:	e000      	b.n	8004442 <put_fat+0x224>
			if (res != FR_OK) break;
 8004440:	bf00      	nop
		}
	}
	return res;
 8004442:	7ffb      	ldrb	r3, [r7, #31]
}
 8004444:	4618      	mov	r0, r3
 8004446:	3724      	adds	r7, #36	; 0x24
 8004448:	46bd      	mov	sp, r7
 800444a:	bd90      	pop	{r4, r7, pc}

0800444c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b088      	sub	sp, #32
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004458:	2300      	movs	r3, #0
 800445a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d904      	bls.n	8004472 <remove_chain+0x26>
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	68ba      	ldr	r2, [r7, #8]
 800446e:	429a      	cmp	r2, r3
 8004470:	d301      	bcc.n	8004476 <remove_chain+0x2a>
 8004472:	2302      	movs	r3, #2
 8004474:	e04b      	b.n	800450e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00c      	beq.n	8004496 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800447c:	f04f 32ff 	mov.w	r2, #4294967295
 8004480:	6879      	ldr	r1, [r7, #4]
 8004482:	69b8      	ldr	r0, [r7, #24]
 8004484:	f7ff fecb 	bl	800421e <put_fat>
 8004488:	4603      	mov	r3, r0
 800448a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800448c:	7ffb      	ldrb	r3, [r7, #31]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <remove_chain+0x4a>
 8004492:	7ffb      	ldrb	r3, [r7, #31]
 8004494:	e03b      	b.n	800450e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004496:	68b9      	ldr	r1, [r7, #8]
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f7ff fdf0 	bl	800407e <get_fat>
 800449e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d031      	beq.n	800450a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d101      	bne.n	80044b0 <remove_chain+0x64>
 80044ac:	2302      	movs	r3, #2
 80044ae:	e02e      	b.n	800450e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b6:	d101      	bne.n	80044bc <remove_chain+0x70>
 80044b8:	2301      	movs	r3, #1
 80044ba:	e028      	b.n	800450e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80044bc:	2200      	movs	r2, #0
 80044be:	68b9      	ldr	r1, [r7, #8]
 80044c0:	69b8      	ldr	r0, [r7, #24]
 80044c2:	f7ff feac 	bl	800421e <put_fat>
 80044c6:	4603      	mov	r3, r0
 80044c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80044ca:	7ffb      	ldrb	r3, [r7, #31]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d001      	beq.n	80044d4 <remove_chain+0x88>
 80044d0:	7ffb      	ldrb	r3, [r7, #31]
 80044d2:	e01c      	b.n	800450e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	695a      	ldr	r2, [r3, #20]
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	3b02      	subs	r3, #2
 80044de:	429a      	cmp	r2, r3
 80044e0:	d20b      	bcs.n	80044fa <remove_chain+0xae>
			fs->free_clst++;
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	1c5a      	adds	r2, r3, #1
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	791b      	ldrb	r3, [r3, #4]
 80044f0:	f043 0301 	orr.w	r3, r3, #1
 80044f4:	b2da      	uxtb	r2, r3
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	68ba      	ldr	r2, [r7, #8]
 8004504:	429a      	cmp	r2, r3
 8004506:	d3c6      	bcc.n	8004496 <remove_chain+0x4a>
 8004508:	e000      	b.n	800450c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800450a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3720      	adds	r7, #32
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}

08004516 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b088      	sub	sp, #32
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
 800451e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10d      	bne.n	8004548 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d004      	beq.n	8004542 <create_chain+0x2c>
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	429a      	cmp	r2, r3
 8004540:	d31b      	bcc.n	800457a <create_chain+0x64>
 8004542:	2301      	movs	r3, #1
 8004544:	61bb      	str	r3, [r7, #24]
 8004546:	e018      	b.n	800457a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004548:	6839      	ldr	r1, [r7, #0]
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f7ff fd97 	bl	800407e <get_fat>
 8004550:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d801      	bhi.n	800455c <create_chain+0x46>
 8004558:	2301      	movs	r3, #1
 800455a:	e070      	b.n	800463e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004562:	d101      	bne.n	8004568 <create_chain+0x52>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	e06a      	b.n	800463e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	429a      	cmp	r2, r3
 8004570:	d201      	bcs.n	8004576 <create_chain+0x60>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	e063      	b.n	800463e <create_chain+0x128>
		scl = clst;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	3301      	adds	r3, #1
 8004582:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	69fa      	ldr	r2, [r7, #28]
 800458a:	429a      	cmp	r2, r3
 800458c:	d307      	bcc.n	800459e <create_chain+0x88>
				ncl = 2;
 800458e:	2302      	movs	r3, #2
 8004590:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004592:	69fa      	ldr	r2, [r7, #28]
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	429a      	cmp	r2, r3
 8004598:	d901      	bls.n	800459e <create_chain+0x88>
 800459a:	2300      	movs	r3, #0
 800459c:	e04f      	b.n	800463e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800459e:	69f9      	ldr	r1, [r7, #28]
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f7ff fd6c 	bl	800407e <get_fat>
 80045a6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00e      	beq.n	80045cc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d003      	beq.n	80045bc <create_chain+0xa6>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ba:	d101      	bne.n	80045c0 <create_chain+0xaa>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	e03e      	b.n	800463e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80045c0:	69fa      	ldr	r2, [r7, #28]
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d1da      	bne.n	800457e <create_chain+0x68>
 80045c8:	2300      	movs	r3, #0
 80045ca:	e038      	b.n	800463e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80045cc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80045ce:	f04f 32ff 	mov.w	r2, #4294967295
 80045d2:	69f9      	ldr	r1, [r7, #28]
 80045d4:	6938      	ldr	r0, [r7, #16]
 80045d6:	f7ff fe22 	bl	800421e <put_fat>
 80045da:	4603      	mov	r3, r0
 80045dc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80045de:	7dfb      	ldrb	r3, [r7, #23]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d109      	bne.n	80045f8 <create_chain+0xe2>
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d006      	beq.n	80045f8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80045ea:	69fa      	ldr	r2, [r7, #28]
 80045ec:	6839      	ldr	r1, [r7, #0]
 80045ee:	6938      	ldr	r0, [r7, #16]
 80045f0:	f7ff fe15 	bl	800421e <put_fat>
 80045f4:	4603      	mov	r3, r0
 80045f6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80045f8:	7dfb      	ldrb	r3, [r7, #23]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d116      	bne.n	800462c <create_chain+0x116>
		fs->last_clst = ncl;
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	69fa      	ldr	r2, [r7, #28]
 8004602:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	695a      	ldr	r2, [r3, #20]
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	3b02      	subs	r3, #2
 800460e:	429a      	cmp	r2, r3
 8004610:	d804      	bhi.n	800461c <create_chain+0x106>
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	1e5a      	subs	r2, r3, #1
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	791b      	ldrb	r3, [r3, #4]
 8004620:	f043 0301 	orr.w	r3, r3, #1
 8004624:	b2da      	uxtb	r2, r3
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	711a      	strb	r2, [r3, #4]
 800462a:	e007      	b.n	800463c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800462c:	7dfb      	ldrb	r3, [r7, #23]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d102      	bne.n	8004638 <create_chain+0x122>
 8004632:	f04f 33ff 	mov.w	r3, #4294967295
 8004636:	e000      	b.n	800463a <create_chain+0x124>
 8004638:	2301      	movs	r3, #1
 800463a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800463c:	69fb      	ldr	r3, [r7, #28]
	}
 800463e:	4618      	mov	r0, r3
 8004640:	3720      	adds	r7, #32
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}

08004646 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004646:	b480      	push	{r7}
 8004648:	b087      	sub	sp, #28
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
 800464e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465a:	3304      	adds	r3, #4
 800465c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	899b      	ldrh	r3, [r3, #12]
 8004662:	461a      	mov	r2, r3
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	fbb3 f3f2 	udiv	r3, r3, r2
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	8952      	ldrh	r2, [r2, #10]
 800466e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004672:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	1d1a      	adds	r2, r3, #4
 8004678:	613a      	str	r2, [r7, #16]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d101      	bne.n	8004688 <clmt_clust+0x42>
 8004684:	2300      	movs	r3, #0
 8004686:	e010      	b.n	80046aa <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8004688:	697a      	ldr	r2, [r7, #20]
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	429a      	cmp	r2, r3
 800468e:	d307      	bcc.n	80046a0 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	617b      	str	r3, [r7, #20]
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	3304      	adds	r3, #4
 800469c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800469e:	e7e9      	b.n	8004674 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80046a0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	4413      	add	r3, r2
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	371c      	adds	r7, #28
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr

080046b6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b086      	sub	sp, #24
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
 80046be:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046cc:	d204      	bcs.n	80046d8 <dir_sdi+0x22>
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	f003 031f 	and.w	r3, r3, #31
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d001      	beq.n	80046dc <dir_sdi+0x26>
		return FR_INT_ERR;
 80046d8:	2302      	movs	r3, #2
 80046da:	e071      	b.n	80047c0 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d106      	bne.n	80046fc <dir_sdi+0x46>
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d902      	bls.n	80046fc <dir_sdi+0x46>
		clst = fs->dirbase;
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fa:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10c      	bne.n	800471c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	095b      	lsrs	r3, r3, #5
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	8912      	ldrh	r2, [r2, #8]
 800470a:	4293      	cmp	r3, r2
 800470c:	d301      	bcc.n	8004712 <dir_sdi+0x5c>
 800470e:	2302      	movs	r3, #2
 8004710:	e056      	b.n	80047c0 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	61da      	str	r2, [r3, #28]
 800471a:	e02d      	b.n	8004778 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	895b      	ldrh	r3, [r3, #10]
 8004720:	461a      	mov	r2, r3
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	899b      	ldrh	r3, [r3, #12]
 8004726:	fb03 f302 	mul.w	r3, r3, r2
 800472a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800472c:	e019      	b.n	8004762 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6979      	ldr	r1, [r7, #20]
 8004732:	4618      	mov	r0, r3
 8004734:	f7ff fca3 	bl	800407e <get_fat>
 8004738:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004740:	d101      	bne.n	8004746 <dir_sdi+0x90>
 8004742:	2301      	movs	r3, #1
 8004744:	e03c      	b.n	80047c0 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d904      	bls.n	8004756 <dir_sdi+0xa0>
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	429a      	cmp	r2, r3
 8004754:	d301      	bcc.n	800475a <dir_sdi+0xa4>
 8004756:	2302      	movs	r3, #2
 8004758:	e032      	b.n	80047c0 <dir_sdi+0x10a>
			ofs -= csz;
 800475a:	683a      	ldr	r2, [r7, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004762:	683a      	ldr	r2, [r7, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	429a      	cmp	r2, r3
 8004768:	d2e1      	bcs.n	800472e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800476a:	6979      	ldr	r1, [r7, #20]
 800476c:	6938      	ldr	r0, [r7, #16]
 800476e:	f7ff fc67 	bl	8004040 <clust2sect>
 8004772:	4602      	mov	r2, r0
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <dir_sdi+0xd4>
 8004786:	2302      	movs	r3, #2
 8004788:	e01a      	b.n	80047c0 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	69da      	ldr	r2, [r3, #28]
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	899b      	ldrh	r3, [r3, #12]
 8004792:	4619      	mov	r1, r3
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	fbb3 f3f1 	udiv	r3, r3, r1
 800479a:	441a      	add	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	899b      	ldrh	r3, [r3, #12]
 80047aa:	461a      	mov	r2, r3
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	fbb3 f0f2 	udiv	r0, r3, r2
 80047b2:	fb02 f200 	mul.w	r2, r2, r0
 80047b6:	1a9b      	subs	r3, r3, r2
 80047b8:	18ca      	adds	r2, r1, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3718      	adds	r7, #24
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b086      	sub	sp, #24
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	3320      	adds	r3, #32
 80047de:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	69db      	ldr	r3, [r3, #28]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d003      	beq.n	80047f0 <dir_next+0x28>
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047ee:	d301      	bcc.n	80047f4 <dir_next+0x2c>
 80047f0:	2304      	movs	r3, #4
 80047f2:	e0bb      	b.n	800496c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	899b      	ldrh	r3, [r3, #12]
 80047f8:	461a      	mov	r2, r3
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8004800:	fb02 f201 	mul.w	r2, r2, r1
 8004804:	1a9b      	subs	r3, r3, r2
 8004806:	2b00      	cmp	r3, #0
 8004808:	f040 809d 	bne.w	8004946 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	69db      	ldr	r3, [r3, #28]
 8004810:	1c5a      	adds	r2, r3, #1
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d10b      	bne.n	8004836 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	095b      	lsrs	r3, r3, #5
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	8912      	ldrh	r2, [r2, #8]
 8004826:	4293      	cmp	r3, r2
 8004828:	f0c0 808d 	bcc.w	8004946 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	61da      	str	r2, [r3, #28]
 8004832:	2304      	movs	r3, #4
 8004834:	e09a      	b.n	800496c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	899b      	ldrh	r3, [r3, #12]
 800483a:	461a      	mov	r2, r3
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	8952      	ldrh	r2, [r2, #10]
 8004846:	3a01      	subs	r2, #1
 8004848:	4013      	ands	r3, r2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d17b      	bne.n	8004946 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	4619      	mov	r1, r3
 8004856:	4610      	mov	r0, r2
 8004858:	f7ff fc11 	bl	800407e <get_fat>
 800485c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d801      	bhi.n	8004868 <dir_next+0xa0>
 8004864:	2302      	movs	r3, #2
 8004866:	e081      	b.n	800496c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800486e:	d101      	bne.n	8004874 <dir_next+0xac>
 8004870:	2301      	movs	r3, #1
 8004872:	e07b      	b.n	800496c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	429a      	cmp	r2, r3
 800487c:	d359      	bcc.n	8004932 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d104      	bne.n	800488e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	61da      	str	r2, [r3, #28]
 800488a:	2304      	movs	r3, #4
 800488c:	e06e      	b.n	800496c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	4619      	mov	r1, r3
 8004896:	4610      	mov	r0, r2
 8004898:	f7ff fe3d 	bl	8004516 <create_chain>
 800489c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d101      	bne.n	80048a8 <dir_next+0xe0>
 80048a4:	2307      	movs	r3, #7
 80048a6:	e061      	b.n	800496c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d101      	bne.n	80048b2 <dir_next+0xea>
 80048ae:	2302      	movs	r3, #2
 80048b0:	e05c      	b.n	800496c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b8:	d101      	bne.n	80048be <dir_next+0xf6>
 80048ba:	2301      	movs	r3, #1
 80048bc:	e056      	b.n	800496c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f7ff fadc 	bl	8003e7c <sync_window>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <dir_next+0x106>
 80048ca:	2301      	movs	r3, #1
 80048cc:	e04e      	b.n	800496c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f103 0034 	add.w	r0, r3, #52	; 0x34
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	899b      	ldrh	r3, [r3, #12]
 80048d8:	461a      	mov	r2, r3
 80048da:	2100      	movs	r1, #0
 80048dc:	f7ff f905 	bl	8003aea <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80048e0:	2300      	movs	r3, #0
 80048e2:	613b      	str	r3, [r7, #16]
 80048e4:	6979      	ldr	r1, [r7, #20]
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f7ff fbaa 	bl	8004040 <clust2sect>
 80048ec:	4602      	mov	r2, r0
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	631a      	str	r2, [r3, #48]	; 0x30
 80048f2:	e012      	b.n	800491a <dir_next+0x152>
						fs->wflag = 1;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2201      	movs	r2, #1
 80048f8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f7ff fabe 	bl	8003e7c <sync_window>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <dir_next+0x142>
 8004906:	2301      	movs	r3, #1
 8004908:	e030      	b.n	800496c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	3301      	adds	r3, #1
 800490e:	613b      	str	r3, [r7, #16]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004914:	1c5a      	adds	r2, r3, #1
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	631a      	str	r2, [r3, #48]	; 0x30
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	895b      	ldrh	r3, [r3, #10]
 800491e:	461a      	mov	r2, r3
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	4293      	cmp	r3, r2
 8004924:	d3e6      	bcc.n	80048f4 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	1ad2      	subs	r2, r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004938:	6979      	ldr	r1, [r7, #20]
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	f7ff fb80 	bl	8004040 <clust2sect>
 8004940:	4602      	mov	r2, r0
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	68ba      	ldr	r2, [r7, #8]
 800494a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	899b      	ldrh	r3, [r3, #12]
 8004956:	461a      	mov	r2, r3
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	fbb3 f0f2 	udiv	r0, r3, r2
 800495e:	fb02 f200 	mul.w	r2, r2, r0
 8004962:	1a9b      	subs	r3, r3, r2
 8004964:	18ca      	adds	r2, r1, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3718      	adds	r7, #24
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b086      	sub	sp, #24
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004984:	2100      	movs	r1, #0
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7ff fe95 	bl	80046b6 <dir_sdi>
 800498c:	4603      	mov	r3, r0
 800498e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004990:	7dfb      	ldrb	r3, [r7, #23]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d12b      	bne.n	80049ee <dir_alloc+0x7a>
		n = 0;
 8004996:	2300      	movs	r3, #0
 8004998:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	69db      	ldr	r3, [r3, #28]
 800499e:	4619      	mov	r1, r3
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f7ff faaf 	bl	8003f04 <move_window>
 80049a6:	4603      	mov	r3, r0
 80049a8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80049aa:	7dfb      	ldrb	r3, [r7, #23]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d11d      	bne.n	80049ec <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a1b      	ldr	r3, [r3, #32]
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	2be5      	cmp	r3, #229	; 0xe5
 80049b8:	d004      	beq.n	80049c4 <dir_alloc+0x50>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d107      	bne.n	80049d4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	3301      	adds	r3, #1
 80049c8:	613b      	str	r3, [r7, #16]
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d102      	bne.n	80049d8 <dir_alloc+0x64>
 80049d2:	e00c      	b.n	80049ee <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80049d4:	2300      	movs	r3, #0
 80049d6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80049d8:	2101      	movs	r1, #1
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f7ff fef4 	bl	80047c8 <dir_next>
 80049e0:	4603      	mov	r3, r0
 80049e2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80049e4:	7dfb      	ldrb	r3, [r7, #23]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0d7      	beq.n	800499a <dir_alloc+0x26>
 80049ea:	e000      	b.n	80049ee <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80049ec:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80049ee:	7dfb      	ldrb	r3, [r7, #23]
 80049f0:	2b04      	cmp	r3, #4
 80049f2:	d101      	bne.n	80049f8 <dir_alloc+0x84>
 80049f4:	2307      	movs	r3, #7
 80049f6:	75fb      	strb	r3, [r7, #23]
	return res;
 80049f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3718      	adds	r7, #24
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b084      	sub	sp, #16
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
 8004a0a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	331a      	adds	r3, #26
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7fe ffc7 	bl	80039a4 <ld_word>
 8004a16:	4603      	mov	r3, r0
 8004a18:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	2b03      	cmp	r3, #3
 8004a20:	d109      	bne.n	8004a36 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	3314      	adds	r3, #20
 8004a26:	4618      	mov	r0, r3
 8004a28:	f7fe ffbc 	bl	80039a4 <ld_word>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	041b      	lsls	r3, r3, #16
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004a36:	68fb      	ldr	r3, [r7, #12]
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	331a      	adds	r3, #26
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	b292      	uxth	r2, r2
 8004a54:	4611      	mov	r1, r2
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7fe ffdf 	bl	8003a1a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	2b03      	cmp	r3, #3
 8004a62:	d109      	bne.n	8004a78 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	f103 0214 	add.w	r2, r3, #20
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	0c1b      	lsrs	r3, r3, #16
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	4619      	mov	r1, r3
 8004a72:	4610      	mov	r0, r2
 8004a74:	f7fe ffd1 	bl	8003a1a <st_word>
	}
}
 8004a78:	bf00      	nop
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004a8e:	2100      	movs	r1, #0
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f7ff fe10 	bl	80046b6 <dir_sdi>
 8004a96:	4603      	mov	r3, r0
 8004a98:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004a9a:	7dfb      	ldrb	r3, [r7, #23]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d001      	beq.n	8004aa4 <dir_find+0x24>
 8004aa0:	7dfb      	ldrb	r3, [r7, #23]
 8004aa2:	e03e      	b.n	8004b22 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	69db      	ldr	r3, [r3, #28]
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	6938      	ldr	r0, [r7, #16]
 8004aac:	f7ff fa2a 	bl	8003f04 <move_window>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004ab4:	7dfb      	ldrb	r3, [r7, #23]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d12f      	bne.n	8004b1a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004ac2:	7bfb      	ldrb	r3, [r7, #15]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d102      	bne.n	8004ace <dir_find+0x4e>
 8004ac8:	2304      	movs	r3, #4
 8004aca:	75fb      	strb	r3, [r7, #23]
 8004acc:	e028      	b.n	8004b20 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
 8004ad2:	330b      	adds	r3, #11
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ada:	b2da      	uxtb	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a1b      	ldr	r3, [r3, #32]
 8004ae4:	330b      	adds	r3, #11
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	f003 0308 	and.w	r3, r3, #8
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10a      	bne.n	8004b06 <dir_find+0x86>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a18      	ldr	r0, [r3, #32]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	3324      	adds	r3, #36	; 0x24
 8004af8:	220b      	movs	r2, #11
 8004afa:	4619      	mov	r1, r3
 8004afc:	f7ff f80f 	bl	8003b1e <mem_cmp>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00b      	beq.n	8004b1e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8004b06:	2100      	movs	r1, #0
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f7ff fe5d 	bl	80047c8 <dir_next>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004b12:	7dfb      	ldrb	r3, [r7, #23]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d0c5      	beq.n	8004aa4 <dir_find+0x24>
 8004b18:	e002      	b.n	8004b20 <dir_find+0xa0>
		if (res != FR_OK) break;
 8004b1a:	bf00      	nop
 8004b1c:	e000      	b.n	8004b20 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004b1e:	bf00      	nop

	return res;
 8004b20:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3718      	adds	r7, #24
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b084      	sub	sp, #16
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8004b38:	2101      	movs	r1, #1
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f7ff ff1a 	bl	8004974 <dir_alloc>
 8004b40:	4603      	mov	r3, r0
 8004b42:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8004b44:	7bfb      	ldrb	r3, [r7, #15]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d11c      	bne.n	8004b84 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	69db      	ldr	r3, [r3, #28]
 8004b4e:	4619      	mov	r1, r3
 8004b50:	68b8      	ldr	r0, [r7, #8]
 8004b52:	f7ff f9d7 	bl	8003f04 <move_window>
 8004b56:	4603      	mov	r3, r0
 8004b58:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8004b5a:	7bfb      	ldrb	r3, [r7, #15]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d111      	bne.n	8004b84 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a1b      	ldr	r3, [r3, #32]
 8004b64:	2220      	movs	r2, #32
 8004b66:	2100      	movs	r1, #0
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f7fe ffbe 	bl	8003aea <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a18      	ldr	r0, [r3, #32]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	3324      	adds	r3, #36	; 0x24
 8004b76:	220b      	movs	r2, #11
 8004b78:	4619      	mov	r1, r3
 8004b7a:	f7fe ff95 	bl	8003aa8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	2201      	movs	r2, #1
 8004b82:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8004b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
	...

08004b90 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b088      	sub	sp, #32
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	60fb      	str	r3, [r7, #12]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	3324      	adds	r3, #36	; 0x24
 8004ba4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8004ba6:	220b      	movs	r2, #11
 8004ba8:	2120      	movs	r1, #32
 8004baa:	68b8      	ldr	r0, [r7, #8]
 8004bac:	f7fe ff9d 	bl	8003aea <mem_set>
	si = i = 0; ni = 8;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	613b      	str	r3, [r7, #16]
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	617b      	str	r3, [r7, #20]
 8004bb8:	2308      	movs	r3, #8
 8004bba:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	1c5a      	adds	r2, r3, #1
 8004bc0:	617a      	str	r2, [r7, #20]
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004bca:	7ffb      	ldrb	r3, [r7, #31]
 8004bcc:	2b20      	cmp	r3, #32
 8004bce:	d94e      	bls.n	8004c6e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8004bd0:	7ffb      	ldrb	r3, [r7, #31]
 8004bd2:	2b2f      	cmp	r3, #47	; 0x2f
 8004bd4:	d006      	beq.n	8004be4 <create_name+0x54>
 8004bd6:	7ffb      	ldrb	r3, [r7, #31]
 8004bd8:	2b5c      	cmp	r3, #92	; 0x5c
 8004bda:	d110      	bne.n	8004bfe <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8004bdc:	e002      	b.n	8004be4 <create_name+0x54>
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	3301      	adds	r3, #1
 8004be2:	617b      	str	r3, [r7, #20]
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	4413      	add	r3, r2
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	2b2f      	cmp	r3, #47	; 0x2f
 8004bee:	d0f6      	beq.n	8004bde <create_name+0x4e>
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	2b5c      	cmp	r3, #92	; 0x5c
 8004bfa:	d0f0      	beq.n	8004bde <create_name+0x4e>
			break;
 8004bfc:	e038      	b.n	8004c70 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8004bfe:	7ffb      	ldrb	r3, [r7, #31]
 8004c00:	2b2e      	cmp	r3, #46	; 0x2e
 8004c02:	d003      	beq.n	8004c0c <create_name+0x7c>
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d30c      	bcc.n	8004c26 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	2b0b      	cmp	r3, #11
 8004c10:	d002      	beq.n	8004c18 <create_name+0x88>
 8004c12:	7ffb      	ldrb	r3, [r7, #31]
 8004c14:	2b2e      	cmp	r3, #46	; 0x2e
 8004c16:	d001      	beq.n	8004c1c <create_name+0x8c>
 8004c18:	2306      	movs	r3, #6
 8004c1a:	e044      	b.n	8004ca6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8004c1c:	2308      	movs	r3, #8
 8004c1e:	613b      	str	r3, [r7, #16]
 8004c20:	230b      	movs	r3, #11
 8004c22:	61bb      	str	r3, [r7, #24]
			continue;
 8004c24:	e022      	b.n	8004c6c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8004c26:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	da04      	bge.n	8004c38 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8004c2e:	7ffb      	ldrb	r3, [r7, #31]
 8004c30:	3b80      	subs	r3, #128	; 0x80
 8004c32:	4a1f      	ldr	r2, [pc, #124]	; (8004cb0 <create_name+0x120>)
 8004c34:	5cd3      	ldrb	r3, [r2, r3]
 8004c36:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8004c38:	7ffb      	ldrb	r3, [r7, #31]
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	481d      	ldr	r0, [pc, #116]	; (8004cb4 <create_name+0x124>)
 8004c3e:	f7fe ff95 	bl	8003b6c <chk_chr>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d001      	beq.n	8004c4c <create_name+0xbc>
 8004c48:	2306      	movs	r3, #6
 8004c4a:	e02c      	b.n	8004ca6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8004c4c:	7ffb      	ldrb	r3, [r7, #31]
 8004c4e:	2b60      	cmp	r3, #96	; 0x60
 8004c50:	d905      	bls.n	8004c5e <create_name+0xce>
 8004c52:	7ffb      	ldrb	r3, [r7, #31]
 8004c54:	2b7a      	cmp	r3, #122	; 0x7a
 8004c56:	d802      	bhi.n	8004c5e <create_name+0xce>
 8004c58:	7ffb      	ldrb	r3, [r7, #31]
 8004c5a:	3b20      	subs	r3, #32
 8004c5c:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	1c5a      	adds	r2, r3, #1
 8004c62:	613a      	str	r2, [r7, #16]
 8004c64:	68ba      	ldr	r2, [r7, #8]
 8004c66:	4413      	add	r3, r2
 8004c68:	7ffa      	ldrb	r2, [r7, #31]
 8004c6a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8004c6c:	e7a6      	b.n	8004bbc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004c6e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	441a      	add	r2, r3
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d101      	bne.n	8004c84 <create_name+0xf4>
 8004c80:	2306      	movs	r3, #6
 8004c82:	e010      	b.n	8004ca6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	2be5      	cmp	r3, #229	; 0xe5
 8004c8a:	d102      	bne.n	8004c92 <create_name+0x102>
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	2205      	movs	r2, #5
 8004c90:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8004c92:	7ffb      	ldrb	r3, [r7, #31]
 8004c94:	2b20      	cmp	r3, #32
 8004c96:	d801      	bhi.n	8004c9c <create_name+0x10c>
 8004c98:	2204      	movs	r2, #4
 8004c9a:	e000      	b.n	8004c9e <create_name+0x10e>
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	330b      	adds	r3, #11
 8004ca2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8004ca4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3720      	adds	r7, #32
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	0800708c 	.word	0x0800708c
 8004cb4:	08006ffc 	.word	0x08006ffc

08004cb8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b086      	sub	sp, #24
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004ccc:	e002      	b.n	8004cd4 <follow_path+0x1c>
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	603b      	str	r3, [r7, #0]
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	2b2f      	cmp	r3, #47	; 0x2f
 8004cda:	d0f8      	beq.n	8004cce <follow_path+0x16>
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	2b5c      	cmp	r3, #92	; 0x5c
 8004ce2:	d0f4      	beq.n	8004cce <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	2b1f      	cmp	r3, #31
 8004cf0:	d80a      	bhi.n	8004d08 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2280      	movs	r2, #128	; 0x80
 8004cf6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f7ff fcda 	bl	80046b6 <dir_sdi>
 8004d02:	4603      	mov	r3, r0
 8004d04:	75fb      	strb	r3, [r7, #23]
 8004d06:	e048      	b.n	8004d9a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004d08:	463b      	mov	r3, r7
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f7ff ff3f 	bl	8004b90 <create_name>
 8004d12:	4603      	mov	r3, r0
 8004d14:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004d16:	7dfb      	ldrb	r3, [r7, #23]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d139      	bne.n	8004d90 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f7ff feaf 	bl	8004a80 <dir_find>
 8004d22:	4603      	mov	r3, r0
 8004d24:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004d2c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8004d2e:	7dfb      	ldrb	r3, [r7, #23]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00a      	beq.n	8004d4a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004d34:	7dfb      	ldrb	r3, [r7, #23]
 8004d36:	2b04      	cmp	r3, #4
 8004d38:	d12c      	bne.n	8004d94 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004d3a:	7afb      	ldrb	r3, [r7, #11]
 8004d3c:	f003 0304 	and.w	r3, r3, #4
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d127      	bne.n	8004d94 <follow_path+0xdc>
 8004d44:	2305      	movs	r3, #5
 8004d46:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8004d48:	e024      	b.n	8004d94 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004d4a:	7afb      	ldrb	r3, [r7, #11]
 8004d4c:	f003 0304 	and.w	r3, r3, #4
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d121      	bne.n	8004d98 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	799b      	ldrb	r3, [r3, #6]
 8004d58:	f003 0310 	and.w	r3, r3, #16
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d102      	bne.n	8004d66 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8004d60:	2305      	movs	r3, #5
 8004d62:	75fb      	strb	r3, [r7, #23]
 8004d64:	e019      	b.n	8004d9a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	695b      	ldr	r3, [r3, #20]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	8992      	ldrh	r2, [r2, #12]
 8004d74:	fbb3 f0f2 	udiv	r0, r3, r2
 8004d78:	fb02 f200 	mul.w	r2, r2, r0
 8004d7c:	1a9b      	subs	r3, r3, r2
 8004d7e:	440b      	add	r3, r1
 8004d80:	4619      	mov	r1, r3
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	f7ff fe3d 	bl	8004a02 <ld_clust>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004d8e:	e7bb      	b.n	8004d08 <follow_path+0x50>
			if (res != FR_OK) break;
 8004d90:	bf00      	nop
 8004d92:	e002      	b.n	8004d9a <follow_path+0xe2>
				break;
 8004d94:	bf00      	nop
 8004d96:	e000      	b.n	8004d9a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004d98:	bf00      	nop
			}
		}
	}

	return res;
 8004d9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3718      	adds	r7, #24
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b087      	sub	sp, #28
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8004dac:	f04f 33ff 	mov.w	r3, #4294967295
 8004db0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d031      	beq.n	8004e1e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	617b      	str	r3, [r7, #20]
 8004dc0:	e002      	b.n	8004dc8 <get_ldnumber+0x24>
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	617b      	str	r3, [r7, #20]
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	2b20      	cmp	r3, #32
 8004dce:	d903      	bls.n	8004dd8 <get_ldnumber+0x34>
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	2b3a      	cmp	r3, #58	; 0x3a
 8004dd6:	d1f4      	bne.n	8004dc2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	2b3a      	cmp	r3, #58	; 0x3a
 8004dde:	d11c      	bne.n	8004e1a <get_ldnumber+0x76>
			tp = *path;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	1c5a      	adds	r2, r3, #1
 8004dea:	60fa      	str	r2, [r7, #12]
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	3b30      	subs	r3, #48	; 0x30
 8004df0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	2b09      	cmp	r3, #9
 8004df6:	d80e      	bhi.n	8004e16 <get_ldnumber+0x72>
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d10a      	bne.n	8004e16 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d107      	bne.n	8004e16 <get_ldnumber+0x72>
					vol = (int)i;
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	617b      	str	r3, [r7, #20]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	e002      	b.n	8004e20 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004e1e:	693b      	ldr	r3, [r7, #16]
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	371c      	adds	r7, #28
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	70da      	strb	r2, [r3, #3]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8004e42:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004e44:	6839      	ldr	r1, [r7, #0]
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f7ff f85c 	bl	8003f04 <move_window>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d001      	beq.n	8004e56 <check_fs+0x2a>
 8004e52:	2304      	movs	r3, #4
 8004e54:	e038      	b.n	8004ec8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	3334      	adds	r3, #52	; 0x34
 8004e5a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7fe fda0 	bl	80039a4 <ld_word>
 8004e64:	4603      	mov	r3, r0
 8004e66:	461a      	mov	r2, r3
 8004e68:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d001      	beq.n	8004e74 <check_fs+0x48>
 8004e70:	2303      	movs	r3, #3
 8004e72:	e029      	b.n	8004ec8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e7a:	2be9      	cmp	r3, #233	; 0xe9
 8004e7c:	d009      	beq.n	8004e92 <check_fs+0x66>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e84:	2beb      	cmp	r3, #235	; 0xeb
 8004e86:	d11e      	bne.n	8004ec6 <check_fs+0x9a>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004e8e:	2b90      	cmp	r3, #144	; 0x90
 8004e90:	d119      	bne.n	8004ec6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	3334      	adds	r3, #52	; 0x34
 8004e96:	3336      	adds	r3, #54	; 0x36
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f7fe fd9b 	bl	80039d4 <ld_dword>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004ea4:	4a0a      	ldr	r2, [pc, #40]	; (8004ed0 <check_fs+0xa4>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d101      	bne.n	8004eae <check_fs+0x82>
 8004eaa:	2300      	movs	r3, #0
 8004eac:	e00c      	b.n	8004ec8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	3334      	adds	r3, #52	; 0x34
 8004eb2:	3352      	adds	r3, #82	; 0x52
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f7fe fd8d 	bl	80039d4 <ld_dword>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	4b05      	ldr	r3, [pc, #20]	; (8004ed4 <check_fs+0xa8>)
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d101      	bne.n	8004ec6 <check_fs+0x9a>
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	e000      	b.n	8004ec8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8004ec6:	2302      	movs	r3, #2
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3708      	adds	r7, #8
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	00544146 	.word	0x00544146
 8004ed4:	33544146 	.word	0x33544146

08004ed8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b096      	sub	sp, #88	; 0x58
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f7ff ff59 	bl	8004da4 <get_ldnumber>
 8004ef2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	da01      	bge.n	8004efe <find_volume+0x26>
 8004efa:	230b      	movs	r3, #11
 8004efc:	e265      	b.n	80053ca <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8004efe:	4ab0      	ldr	r2, [pc, #704]	; (80051c0 <find_volume+0x2e8>)
 8004f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f06:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d101      	bne.n	8004f12 <find_volume+0x3a>
 8004f0e:	230c      	movs	r3, #12
 8004f10:	e25b      	b.n	80053ca <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f16:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004f18:	79fb      	ldrb	r3, [r7, #7]
 8004f1a:	f023 0301 	bic.w	r3, r3, #1
 8004f1e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8004f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d01a      	beq.n	8004f5e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8004f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f2a:	785b      	ldrb	r3, [r3, #1]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7fe fc9b 	bl	8003868 <disk_status>
 8004f32:	4603      	mov	r3, r0
 8004f34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004f38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004f3c:	f003 0301 	and.w	r3, r3, #1
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d10c      	bne.n	8004f5e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004f44:	79fb      	ldrb	r3, [r7, #7]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d007      	beq.n	8004f5a <find_volume+0x82>
 8004f4a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004f4e:	f003 0304 	and.w	r3, r3, #4
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d001      	beq.n	8004f5a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8004f56:	230a      	movs	r3, #10
 8004f58:	e237      	b.n	80053ca <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	e235      	b.n	80053ca <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8004f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f60:	2200      	movs	r2, #0
 8004f62:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004f64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f66:	b2da      	uxtb	r2, r3
 8004f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f6a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f6e:	785b      	ldrb	r3, [r3, #1]
 8004f70:	4618      	mov	r0, r3
 8004f72:	f7fe fc93 	bl	800389c <disk_initialize>
 8004f76:	4603      	mov	r3, r0
 8004f78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004f7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004f80:	f003 0301 	and.w	r3, r3, #1
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d001      	beq.n	8004f8c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e21e      	b.n	80053ca <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004f8c:	79fb      	ldrb	r3, [r7, #7]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d007      	beq.n	8004fa2 <find_volume+0xca>
 8004f92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004f96:	f003 0304 	and.w	r3, r3, #4
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d001      	beq.n	8004fa2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8004f9e:	230a      	movs	r3, #10
 8004fa0:	e213      	b.n	80053ca <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8004fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa4:	7858      	ldrb	r0, [r3, #1]
 8004fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa8:	330c      	adds	r3, #12
 8004faa:	461a      	mov	r2, r3
 8004fac:	2102      	movs	r1, #2
 8004fae:	f7fe fcdb 	bl	8003968 <disk_ioctl>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d001      	beq.n	8004fbc <find_volume+0xe4>
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e206      	b.n	80053ca <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8004fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fbe:	899b      	ldrh	r3, [r3, #12]
 8004fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fc4:	d80d      	bhi.n	8004fe2 <find_volume+0x10a>
 8004fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc8:	899b      	ldrh	r3, [r3, #12]
 8004fca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fce:	d308      	bcc.n	8004fe2 <find_volume+0x10a>
 8004fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd2:	899b      	ldrh	r3, [r3, #12]
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd8:	899b      	ldrh	r3, [r3, #12]
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	4013      	ands	r3, r2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d001      	beq.n	8004fe6 <find_volume+0x10e>
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e1f1      	b.n	80053ca <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8004fea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004fec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004fee:	f7ff ff1d 	bl	8004e2c <check_fs>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8004ff8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d14b      	bne.n	8005098 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005000:	2300      	movs	r3, #0
 8005002:	643b      	str	r3, [r7, #64]	; 0x40
 8005004:	e01f      	b.n	8005046 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005008:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800500c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800500e:	011b      	lsls	r3, r3, #4
 8005010:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005014:	4413      	add	r3, r2
 8005016:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501a:	3304      	adds	r3, #4
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d006      	beq.n	8005030 <find_volume+0x158>
 8005022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005024:	3308      	adds	r3, #8
 8005026:	4618      	mov	r0, r3
 8005028:	f7fe fcd4 	bl	80039d4 <ld_dword>
 800502c:	4602      	mov	r2, r0
 800502e:	e000      	b.n	8005032 <find_volume+0x15a>
 8005030:	2200      	movs	r2, #0
 8005032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800503a:	440b      	add	r3, r1
 800503c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005040:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005042:	3301      	adds	r3, #1
 8005044:	643b      	str	r3, [r7, #64]	; 0x40
 8005046:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005048:	2b03      	cmp	r3, #3
 800504a:	d9dc      	bls.n	8005006 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800504c:	2300      	movs	r3, #0
 800504e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005052:	2b00      	cmp	r3, #0
 8005054:	d002      	beq.n	800505c <find_volume+0x184>
 8005056:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005058:	3b01      	subs	r3, #1
 800505a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800505c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8005064:	4413      	add	r3, r2
 8005066:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800506a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800506c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800506e:	2b00      	cmp	r3, #0
 8005070:	d005      	beq.n	800507e <find_volume+0x1a6>
 8005072:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005074:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005076:	f7ff fed9 	bl	8004e2c <check_fs>
 800507a:	4603      	mov	r3, r0
 800507c:	e000      	b.n	8005080 <find_volume+0x1a8>
 800507e:	2303      	movs	r3, #3
 8005080:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005084:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005088:	2b01      	cmp	r3, #1
 800508a:	d905      	bls.n	8005098 <find_volume+0x1c0>
 800508c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800508e:	3301      	adds	r3, #1
 8005090:	643b      	str	r3, [r7, #64]	; 0x40
 8005092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005094:	2b03      	cmp	r3, #3
 8005096:	d9e1      	bls.n	800505c <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005098:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800509c:	2b04      	cmp	r3, #4
 800509e:	d101      	bne.n	80050a4 <find_volume+0x1cc>
 80050a0:	2301      	movs	r3, #1
 80050a2:	e192      	b.n	80053ca <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80050a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d901      	bls.n	80050b0 <find_volume+0x1d8>
 80050ac:	230d      	movs	r3, #13
 80050ae:	e18c      	b.n	80053ca <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80050b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b2:	3334      	adds	r3, #52	; 0x34
 80050b4:	330b      	adds	r3, #11
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7fe fc74 	bl	80039a4 <ld_word>
 80050bc:	4603      	mov	r3, r0
 80050be:	461a      	mov	r2, r3
 80050c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c2:	899b      	ldrh	r3, [r3, #12]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d001      	beq.n	80050cc <find_volume+0x1f4>
 80050c8:	230d      	movs	r3, #13
 80050ca:	e17e      	b.n	80053ca <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80050cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ce:	3334      	adds	r3, #52	; 0x34
 80050d0:	3316      	adds	r3, #22
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7fe fc66 	bl	80039a4 <ld_word>
 80050d8:	4603      	mov	r3, r0
 80050da:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80050dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d106      	bne.n	80050f0 <find_volume+0x218>
 80050e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e4:	3334      	adds	r3, #52	; 0x34
 80050e6:	3324      	adds	r3, #36	; 0x24
 80050e8:	4618      	mov	r0, r3
 80050ea:	f7fe fc73 	bl	80039d4 <ld_dword>
 80050ee:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80050f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050f4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80050f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80050fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005102:	789b      	ldrb	r3, [r3, #2]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d005      	beq.n	8005114 <find_volume+0x23c>
 8005108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800510a:	789b      	ldrb	r3, [r3, #2]
 800510c:	2b02      	cmp	r3, #2
 800510e:	d001      	beq.n	8005114 <find_volume+0x23c>
 8005110:	230d      	movs	r3, #13
 8005112:	e15a      	b.n	80053ca <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005116:	789b      	ldrb	r3, [r3, #2]
 8005118:	461a      	mov	r2, r3
 800511a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800511c:	fb02 f303 	mul.w	r3, r2, r3
 8005120:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005124:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005128:	b29a      	uxth	r2, r3
 800512a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800512e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005130:	895b      	ldrh	r3, [r3, #10]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d008      	beq.n	8005148 <find_volume+0x270>
 8005136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005138:	895b      	ldrh	r3, [r3, #10]
 800513a:	461a      	mov	r2, r3
 800513c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800513e:	895b      	ldrh	r3, [r3, #10]
 8005140:	3b01      	subs	r3, #1
 8005142:	4013      	ands	r3, r2
 8005144:	2b00      	cmp	r3, #0
 8005146:	d001      	beq.n	800514c <find_volume+0x274>
 8005148:	230d      	movs	r3, #13
 800514a:	e13e      	b.n	80053ca <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800514c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514e:	3334      	adds	r3, #52	; 0x34
 8005150:	3311      	adds	r3, #17
 8005152:	4618      	mov	r0, r3
 8005154:	f7fe fc26 	bl	80039a4 <ld_word>
 8005158:	4603      	mov	r3, r0
 800515a:	461a      	mov	r2, r3
 800515c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800515e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005162:	891b      	ldrh	r3, [r3, #8]
 8005164:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005166:	8992      	ldrh	r2, [r2, #12]
 8005168:	0952      	lsrs	r2, r2, #5
 800516a:	b292      	uxth	r2, r2
 800516c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005170:	fb02 f201 	mul.w	r2, r2, r1
 8005174:	1a9b      	subs	r3, r3, r2
 8005176:	b29b      	uxth	r3, r3
 8005178:	2b00      	cmp	r3, #0
 800517a:	d001      	beq.n	8005180 <find_volume+0x2a8>
 800517c:	230d      	movs	r3, #13
 800517e:	e124      	b.n	80053ca <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005182:	3334      	adds	r3, #52	; 0x34
 8005184:	3313      	adds	r3, #19
 8005186:	4618      	mov	r0, r3
 8005188:	f7fe fc0c 	bl	80039a4 <ld_word>
 800518c:	4603      	mov	r3, r0
 800518e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005190:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005192:	2b00      	cmp	r3, #0
 8005194:	d106      	bne.n	80051a4 <find_volume+0x2cc>
 8005196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005198:	3334      	adds	r3, #52	; 0x34
 800519a:	3320      	adds	r3, #32
 800519c:	4618      	mov	r0, r3
 800519e:	f7fe fc19 	bl	80039d4 <ld_dword>
 80051a2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80051a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a6:	3334      	adds	r3, #52	; 0x34
 80051a8:	330e      	adds	r3, #14
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7fe fbfa 	bl	80039a4 <ld_word>
 80051b0:	4603      	mov	r3, r0
 80051b2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80051b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d104      	bne.n	80051c4 <find_volume+0x2ec>
 80051ba:	230d      	movs	r3, #13
 80051bc:	e105      	b.n	80053ca <find_volume+0x4f2>
 80051be:	bf00      	nop
 80051c0:	200000a4 	.word	0x200000a4

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80051c4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80051c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051c8:	4413      	add	r3, r2
 80051ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051cc:	8911      	ldrh	r1, [r2, #8]
 80051ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051d0:	8992      	ldrh	r2, [r2, #12]
 80051d2:	0952      	lsrs	r2, r2, #5
 80051d4:	b292      	uxth	r2, r2
 80051d6:	fbb1 f2f2 	udiv	r2, r1, r2
 80051da:	b292      	uxth	r2, r2
 80051dc:	4413      	add	r3, r2
 80051de:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80051e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d201      	bcs.n	80051ec <find_volume+0x314>
 80051e8:	230d      	movs	r3, #13
 80051ea:	e0ee      	b.n	80053ca <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80051ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051f4:	8952      	ldrh	r2, [r2, #10]
 80051f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80051fa:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d101      	bne.n	8005206 <find_volume+0x32e>
 8005202:	230d      	movs	r3, #13
 8005204:	e0e1      	b.n	80053ca <find_volume+0x4f2>
		fmt = FS_FAT32;
 8005206:	2303      	movs	r3, #3
 8005208:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800520c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005212:	4293      	cmp	r3, r2
 8005214:	d802      	bhi.n	800521c <find_volume+0x344>
 8005216:	2302      	movs	r3, #2
 8005218:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005222:	4293      	cmp	r3, r2
 8005224:	d802      	bhi.n	800522c <find_volume+0x354>
 8005226:	2301      	movs	r3, #1
 8005228:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522e:	1c9a      	adds	r2, r3, #2
 8005230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005232:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8005234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005236:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005238:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800523a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800523c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800523e:	441a      	add	r2, r3
 8005240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005242:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8005244:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005248:	441a      	add	r2, r3
 800524a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524c:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800524e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005252:	2b03      	cmp	r3, #3
 8005254:	d11e      	bne.n	8005294 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005258:	3334      	adds	r3, #52	; 0x34
 800525a:	332a      	adds	r3, #42	; 0x2a
 800525c:	4618      	mov	r0, r3
 800525e:	f7fe fba1 	bl	80039a4 <ld_word>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d001      	beq.n	800526c <find_volume+0x394>
 8005268:	230d      	movs	r3, #13
 800526a:	e0ae      	b.n	80053ca <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800526c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800526e:	891b      	ldrh	r3, [r3, #8]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d001      	beq.n	8005278 <find_volume+0x3a0>
 8005274:	230d      	movs	r3, #13
 8005276:	e0a8      	b.n	80053ca <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800527a:	3334      	adds	r3, #52	; 0x34
 800527c:	332c      	adds	r3, #44	; 0x2c
 800527e:	4618      	mov	r0, r3
 8005280:	f7fe fba8 	bl	80039d4 <ld_dword>
 8005284:	4602      	mov	r2, r0
 8005286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005288:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800528a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	647b      	str	r3, [r7, #68]	; 0x44
 8005292:	e01f      	b.n	80052d4 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005296:	891b      	ldrh	r3, [r3, #8]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d101      	bne.n	80052a0 <find_volume+0x3c8>
 800529c:	230d      	movs	r3, #13
 800529e:	e094      	b.n	80053ca <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80052a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052a6:	441a      	add	r2, r3
 80052a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052aa:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80052ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d103      	bne.n	80052bc <find_volume+0x3e4>
 80052b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	005b      	lsls	r3, r3, #1
 80052ba:	e00a      	b.n	80052d2 <find_volume+0x3fa>
 80052bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052be:	699a      	ldr	r2, [r3, #24]
 80052c0:	4613      	mov	r3, r2
 80052c2:	005b      	lsls	r3, r3, #1
 80052c4:	4413      	add	r3, r2
 80052c6:	085a      	lsrs	r2, r3, #1
 80052c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	f003 0301 	and.w	r3, r3, #1
 80052d0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80052d2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80052d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d6:	69da      	ldr	r2, [r3, #28]
 80052d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052da:	899b      	ldrh	r3, [r3, #12]
 80052dc:	4619      	mov	r1, r3
 80052de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052e0:	440b      	add	r3, r1
 80052e2:	3b01      	subs	r3, #1
 80052e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80052e6:	8989      	ldrh	r1, [r1, #12]
 80052e8:	fbb3 f3f1 	udiv	r3, r3, r1
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d201      	bcs.n	80052f4 <find_volume+0x41c>
 80052f0:	230d      	movs	r3, #13
 80052f2:	e06a      	b.n	80053ca <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80052f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f6:	f04f 32ff 	mov.w	r2, #4294967295
 80052fa:	615a      	str	r2, [r3, #20]
 80052fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fe:	695a      	ldr	r2, [r3, #20]
 8005300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005302:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8005304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005306:	2280      	movs	r2, #128	; 0x80
 8005308:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800530a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800530e:	2b03      	cmp	r3, #3
 8005310:	d149      	bne.n	80053a6 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005314:	3334      	adds	r3, #52	; 0x34
 8005316:	3330      	adds	r3, #48	; 0x30
 8005318:	4618      	mov	r0, r3
 800531a:	f7fe fb43 	bl	80039a4 <ld_word>
 800531e:	4603      	mov	r3, r0
 8005320:	2b01      	cmp	r3, #1
 8005322:	d140      	bne.n	80053a6 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005324:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005326:	3301      	adds	r3, #1
 8005328:	4619      	mov	r1, r3
 800532a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800532c:	f7fe fdea 	bl	8003f04 <move_window>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d137      	bne.n	80053a6 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8005336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005338:	2200      	movs	r2, #0
 800533a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800533c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533e:	3334      	adds	r3, #52	; 0x34
 8005340:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005344:	4618      	mov	r0, r3
 8005346:	f7fe fb2d 	bl	80039a4 <ld_word>
 800534a:	4603      	mov	r3, r0
 800534c:	461a      	mov	r2, r3
 800534e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005352:	429a      	cmp	r2, r3
 8005354:	d127      	bne.n	80053a6 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005358:	3334      	adds	r3, #52	; 0x34
 800535a:	4618      	mov	r0, r3
 800535c:	f7fe fb3a 	bl	80039d4 <ld_dword>
 8005360:	4602      	mov	r2, r0
 8005362:	4b1c      	ldr	r3, [pc, #112]	; (80053d4 <find_volume+0x4fc>)
 8005364:	429a      	cmp	r2, r3
 8005366:	d11e      	bne.n	80053a6 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536a:	3334      	adds	r3, #52	; 0x34
 800536c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005370:	4618      	mov	r0, r3
 8005372:	f7fe fb2f 	bl	80039d4 <ld_dword>
 8005376:	4602      	mov	r2, r0
 8005378:	4b17      	ldr	r3, [pc, #92]	; (80053d8 <find_volume+0x500>)
 800537a:	429a      	cmp	r2, r3
 800537c:	d113      	bne.n	80053a6 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800537e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005380:	3334      	adds	r3, #52	; 0x34
 8005382:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005386:	4618      	mov	r0, r3
 8005388:	f7fe fb24 	bl	80039d4 <ld_dword>
 800538c:	4602      	mov	r2, r0
 800538e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005390:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005394:	3334      	adds	r3, #52	; 0x34
 8005396:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800539a:	4618      	mov	r0, r3
 800539c:	f7fe fb1a 	bl	80039d4 <ld_dword>
 80053a0:	4602      	mov	r2, r0
 80053a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a4:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80053a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80053ac:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80053ae:	4b0b      	ldr	r3, [pc, #44]	; (80053dc <find_volume+0x504>)
 80053b0:	881b      	ldrh	r3, [r3, #0]
 80053b2:	3301      	adds	r3, #1
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	4b09      	ldr	r3, [pc, #36]	; (80053dc <find_volume+0x504>)
 80053b8:	801a      	strh	r2, [r3, #0]
 80053ba:	4b08      	ldr	r3, [pc, #32]	; (80053dc <find_volume+0x504>)
 80053bc:	881a      	ldrh	r2, [r3, #0]
 80053be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80053c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80053c4:	f7fe fd36 	bl	8003e34 <clear_lock>
#endif
	return FR_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3758      	adds	r7, #88	; 0x58
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	41615252 	.word	0x41615252
 80053d8:	61417272 	.word	0x61417272
 80053dc:	200000a8 	.word	0x200000a8

080053e0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80053ea:	2309      	movs	r3, #9
 80053ec:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d01c      	beq.n	800542e <validate+0x4e>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d018      	beq.n	800542e <validate+0x4e>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d013      	beq.n	800542e <validate+0x4e>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	889a      	ldrh	r2, [r3, #4]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	88db      	ldrh	r3, [r3, #6]
 8005410:	429a      	cmp	r2, r3
 8005412:	d10c      	bne.n	800542e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	785b      	ldrb	r3, [r3, #1]
 800541a:	4618      	mov	r0, r3
 800541c:	f7fe fa24 	bl	8003868 <disk_status>
 8005420:	4603      	mov	r3, r0
 8005422:	f003 0301 	and.w	r3, r3, #1
 8005426:	2b00      	cmp	r3, #0
 8005428:	d101      	bne.n	800542e <validate+0x4e>
			res = FR_OK;
 800542a:	2300      	movs	r3, #0
 800542c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800542e:	7bfb      	ldrb	r3, [r7, #15]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d102      	bne.n	800543a <validate+0x5a>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	e000      	b.n	800543c <validate+0x5c>
 800543a:	2300      	movs	r3, #0
 800543c:	683a      	ldr	r2, [r7, #0]
 800543e:	6013      	str	r3, [r2, #0]
	return res;
 8005440:	7bfb      	ldrb	r3, [r7, #15]
}
 8005442:	4618      	mov	r0, r3
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
	...

0800544c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b088      	sub	sp, #32
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	4613      	mov	r3, r2
 8005458:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800545e:	f107 0310 	add.w	r3, r7, #16
 8005462:	4618      	mov	r0, r3
 8005464:	f7ff fc9e 	bl	8004da4 <get_ldnumber>
 8005468:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	2b00      	cmp	r3, #0
 800546e:	da01      	bge.n	8005474 <f_mount+0x28>
 8005470:	230b      	movs	r3, #11
 8005472:	e02b      	b.n	80054cc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005474:	4a17      	ldr	r2, [pc, #92]	; (80054d4 <f_mount+0x88>)
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800547c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d005      	beq.n	8005490 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005484:	69b8      	ldr	r0, [r7, #24]
 8005486:	f7fe fcd5 	bl	8003e34 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	2200      	movs	r2, #0
 800548e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d002      	beq.n	800549c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	490d      	ldr	r1, [pc, #52]	; (80054d4 <f_mount+0x88>)
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d002      	beq.n	80054b2 <f_mount+0x66>
 80054ac:	79fb      	ldrb	r3, [r7, #7]
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d001      	beq.n	80054b6 <f_mount+0x6a>
 80054b2:	2300      	movs	r3, #0
 80054b4:	e00a      	b.n	80054cc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80054b6:	f107 010c 	add.w	r1, r7, #12
 80054ba:	f107 0308 	add.w	r3, r7, #8
 80054be:	2200      	movs	r2, #0
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7ff fd09 	bl	8004ed8 <find_volume>
 80054c6:	4603      	mov	r3, r0
 80054c8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80054ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3720      	adds	r7, #32
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	200000a4 	.word	0x200000a4

080054d8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b098      	sub	sp, #96	; 0x60
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	4613      	mov	r3, r2
 80054e4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d101      	bne.n	80054f0 <f_open+0x18>
 80054ec:	2309      	movs	r3, #9
 80054ee:	e1bb      	b.n	8005868 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80054f0:	79fb      	ldrb	r3, [r7, #7]
 80054f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054f6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80054f8:	79fa      	ldrb	r2, [r7, #7]
 80054fa:	f107 0110 	add.w	r1, r7, #16
 80054fe:	f107 0308 	add.w	r3, r7, #8
 8005502:	4618      	mov	r0, r3
 8005504:	f7ff fce8 	bl	8004ed8 <find_volume>
 8005508:	4603      	mov	r3, r0
 800550a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800550e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005512:	2b00      	cmp	r3, #0
 8005514:	f040 819f 	bne.w	8005856 <f_open+0x37e>
		dj.obj.fs = fs;
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800551c:	68ba      	ldr	r2, [r7, #8]
 800551e:	f107 0314 	add.w	r3, r7, #20
 8005522:	4611      	mov	r1, r2
 8005524:	4618      	mov	r0, r3
 8005526:	f7ff fbc7 	bl	8004cb8 <follow_path>
 800552a:	4603      	mov	r3, r0
 800552c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005530:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005534:	2b00      	cmp	r3, #0
 8005536:	d11a      	bne.n	800556e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005538:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800553c:	b25b      	sxtb	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	da03      	bge.n	800554a <f_open+0x72>
				res = FR_INVALID_NAME;
 8005542:	2306      	movs	r3, #6
 8005544:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005548:	e011      	b.n	800556e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800554a:	79fb      	ldrb	r3, [r7, #7]
 800554c:	f023 0301 	bic.w	r3, r3, #1
 8005550:	2b00      	cmp	r3, #0
 8005552:	bf14      	ite	ne
 8005554:	2301      	movne	r3, #1
 8005556:	2300      	moveq	r3, #0
 8005558:	b2db      	uxtb	r3, r3
 800555a:	461a      	mov	r2, r3
 800555c:	f107 0314 	add.w	r3, r7, #20
 8005560:	4611      	mov	r1, r2
 8005562:	4618      	mov	r0, r3
 8005564:	f7fe fb1e 	bl	8003ba4 <chk_lock>
 8005568:	4603      	mov	r3, r0
 800556a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800556e:	79fb      	ldrb	r3, [r7, #7]
 8005570:	f003 031c 	and.w	r3, r3, #28
 8005574:	2b00      	cmp	r3, #0
 8005576:	d07f      	beq.n	8005678 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8005578:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800557c:	2b00      	cmp	r3, #0
 800557e:	d017      	beq.n	80055b0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005580:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005584:	2b04      	cmp	r3, #4
 8005586:	d10e      	bne.n	80055a6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005588:	f7fe fb68 	bl	8003c5c <enq_lock>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d006      	beq.n	80055a0 <f_open+0xc8>
 8005592:	f107 0314 	add.w	r3, r7, #20
 8005596:	4618      	mov	r0, r3
 8005598:	f7ff fac7 	bl	8004b2a <dir_register>
 800559c:	4603      	mov	r3, r0
 800559e:	e000      	b.n	80055a2 <f_open+0xca>
 80055a0:	2312      	movs	r3, #18
 80055a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80055a6:	79fb      	ldrb	r3, [r7, #7]
 80055a8:	f043 0308 	orr.w	r3, r3, #8
 80055ac:	71fb      	strb	r3, [r7, #7]
 80055ae:	e010      	b.n	80055d2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80055b0:	7ebb      	ldrb	r3, [r7, #26]
 80055b2:	f003 0311 	and.w	r3, r3, #17
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d003      	beq.n	80055c2 <f_open+0xea>
					res = FR_DENIED;
 80055ba:	2307      	movs	r3, #7
 80055bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80055c0:	e007      	b.n	80055d2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80055c2:	79fb      	ldrb	r3, [r7, #7]
 80055c4:	f003 0304 	and.w	r3, r3, #4
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d002      	beq.n	80055d2 <f_open+0xfa>
 80055cc:	2308      	movs	r3, #8
 80055ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80055d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d168      	bne.n	80056ac <f_open+0x1d4>
 80055da:	79fb      	ldrb	r3, [r7, #7]
 80055dc:	f003 0308 	and.w	r3, r3, #8
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d063      	beq.n	80056ac <f_open+0x1d4>
				dw = GET_FATTIME();
 80055e4:	f000 fc7c 	bl	8005ee0 <get_fattime>
 80055e8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80055ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ec:	330e      	adds	r3, #14
 80055ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80055f0:	4618      	mov	r0, r3
 80055f2:	f7fe fa2d 	bl	8003a50 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80055f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055f8:	3316      	adds	r3, #22
 80055fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80055fc:	4618      	mov	r0, r3
 80055fe:	f7fe fa27 	bl	8003a50 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005604:	330b      	adds	r3, #11
 8005606:	2220      	movs	r2, #32
 8005608:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800560e:	4611      	mov	r1, r2
 8005610:	4618      	mov	r0, r3
 8005612:	f7ff f9f6 	bl	8004a02 <ld_clust>
 8005616:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800561c:	2200      	movs	r2, #0
 800561e:	4618      	mov	r0, r3
 8005620:	f7ff fa0e 	bl	8004a40 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005626:	331c      	adds	r3, #28
 8005628:	2100      	movs	r1, #0
 800562a:	4618      	mov	r0, r3
 800562c:	f7fe fa10 	bl	8003a50 <st_dword>
					fs->wflag = 1;
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	2201      	movs	r2, #1
 8005634:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8005636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005638:	2b00      	cmp	r3, #0
 800563a:	d037      	beq.n	80056ac <f_open+0x1d4>
						dw = fs->winsect;
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005640:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8005642:	f107 0314 	add.w	r3, r7, #20
 8005646:	2200      	movs	r2, #0
 8005648:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800564a:	4618      	mov	r0, r3
 800564c:	f7fe fefe 	bl	800444c <remove_chain>
 8005650:	4603      	mov	r3, r0
 8005652:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8005656:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800565a:	2b00      	cmp	r3, #0
 800565c:	d126      	bne.n	80056ac <f_open+0x1d4>
							res = move_window(fs, dw);
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005662:	4618      	mov	r0, r3
 8005664:	f7fe fc4e 	bl	8003f04 <move_window>
 8005668:	4603      	mov	r3, r0
 800566a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005672:	3a01      	subs	r2, #1
 8005674:	611a      	str	r2, [r3, #16]
 8005676:	e019      	b.n	80056ac <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8005678:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800567c:	2b00      	cmp	r3, #0
 800567e:	d115      	bne.n	80056ac <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005680:	7ebb      	ldrb	r3, [r7, #26]
 8005682:	f003 0310 	and.w	r3, r3, #16
 8005686:	2b00      	cmp	r3, #0
 8005688:	d003      	beq.n	8005692 <f_open+0x1ba>
					res = FR_NO_FILE;
 800568a:	2304      	movs	r3, #4
 800568c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005690:	e00c      	b.n	80056ac <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005692:	79fb      	ldrb	r3, [r7, #7]
 8005694:	f003 0302 	and.w	r3, r3, #2
 8005698:	2b00      	cmp	r3, #0
 800569a:	d007      	beq.n	80056ac <f_open+0x1d4>
 800569c:	7ebb      	ldrb	r3, [r7, #26]
 800569e:	f003 0301 	and.w	r3, r3, #1
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d002      	beq.n	80056ac <f_open+0x1d4>
						res = FR_DENIED;
 80056a6:	2307      	movs	r3, #7
 80056a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80056ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d128      	bne.n	8005706 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80056b4:	79fb      	ldrb	r3, [r7, #7]
 80056b6:	f003 0308 	and.w	r3, r3, #8
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d003      	beq.n	80056c6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80056be:	79fb      	ldrb	r3, [r7, #7]
 80056c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056c4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80056ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80056d4:	79fb      	ldrb	r3, [r7, #7]
 80056d6:	f023 0301 	bic.w	r3, r3, #1
 80056da:	2b00      	cmp	r3, #0
 80056dc:	bf14      	ite	ne
 80056de:	2301      	movne	r3, #1
 80056e0:	2300      	moveq	r3, #0
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	461a      	mov	r2, r3
 80056e6:	f107 0314 	add.w	r3, r7, #20
 80056ea:	4611      	mov	r1, r2
 80056ec:	4618      	mov	r0, r3
 80056ee:	f7fe fad7 	bl	8003ca0 <inc_lock>
 80056f2:	4602      	mov	r2, r0
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d102      	bne.n	8005706 <f_open+0x22e>
 8005700:	2302      	movs	r3, #2
 8005702:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8005706:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800570a:	2b00      	cmp	r3, #0
 800570c:	f040 80a3 	bne.w	8005856 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005714:	4611      	mov	r1, r2
 8005716:	4618      	mov	r0, r3
 8005718:	f7ff f973 	bl	8004a02 <ld_clust>
 800571c:	4602      	mov	r2, r0
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005724:	331c      	adds	r3, #28
 8005726:	4618      	mov	r0, r3
 8005728:	f7fe f954 	bl	80039d4 <ld_dword>
 800572c:	4602      	mov	r2, r0
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	88da      	ldrh	r2, [r3, #6]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	79fa      	ldrb	r2, [r7, #7]
 800574a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	3330      	adds	r3, #48	; 0x30
 8005762:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005766:	2100      	movs	r1, #0
 8005768:	4618      	mov	r0, r3
 800576a:	f7fe f9be 	bl	8003aea <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800576e:	79fb      	ldrb	r3, [r7, #7]
 8005770:	f003 0320 	and.w	r3, r3, #32
 8005774:	2b00      	cmp	r3, #0
 8005776:	d06e      	beq.n	8005856 <f_open+0x37e>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d06a      	beq.n	8005856 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	68da      	ldr	r2, [r3, #12]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	895b      	ldrh	r3, [r3, #10]
 800578c:	461a      	mov	r2, r3
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	899b      	ldrh	r3, [r3, #12]
 8005792:	fb03 f302 	mul.w	r3, r3, r2
 8005796:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	657b      	str	r3, [r7, #84]	; 0x54
 80057a4:	e016      	b.n	80057d4 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7fe fc67 	bl	800407e <get_fat>
 80057b0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80057b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d802      	bhi.n	80057be <f_open+0x2e6>
 80057b8:	2302      	movs	r3, #2
 80057ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80057be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c4:	d102      	bne.n	80057cc <f_open+0x2f4>
 80057c6:	2301      	movs	r3, #1
 80057c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80057cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80057ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	657b      	str	r3, [r7, #84]	; 0x54
 80057d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d103      	bne.n	80057e4 <f_open+0x30c>
 80057dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80057de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d8e0      	bhi.n	80057a6 <f_open+0x2ce>
				}
				fp->clust = clst;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80057e8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80057ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d131      	bne.n	8005856 <f_open+0x37e>
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	899b      	ldrh	r3, [r3, #12]
 80057f6:	461a      	mov	r2, r3
 80057f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80057fe:	fb02 f201 	mul.w	r2, r2, r1
 8005802:	1a9b      	subs	r3, r3, r2
 8005804:	2b00      	cmp	r3, #0
 8005806:	d026      	beq.n	8005856 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800580c:	4618      	mov	r0, r3
 800580e:	f7fe fc17 	bl	8004040 <clust2sect>
 8005812:	6478      	str	r0, [r7, #68]	; 0x44
 8005814:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005816:	2b00      	cmp	r3, #0
 8005818:	d103      	bne.n	8005822 <f_open+0x34a>
						res = FR_INT_ERR;
 800581a:	2302      	movs	r3, #2
 800581c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005820:	e019      	b.n	8005856 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	899b      	ldrh	r3, [r3, #12]
 8005826:	461a      	mov	r2, r3
 8005828:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800582a:	fbb3 f2f2 	udiv	r2, r3, r2
 800582e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005830:	441a      	add	r2, r3
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	7858      	ldrb	r0, [r3, #1]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6a1a      	ldr	r2, [r3, #32]
 8005844:	2301      	movs	r3, #1
 8005846:	f7fe f84f 	bl	80038e8 <disk_read>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d002      	beq.n	8005856 <f_open+0x37e>
 8005850:	2301      	movs	r3, #1
 8005852:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8005856:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800585a:	2b00      	cmp	r3, #0
 800585c:	d002      	beq.n	8005864 <f_open+0x38c>
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005864:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8005868:	4618      	mov	r0, r3
 800586a:	3760      	adds	r7, #96	; 0x60
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b08c      	sub	sp, #48	; 0x30
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	607a      	str	r2, [r7, #4]
 800587c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	2200      	movs	r2, #0
 8005886:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f107 0210 	add.w	r2, r7, #16
 800588e:	4611      	mov	r1, r2
 8005890:	4618      	mov	r0, r3
 8005892:	f7ff fda5 	bl	80053e0 <validate>
 8005896:	4603      	mov	r3, r0
 8005898:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800589c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d107      	bne.n	80058b4 <f_write+0x44>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	7d5b      	ldrb	r3, [r3, #21]
 80058a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80058ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d002      	beq.n	80058ba <f_write+0x4a>
 80058b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80058b8:	e16a      	b.n	8005b90 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	7d1b      	ldrb	r3, [r3, #20]
 80058be:	f003 0302 	and.w	r3, r3, #2
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d101      	bne.n	80058ca <f_write+0x5a>
 80058c6:	2307      	movs	r3, #7
 80058c8:	e162      	b.n	8005b90 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	699a      	ldr	r2, [r3, #24]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	441a      	add	r2, r3
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	f080 814c 	bcs.w	8005b74 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	699b      	ldr	r3, [r3, #24]
 80058e0:	43db      	mvns	r3, r3
 80058e2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80058e4:	e146      	b.n	8005b74 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	8992      	ldrh	r2, [r2, #12]
 80058ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80058f2:	fb02 f201 	mul.w	r2, r2, r1
 80058f6:	1a9b      	subs	r3, r3, r2
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	f040 80f1 	bne.w	8005ae0 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	693a      	ldr	r2, [r7, #16]
 8005904:	8992      	ldrh	r2, [r2, #12]
 8005906:	fbb3 f3f2 	udiv	r3, r3, r2
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	8952      	ldrh	r2, [r2, #10]
 800590e:	3a01      	subs	r2, #1
 8005910:	4013      	ands	r3, r2
 8005912:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d143      	bne.n	80059a2 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d10c      	bne.n	800593c <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8005928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592a:	2b00      	cmp	r3, #0
 800592c:	d11a      	bne.n	8005964 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2100      	movs	r1, #0
 8005932:	4618      	mov	r0, r3
 8005934:	f7fe fdef 	bl	8004516 <create_chain>
 8005938:	62b8      	str	r0, [r7, #40]	; 0x28
 800593a:	e013      	b.n	8005964 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005940:	2b00      	cmp	r3, #0
 8005942:	d007      	beq.n	8005954 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	699b      	ldr	r3, [r3, #24]
 8005948:	4619      	mov	r1, r3
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	f7fe fe7b 	bl	8004646 <clmt_clust>
 8005950:	62b8      	str	r0, [r7, #40]	; 0x28
 8005952:	e007      	b.n	8005964 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	69db      	ldr	r3, [r3, #28]
 800595a:	4619      	mov	r1, r3
 800595c:	4610      	mov	r0, r2
 800595e:	f7fe fdda 	bl	8004516 <create_chain>
 8005962:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005966:	2b00      	cmp	r3, #0
 8005968:	f000 8109 	beq.w	8005b7e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800596c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596e:	2b01      	cmp	r3, #1
 8005970:	d104      	bne.n	800597c <f_write+0x10c>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2202      	movs	r2, #2
 8005976:	755a      	strb	r2, [r3, #21]
 8005978:	2302      	movs	r3, #2
 800597a:	e109      	b.n	8005b90 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800597c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005982:	d104      	bne.n	800598e <f_write+0x11e>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2201      	movs	r2, #1
 8005988:	755a      	strb	r2, [r3, #21]
 800598a:	2301      	movs	r3, #1
 800598c:	e100      	b.n	8005b90 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005992:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d102      	bne.n	80059a2 <f_write+0x132>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059a0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	7d1b      	ldrb	r3, [r3, #20]
 80059a6:	b25b      	sxtb	r3, r3
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	da18      	bge.n	80059de <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	7858      	ldrb	r0, [r3, #1]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6a1a      	ldr	r2, [r3, #32]
 80059ba:	2301      	movs	r3, #1
 80059bc:	f7fd ffb4 	bl	8003928 <disk_write>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d004      	beq.n	80059d0 <f_write+0x160>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2201      	movs	r2, #1
 80059ca:	755a      	strb	r2, [r3, #21]
 80059cc:	2301      	movs	r3, #1
 80059ce:	e0df      	b.n	8005b90 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	7d1b      	ldrb	r3, [r3, #20]
 80059d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059d8:	b2da      	uxtb	r2, r3
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	69db      	ldr	r3, [r3, #28]
 80059e4:	4619      	mov	r1, r3
 80059e6:	4610      	mov	r0, r2
 80059e8:	f7fe fb2a 	bl	8004040 <clust2sect>
 80059ec:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d104      	bne.n	80059fe <f_write+0x18e>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2202      	movs	r2, #2
 80059f8:	755a      	strb	r2, [r3, #21]
 80059fa:	2302      	movs	r3, #2
 80059fc:	e0c8      	b.n	8005b90 <f_write+0x320>
			sect += csect;
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	4413      	add	r3, r2
 8005a04:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	899b      	ldrh	r3, [r3, #12]
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a12:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005a14:	6a3b      	ldr	r3, [r7, #32]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d043      	beq.n	8005aa2 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005a1a:	69ba      	ldr	r2, [r7, #24]
 8005a1c:	6a3b      	ldr	r3, [r7, #32]
 8005a1e:	4413      	add	r3, r2
 8005a20:	693a      	ldr	r2, [r7, #16]
 8005a22:	8952      	ldrh	r2, [r2, #10]
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d905      	bls.n	8005a34 <f_write+0x1c4>
					cc = fs->csize - csect;
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	895b      	ldrh	r3, [r3, #10]
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	7858      	ldrb	r0, [r3, #1]
 8005a38:	6a3b      	ldr	r3, [r7, #32]
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	69f9      	ldr	r1, [r7, #28]
 8005a3e:	f7fd ff73 	bl	8003928 <disk_write>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d004      	beq.n	8005a52 <f_write+0x1e2>
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	755a      	strb	r2, [r3, #21]
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e09e      	b.n	8005b90 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6a1a      	ldr	r2, [r3, #32]
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	6a3a      	ldr	r2, [r7, #32]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d918      	bls.n	8005a92 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6a1a      	ldr	r2, [r3, #32]
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	8992      	ldrh	r2, [r2, #12]
 8005a72:	fb02 f303 	mul.w	r3, r2, r3
 8005a76:	69fa      	ldr	r2, [r7, #28]
 8005a78:	18d1      	adds	r1, r2, r3
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	899b      	ldrh	r3, [r3, #12]
 8005a7e:	461a      	mov	r2, r3
 8005a80:	f7fe f812 	bl	8003aa8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	7d1b      	ldrb	r3, [r3, #20]
 8005a88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a8c:	b2da      	uxtb	r2, r3
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	899b      	ldrh	r3, [r3, #12]
 8005a96:	461a      	mov	r2, r3
 8005a98:	6a3b      	ldr	r3, [r7, #32]
 8005a9a:	fb02 f303 	mul.w	r3, r2, r3
 8005a9e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8005aa0:	e04b      	b.n	8005b3a <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d016      	beq.n	8005ada <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	699a      	ldr	r2, [r3, #24]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d210      	bcs.n	8005ada <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	7858      	ldrb	r0, [r3, #1]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	697a      	ldr	r2, [r7, #20]
 8005ac6:	f7fd ff0f 	bl	80038e8 <disk_read>
 8005aca:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d004      	beq.n	8005ada <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	755a      	strb	r2, [r3, #21]
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e05a      	b.n	8005b90 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	697a      	ldr	r2, [r7, #20]
 8005ade:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	899b      	ldrh	r3, [r3, #12]
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	699b      	ldr	r3, [r3, #24]
 8005aea:	693a      	ldr	r2, [r7, #16]
 8005aec:	8992      	ldrh	r2, [r2, #12]
 8005aee:	fbb3 f1f2 	udiv	r1, r3, r2
 8005af2:	fb02 f201 	mul.w	r2, r2, r1
 8005af6:	1a9b      	subs	r3, r3, r2
 8005af8:	1ac3      	subs	r3, r0, r3
 8005afa:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8005afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d901      	bls.n	8005b08 <f_write+0x298>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	693a      	ldr	r2, [r7, #16]
 8005b14:	8992      	ldrh	r2, [r2, #12]
 8005b16:	fbb3 f0f2 	udiv	r0, r3, r2
 8005b1a:	fb02 f200 	mul.w	r2, r2, r0
 8005b1e:	1a9b      	subs	r3, r3, r2
 8005b20:	440b      	add	r3, r1
 8005b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b24:	69f9      	ldr	r1, [r7, #28]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7fd ffbe 	bl	8003aa8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	7d1b      	ldrb	r3, [r3, #20]
 8005b30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005b34:	b2da      	uxtb	r2, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8005b3a:	69fa      	ldr	r2, [r7, #28]
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3e:	4413      	add	r3, r2
 8005b40:	61fb      	str	r3, [r7, #28]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	699a      	ldr	r2, [r3, #24]
 8005b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b48:	441a      	add	r2, r3
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	619a      	str	r2, [r3, #24]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	68da      	ldr	r2, [r3, #12]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	bf38      	it	cc
 8005b5a:	461a      	movcc	r2, r3
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	60da      	str	r2, [r3, #12]
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b66:	441a      	add	r2, r3
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	601a      	str	r2, [r3, #0]
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	f47f aeb5 	bne.w	80058e6 <f_write+0x76>
 8005b7c:	e000      	b.n	8005b80 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005b7e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	7d1b      	ldrb	r3, [r3, #20]
 8005b84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b88:	b2da      	uxtb	r2, r3
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3730      	adds	r7, #48	; 0x30
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b086      	sub	sp, #24
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f107 0208 	add.w	r2, r7, #8
 8005ba6:	4611      	mov	r1, r2
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7ff fc19 	bl	80053e0 <validate>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005bb2:	7dfb      	ldrb	r3, [r7, #23]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d168      	bne.n	8005c8a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	7d1b      	ldrb	r3, [r3, #20]
 8005bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d062      	beq.n	8005c8a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	7d1b      	ldrb	r3, [r3, #20]
 8005bc8:	b25b      	sxtb	r3, r3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	da15      	bge.n	8005bfa <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	7858      	ldrb	r0, [r3, #1]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a1a      	ldr	r2, [r3, #32]
 8005bdc:	2301      	movs	r3, #1
 8005bde:	f7fd fea3 	bl	8003928 <disk_write>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d001      	beq.n	8005bec <f_sync+0x54>
 8005be8:	2301      	movs	r3, #1
 8005bea:	e04f      	b.n	8005c8c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	7d1b      	ldrb	r3, [r3, #20]
 8005bf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bf4:	b2da      	uxtb	r2, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8005bfa:	f000 f971 	bl	8005ee0 <get_fattime>
 8005bfe:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8005c00:	68ba      	ldr	r2, [r7, #8]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c06:	4619      	mov	r1, r3
 8005c08:	4610      	mov	r0, r2
 8005c0a:	f7fe f97b 	bl	8003f04 <move_window>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8005c12:	7dfb      	ldrb	r3, [r7, #23]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d138      	bne.n	8005c8a <f_sync+0xf2>
					dir = fp->dir_ptr;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c1c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	330b      	adds	r3, #11
 8005c22:	781a      	ldrb	r2, [r3, #0]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	330b      	adds	r3, #11
 8005c28:	f042 0220 	orr.w	r2, r2, #32
 8005c2c:	b2d2      	uxtb	r2, r2
 8005c2e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6818      	ldr	r0, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	461a      	mov	r2, r3
 8005c3a:	68f9      	ldr	r1, [r7, #12]
 8005c3c:	f7fe ff00 	bl	8004a40 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f103 021c 	add.w	r2, r3, #28
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	4610      	mov	r0, r2
 8005c4e:	f7fd feff 	bl	8003a50 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	3316      	adds	r3, #22
 8005c56:	6939      	ldr	r1, [r7, #16]
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f7fd fef9 	bl	8003a50 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	3312      	adds	r3, #18
 8005c62:	2100      	movs	r1, #0
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7fd fed8 	bl	8003a1a <st_word>
					fs->wflag = 1;
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	4618      	mov	r0, r3
 8005c74:	f7fe f974 	bl	8003f60 <sync_fs>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	7d1b      	ldrb	r3, [r3, #20]
 8005c80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c84:	b2da      	uxtb	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8005c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3718      	adds	r7, #24
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f7ff ff7b 	bl	8005b98 <f_sync>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8005ca6:	7bfb      	ldrb	r3, [r7, #15]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d118      	bne.n	8005cde <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f107 0208 	add.w	r2, r7, #8
 8005cb2:	4611      	mov	r1, r2
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7ff fb93 	bl	80053e0 <validate>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005cbe:	7bfb      	ldrb	r3, [r7, #15]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d10c      	bne.n	8005cde <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f7fe f877 	bl	8003dbc <dec_lock>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8005cd2:	7bfb      	ldrb	r3, [r7, #15]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d102      	bne.n	8005cde <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8005cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3710      	adds	r7, #16
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b087      	sub	sp, #28
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005cfe:	4b1f      	ldr	r3, [pc, #124]	; (8005d7c <FATFS_LinkDriverEx+0x94>)
 8005d00:	7a5b      	ldrb	r3, [r3, #9]
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d131      	bne.n	8005d6c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005d08:	4b1c      	ldr	r3, [pc, #112]	; (8005d7c <FATFS_LinkDriverEx+0x94>)
 8005d0a:	7a5b      	ldrb	r3, [r3, #9]
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	461a      	mov	r2, r3
 8005d10:	4b1a      	ldr	r3, [pc, #104]	; (8005d7c <FATFS_LinkDriverEx+0x94>)
 8005d12:	2100      	movs	r1, #0
 8005d14:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005d16:	4b19      	ldr	r3, [pc, #100]	; (8005d7c <FATFS_LinkDriverEx+0x94>)
 8005d18:	7a5b      	ldrb	r3, [r3, #9]
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	4a17      	ldr	r2, [pc, #92]	; (8005d7c <FATFS_LinkDriverEx+0x94>)
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	4413      	add	r3, r2
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005d26:	4b15      	ldr	r3, [pc, #84]	; (8005d7c <FATFS_LinkDriverEx+0x94>)
 8005d28:	7a5b      	ldrb	r3, [r3, #9]
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	4b13      	ldr	r3, [pc, #76]	; (8005d7c <FATFS_LinkDriverEx+0x94>)
 8005d30:	4413      	add	r3, r2
 8005d32:	79fa      	ldrb	r2, [r7, #7]
 8005d34:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005d36:	4b11      	ldr	r3, [pc, #68]	; (8005d7c <FATFS_LinkDriverEx+0x94>)
 8005d38:	7a5b      	ldrb	r3, [r3, #9]
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	1c5a      	adds	r2, r3, #1
 8005d3e:	b2d1      	uxtb	r1, r2
 8005d40:	4a0e      	ldr	r2, [pc, #56]	; (8005d7c <FATFS_LinkDriverEx+0x94>)
 8005d42:	7251      	strb	r1, [r2, #9]
 8005d44:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005d46:	7dbb      	ldrb	r3, [r7, #22]
 8005d48:	3330      	adds	r3, #48	; 0x30
 8005d4a:	b2da      	uxtb	r2, r3
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	3301      	adds	r3, #1
 8005d54:	223a      	movs	r2, #58	; 0x3a
 8005d56:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	3302      	adds	r3, #2
 8005d5c:	222f      	movs	r2, #47	; 0x2f
 8005d5e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	3303      	adds	r3, #3
 8005d64:	2200      	movs	r2, #0
 8005d66:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005d6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	371c      	adds	r7, #28
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	200000cc 	.word	0x200000cc

08005d80 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	6839      	ldr	r1, [r7, #0]
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f7ff ffaa 	bl	8005ce8 <FATFS_LinkDriverEx>
 8005d94:	4603      	mov	r3, r0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3708      	adds	r7, #8
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
	...

08005da0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005da6:	2300      	movs	r3, #0
 8005da8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005daa:	f000 f879 	bl	8005ea0 <BSP_SD_IsDetected>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d001      	beq.n	8005db8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e012      	b.n	8005dde <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005db8:	480b      	ldr	r0, [pc, #44]	; (8005de8 <BSP_SD_Init+0x48>)
 8005dba:	f7fb fb3f 	bl	800143c <HAL_SD_Init>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8005dc2:	79fb      	ldrb	r3, [r7, #7]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d109      	bne.n	8005ddc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8005dc8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005dcc:	4806      	ldr	r0, [pc, #24]	; (8005de8 <BSP_SD_Init+0x48>)
 8005dce:	f7fc f911 	bl	8001ff4 <HAL_SD_ConfigWideBusOperation>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d001      	beq.n	8005ddc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8005ddc:	79fb      	ldrb	r3, [r7, #7]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3708      	adds	r7, #8
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	20005258 	.word	0x20005258

08005dec <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b088      	sub	sp, #32
 8005df0:	af02      	add	r7, sp, #8
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	607a      	str	r2, [r7, #4]
 8005df8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	75fb      	strb	r3, [r7, #23]
  
  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	9300      	str	r3, [sp, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	68ba      	ldr	r2, [r7, #8]
 8005e06:	68f9      	ldr	r1, [r7, #12]
 8005e08:	4806      	ldr	r0, [pc, #24]	; (8005e24 <BSP_SD_ReadBlocks+0x38>)
 8005e0a:	f7fb fb9f 	bl	800154c <HAL_SD_ReadBlocks>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d001      	beq.n	8005e18 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8005e18:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3718      	adds	r7, #24
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	20005258 	.word	0x20005258

08005e28 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b088      	sub	sp, #32
 8005e2c:	af02      	add	r7, sp, #8
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
 8005e34:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005e36:	2300      	movs	r3, #0
 8005e38:	75fb      	strb	r3, [r7, #23]
  
  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	9300      	str	r3, [sp, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	68ba      	ldr	r2, [r7, #8]
 8005e42:	68f9      	ldr	r1, [r7, #12]
 8005e44:	4806      	ldr	r0, [pc, #24]	; (8005e60 <BSP_SD_WriteBlocks+0x38>)
 8005e46:	f7fb fd18 	bl	800187a <HAL_SD_WriteBlocks>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d001      	beq.n	8005e54 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8005e54:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3718      	adds	r7, #24
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	20005258 	.word	0x20005258

08005e64 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005e68:	4805      	ldr	r0, [pc, #20]	; (8005e80 <BSP_SD_GetCardState+0x1c>)
 8005e6a:	f7fc f93f 	bl	80020ec <HAL_SD_GetCardState>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b04      	cmp	r3, #4
 8005e72:	bf14      	ite	ne
 8005e74:	2301      	movne	r3, #1
 8005e76:	2300      	moveq	r3, #0
 8005e78:	b2db      	uxtb	r3, r3
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	20005258 	.word	0x20005258

08005e84 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005e8c:	6879      	ldr	r1, [r7, #4]
 8005e8e:	4803      	ldr	r0, [pc, #12]	; (8005e9c <BSP_SD_GetCardInfo+0x18>)
 8005e90:	f7fc f884 	bl	8001f9c <HAL_SD_GetCardInfo>
}
 8005e94:	bf00      	nop
 8005e96:	3708      	adds	r7, #8
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	20005258 	.word	0x20005258

08005ea0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 8005eaa:	79fb      	ldrb	r3, [r7, #7]
 8005eac:	b2db      	uxtb	r3, r3
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	370c      	adds	r7, #12
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
	...

08005ebc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005ec0:	4904      	ldr	r1, [pc, #16]	; (8005ed4 <MX_FATFS_Init+0x18>)
 8005ec2:	4805      	ldr	r0, [pc, #20]	; (8005ed8 <MX_FATFS_Init+0x1c>)
 8005ec4:	f7ff ff5c 	bl	8005d80 <FATFS_LinkDriver>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	461a      	mov	r2, r3
 8005ecc:	4b03      	ldr	r3, [pc, #12]	; (8005edc <MX_FATFS_Init+0x20>)
 8005ece:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8005ed0:	bf00      	nop
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	200000ec 	.word	0x200000ec
 8005ed8:	0800710c 	.word	0x0800710c
 8005edc:	200000e8 	.word	0x200000e8

08005ee0 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005ee4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b08a      	sub	sp, #40	; 0x28
 8005ef4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ef6:	f107 0314 	add.w	r3, r7, #20
 8005efa:	2200      	movs	r2, #0
 8005efc:	601a      	str	r2, [r3, #0]
 8005efe:	605a      	str	r2, [r3, #4]
 8005f00:	609a      	str	r2, [r3, #8]
 8005f02:	60da      	str	r2, [r3, #12]
 8005f04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005f06:	2300      	movs	r3, #0
 8005f08:	613b      	str	r3, [r7, #16]
 8005f0a:	4b27      	ldr	r3, [pc, #156]	; (8005fa8 <MX_GPIO_Init+0xb8>)
 8005f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f0e:	4a26      	ldr	r2, [pc, #152]	; (8005fa8 <MX_GPIO_Init+0xb8>)
 8005f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f14:	6313      	str	r3, [r2, #48]	; 0x30
 8005f16:	4b24      	ldr	r3, [pc, #144]	; (8005fa8 <MX_GPIO_Init+0xb8>)
 8005f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f1e:	613b      	str	r3, [r7, #16]
 8005f20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f22:	2300      	movs	r3, #0
 8005f24:	60fb      	str	r3, [r7, #12]
 8005f26:	4b20      	ldr	r3, [pc, #128]	; (8005fa8 <MX_GPIO_Init+0xb8>)
 8005f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2a:	4a1f      	ldr	r2, [pc, #124]	; (8005fa8 <MX_GPIO_Init+0xb8>)
 8005f2c:	f043 0301 	orr.w	r3, r3, #1
 8005f30:	6313      	str	r3, [r2, #48]	; 0x30
 8005f32:	4b1d      	ldr	r3, [pc, #116]	; (8005fa8 <MX_GPIO_Init+0xb8>)
 8005f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f36:	f003 0301 	and.w	r3, r3, #1
 8005f3a:	60fb      	str	r3, [r7, #12]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005f3e:	2300      	movs	r3, #0
 8005f40:	60bb      	str	r3, [r7, #8]
 8005f42:	4b19      	ldr	r3, [pc, #100]	; (8005fa8 <MX_GPIO_Init+0xb8>)
 8005f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f46:	4a18      	ldr	r2, [pc, #96]	; (8005fa8 <MX_GPIO_Init+0xb8>)
 8005f48:	f043 0308 	orr.w	r3, r3, #8
 8005f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8005f4e:	4b16      	ldr	r3, [pc, #88]	; (8005fa8 <MX_GPIO_Init+0xb8>)
 8005f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f52:	f003 0308 	and.w	r3, r3, #8
 8005f56:	60bb      	str	r3, [r7, #8]
 8005f58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	607b      	str	r3, [r7, #4]
 8005f5e:	4b12      	ldr	r3, [pc, #72]	; (8005fa8 <MX_GPIO_Init+0xb8>)
 8005f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f62:	4a11      	ldr	r2, [pc, #68]	; (8005fa8 <MX_GPIO_Init+0xb8>)
 8005f64:	f043 0304 	orr.w	r3, r3, #4
 8005f68:	6313      	str	r3, [r2, #48]	; 0x30
 8005f6a:	4b0f      	ldr	r3, [pc, #60]	; (8005fa8 <MX_GPIO_Init+0xb8>)
 8005f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6e:	f003 0304 	and.w	r3, r3, #4
 8005f72:	607b      	str	r3, [r7, #4]
 8005f74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8005f76:	2200      	movs	r2, #0
 8005f78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005f7c:	480b      	ldr	r0, [pc, #44]	; (8005fac <MX_GPIO_Init+0xbc>)
 8005f7e:	f7fa fe13 	bl	8000ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005f82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f90:	2300      	movs	r3, #0
 8005f92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005f94:	f107 0314 	add.w	r3, r7, #20
 8005f98:	4619      	mov	r1, r3
 8005f9a:	4804      	ldr	r0, [pc, #16]	; (8005fac <MX_GPIO_Init+0xbc>)
 8005f9c:	f7fa fc6a 	bl	8000874 <HAL_GPIO_Init>

}
 8005fa0:	bf00      	nop
 8005fa2:	3728      	adds	r7, #40	; 0x28
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	40023800 	.word	0x40023800
 8005fac:	40020c00 	.word	0x40020c00

08005fb0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	af00      	add	r7, sp, #0


	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8005fb4:	f7fa fae4 	bl	8000580 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8005fb8:	f000 f858 	bl	800606c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8005fbc:	f7ff ff98 	bl	8005ef0 <MX_GPIO_Init>
	MX_SDIO_SD_Init();
 8005fc0:	f000 f9ea 	bl	8006398 <MX_SDIO_SD_Init>
	MX_USART2_UART_Init();
 8005fc4:	f000 fb3a 	bl	800663c <MX_USART2_UART_Init>
	MX_FATFS_Init();
 8005fc8:	f7ff ff78 	bl	8005ebc <MX_FATFS_Init>
//	mount_sd();
//	create_file("out2.txt");
//	write_file("out.txt", wtext);


	if(f_mount(&sd, (const TCHAR *) SDPath, 0) != FR_OK)
 8005fcc:	2200      	movs	r2, #0
 8005fce:	491d      	ldr	r1, [pc, #116]	; (8006044 <main+0x94>)
 8005fd0:	481d      	ldr	r0, [pc, #116]	; (8006048 <main+0x98>)
 8005fd2:	f7ff fa3b 	bl	800544c <f_mount>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d003      	beq.n	8005fe4 <main+0x34>
	{
		printf2("Could not mount SD!");
 8005fdc:	481b      	ldr	r0, [pc, #108]	; (800604c <main+0x9c>)
 8005fde:	f000 f8b7 	bl	8006150 <printf2>
		while(1);
 8005fe2:	e7fe      	b.n	8005fe2 <main+0x32>
	res = f_close(&in_file);

*/


	res = f_open(&out_file, "out.txt", FA_OPEN_EXISTING | FA_WRITE);
 8005fe4:	2202      	movs	r2, #2
 8005fe6:	491a      	ldr	r1, [pc, #104]	; (8006050 <main+0xa0>)
 8005fe8:	481a      	ldr	r0, [pc, #104]	; (8006054 <main+0xa4>)
 8005fea:	f7ff fa75 	bl	80054d8 <f_open>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	4b19      	ldr	r3, [pc, #100]	; (8006058 <main+0xa8>)
 8005ff4:	701a      	strb	r2, [r3, #0]

	if(res != FR_OK)
 8005ff6:	4b18      	ldr	r3, [pc, #96]	; (8006058 <main+0xa8>)
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d003      	beq.n	8006006 <main+0x56>
	{
		printf2("Could not open a file!");
 8005ffe:	4817      	ldr	r0, [pc, #92]	; (800605c <main+0xac>)
 8006000:	f000 f8a6 	bl	8006150 <printf2>
		while(1);
 8006004:	e7fe      	b.n	8006004 <main+0x54>
	}

	res = f_write(&out_file, wtext, sizeof(wtext), (void *) &bytes_written);
 8006006:	4b16      	ldr	r3, [pc, #88]	; (8006060 <main+0xb0>)
 8006008:	2214      	movs	r2, #20
 800600a:	4916      	ldr	r1, [pc, #88]	; (8006064 <main+0xb4>)
 800600c:	4811      	ldr	r0, [pc, #68]	; (8006054 <main+0xa4>)
 800600e:	f7ff fc2f 	bl	8005870 <f_write>
 8006012:	4603      	mov	r3, r0
 8006014:	461a      	mov	r2, r3
 8006016:	4b10      	ldr	r3, [pc, #64]	; (8006058 <main+0xa8>)
 8006018:	701a      	strb	r2, [r3, #0]

	if (res != FR_OK)
 800601a:	4b0f      	ldr	r3, [pc, #60]	; (8006058 <main+0xa8>)
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d003      	beq.n	800602a <main+0x7a>
	{
		printf2("Write to file failed!");
 8006022:	4811      	ldr	r0, [pc, #68]	; (8006068 <main+0xb8>)
 8006024:	f000 f894 	bl	8006150 <printf2>
		while(1);
 8006028:	e7fe      	b.n	8006028 <main+0x78>
	}

	HAL_Delay(1000);
 800602a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800602e:	f7fa fb19 	bl	8000664 <HAL_Delay>
	res = f_close(&out_file);
 8006032:	4808      	ldr	r0, [pc, #32]	; (8006054 <main+0xa4>)
 8006034:	f7ff fe2e 	bl	8005c94 <f_close>
 8006038:	4603      	mov	r3, r0
 800603a:	461a      	mov	r2, r3
 800603c:	4b06      	ldr	r3, [pc, #24]	; (8006058 <main+0xa8>)
 800603e:	701a      	strb	r2, [r3, #0]

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8006040:	e7fe      	b.n	8006040 <main+0x90>
 8006042:	bf00      	nop
 8006044:	200000ec 	.word	0x200000ec
 8006048:	2000421c 	.word	0x2000421c
 800604c:	08007040 	.word	0x08007040
 8006050:	08007054 	.word	0x08007054
 8006054:	20002154 	.word	0x20002154
 8006058:	20005250 	.word	0x20005250
 800605c:	0800705c 	.word	0x0800705c
 8006060:	20005254 	.word	0x20005254
 8006064:	20000008 	.word	0x20000008
 8006068:	08007074 	.word	0x08007074

0800606c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b094      	sub	sp, #80	; 0x50
 8006070:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006072:	f107 0320 	add.w	r3, r7, #32
 8006076:	2230      	movs	r2, #48	; 0x30
 8006078:	2100      	movs	r1, #0
 800607a:	4618      	mov	r0, r3
 800607c:	f000 fba4 	bl	80067c8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006080:	f107 030c 	add.w	r3, r7, #12
 8006084:	2200      	movs	r2, #0
 8006086:	601a      	str	r2, [r3, #0]
 8006088:	605a      	str	r2, [r3, #4]
 800608a:	609a      	str	r2, [r3, #8]
 800608c:	60da      	str	r2, [r3, #12]
 800608e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8006090:	2300      	movs	r3, #0
 8006092:	60bb      	str	r3, [r7, #8]
 8006094:	4b28      	ldr	r3, [pc, #160]	; (8006138 <SystemClock_Config+0xcc>)
 8006096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006098:	4a27      	ldr	r2, [pc, #156]	; (8006138 <SystemClock_Config+0xcc>)
 800609a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800609e:	6413      	str	r3, [r2, #64]	; 0x40
 80060a0:	4b25      	ldr	r3, [pc, #148]	; (8006138 <SystemClock_Config+0xcc>)
 80060a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060a8:	60bb      	str	r3, [r7, #8]
 80060aa:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80060ac:	2300      	movs	r3, #0
 80060ae:	607b      	str	r3, [r7, #4]
 80060b0:	4b22      	ldr	r3, [pc, #136]	; (800613c <SystemClock_Config+0xd0>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a21      	ldr	r2, [pc, #132]	; (800613c <SystemClock_Config+0xd0>)
 80060b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80060ba:	6013      	str	r3, [r2, #0]
 80060bc:	4b1f      	ldr	r3, [pc, #124]	; (800613c <SystemClock_Config+0xd0>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060c4:	607b      	str	r3, [r7, #4]
 80060c6:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80060c8:	2301      	movs	r3, #1
 80060ca:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80060cc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80060d0:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80060d2:	2302      	movs	r3, #2
 80060d4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80060d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80060da:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80060dc:	2304      	movs	r3, #4
 80060de:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80060e0:	23a8      	movs	r3, #168	; 0xa8
 80060e2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80060e4:	2302      	movs	r3, #2
 80060e6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80060e8:	2307      	movs	r3, #7
 80060ea:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80060ec:	f107 0320 	add.w	r3, r7, #32
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7fa fd73 	bl	8000bdc <HAL_RCC_OscConfig>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d001      	beq.n	8006100 <SystemClock_Config+0x94>
	{
		Error_Handler();
 80060fc:	f000 f820 	bl	8006140 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006100:	230f      	movs	r3, #15
 8006102:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006104:	2302      	movs	r3, #2
 8006106:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006108:	2300      	movs	r3, #0
 800610a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800610c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006110:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006112:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006116:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006118:	f107 030c 	add.w	r3, r7, #12
 800611c:	2105      	movs	r1, #5
 800611e:	4618      	mov	r0, r3
 8006120:	f7fa ff9e 	bl	8001060 <HAL_RCC_ClockConfig>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d001      	beq.n	800612e <SystemClock_Config+0xc2>
	{
		Error_Handler();
 800612a:	f000 f809 	bl	8006140 <Error_Handler>
	}
}
 800612e:	bf00      	nop
 8006130:	3750      	adds	r7, #80	; 0x50
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	40023800 	.word	0x40023800
 800613c:	40007000 	.word	0x40007000

08006140 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8006140:	b480      	push	{r7}
 8006142:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8006144:	bf00      	nop
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
	...

08006150 <printf2>:
#ifdef UART2_ENABLED

extern UART_HandleTypeDef huart2;

uint8_t printf2(const char *fmt, ...)
{
 8006150:	b40f      	push	{r0, r1, r2, r3}
 8006152:	b580      	push	{r7, lr}
 8006154:	b082      	sub	sp, #8
 8006156:	af00      	add	r7, sp, #0
	va_list argp;
	va_start(argp, fmt);
 8006158:	f107 0314 	add.w	r3, r7, #20
 800615c:	603b      	str	r3, [r7, #0]

	uint8_t len = vprint(&huart2, fmt, argp);
 800615e:	683a      	ldr	r2, [r7, #0]
 8006160:	6939      	ldr	r1, [r7, #16]
 8006162:	4806      	ldr	r0, [pc, #24]	; (800617c <printf2+0x2c>)
 8006164:	f000 f80c 	bl	8006180 <vprint>
 8006168:	4603      	mov	r3, r0
 800616a:	71fb      	strb	r3, [r7, #7]
	va_end(argp);

	return len;
 800616c:	79fb      	ldrb	r3, [r7, #7]
}
 800616e:	4618      	mov	r0, r3
 8006170:	3708      	adds	r7, #8
 8006172:	46bd      	mov	sp, r7
 8006174:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006178:	b004      	add	sp, #16
 800617a:	4770      	bx	lr
 800617c:	200052dc 	.word	0x200052dc

08006180 <vprint>:

#endif


static uint8_t vprint(UART_HandleTypeDef *huart, const char *fmt, va_list argp)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b092      	sub	sp, #72	; 0x48
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]
	char str[50];

	uint8_t len = vsprintf(str, fmt, argp);
 800618c:	f107 0314 	add.w	r3, r7, #20
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	68b9      	ldr	r1, [r7, #8]
 8006194:	4618      	mov	r0, r3
 8006196:	f000 fb35 	bl	8006804 <vsiprintf>
 800619a:	4603      	mov	r3, r0
 800619c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if(0 < len) // build string
 80061a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00d      	beq.n	80061c4 <vprint+0x44>
		HAL_UART_Transmit(huart, (uint8_t*) str, strlen(str), 0xFFFFFF); // send message via UART
 80061a8:	f107 0314 	add.w	r3, r7, #20
 80061ac:	4618      	mov	r0, r3
 80061ae:	f7fa f80f 	bl	80001d0 <strlen>
 80061b2:	4603      	mov	r3, r0
 80061b4:	b29a      	uxth	r2, r3
 80061b6:	f107 0114 	add.w	r1, r7, #20
 80061ba:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80061be:	68f8      	ldr	r0, [r7, #12]
 80061c0:	f7fc fb04 	bl	80027cc <HAL_UART_Transmit>

	return len;
 80061c4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3748      	adds	r7, #72	; 0x48
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	4603      	mov	r3, r0
 80061d8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80061da:	4b0b      	ldr	r3, [pc, #44]	; (8006208 <SD_CheckStatus+0x38>)
 80061dc:	2201      	movs	r2, #1
 80061de:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80061e0:	f7ff fe40 	bl	8005e64 <BSP_SD_GetCardState>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d107      	bne.n	80061fa <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80061ea:	4b07      	ldr	r3, [pc, #28]	; (8006208 <SD_CheckStatus+0x38>)
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	f023 0301 	bic.w	r3, r3, #1
 80061f4:	b2da      	uxtb	r2, r3
 80061f6:	4b04      	ldr	r3, [pc, #16]	; (8006208 <SD_CheckStatus+0x38>)
 80061f8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80061fa:	4b03      	ldr	r3, [pc, #12]	; (8006208 <SD_CheckStatus+0x38>)
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	b2db      	uxtb	r3, r3
}
 8006200:	4618      	mov	r0, r3
 8006202:	3708      	adds	r7, #8
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	2000001c 	.word	0x2000001c

0800620c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b082      	sub	sp, #8
 8006210:	af00      	add	r7, sp, #0
 8006212:	4603      	mov	r3, r0
 8006214:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 8006216:	4b0b      	ldr	r3, [pc, #44]	; (8006244 <SD_initialize+0x38>)
 8006218:	2201      	movs	r2, #1
 800621a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800621c:	f7ff fdc0 	bl	8005da0 <BSP_SD_Init>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d107      	bne.n	8006236 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8006226:	79fb      	ldrb	r3, [r7, #7]
 8006228:	4618      	mov	r0, r3
 800622a:	f7ff ffd1 	bl	80061d0 <SD_CheckStatus>
 800622e:	4603      	mov	r3, r0
 8006230:	461a      	mov	r2, r3
 8006232:	4b04      	ldr	r3, [pc, #16]	; (8006244 <SD_initialize+0x38>)
 8006234:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8006236:	4b03      	ldr	r3, [pc, #12]	; (8006244 <SD_initialize+0x38>)
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	b2db      	uxtb	r3, r3
}
 800623c:	4618      	mov	r0, r3
 800623e:	3708      	adds	r7, #8
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	2000001c 	.word	0x2000001c

08006248 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	4603      	mov	r3, r0
 8006250:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8006252:	79fb      	ldrb	r3, [r7, #7]
 8006254:	4618      	mov	r0, r3
 8006256:	f7ff ffbb 	bl	80061d0 <SD_CheckStatus>
 800625a:	4603      	mov	r3, r0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3708      	adds	r7, #8
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b086      	sub	sp, #24
 8006268:	af00      	add	r7, sp, #0
 800626a:	60b9      	str	r1, [r7, #8]
 800626c:	607a      	str	r2, [r7, #4]
 800626e:	603b      	str	r3, [r7, #0]
 8006270:	4603      	mov	r3, r0
 8006272:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8006278:	f04f 33ff 	mov.w	r3, #4294967295
 800627c:	683a      	ldr	r2, [r7, #0]
 800627e:	6879      	ldr	r1, [r7, #4]
 8006280:	68b8      	ldr	r0, [r7, #8]
 8006282:	f7ff fdb3 	bl	8005dec <BSP_SD_ReadBlocks>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d107      	bne.n	800629c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800628c:	bf00      	nop
 800628e:	f7ff fde9 	bl	8005e64 <BSP_SD_GetCardState>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d1fa      	bne.n	800628e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8006298:	2300      	movs	r3, #0
 800629a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800629c:	7dfb      	ldrb	r3, [r7, #23]
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3718      	adds	r7, #24
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b086      	sub	sp, #24
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
 80062b0:	603b      	str	r3, [r7, #0]
 80062b2:	4603      	mov	r3, r0
 80062b4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80062ba:	f04f 33ff 	mov.w	r3, #4294967295
 80062be:	683a      	ldr	r2, [r7, #0]
 80062c0:	6879      	ldr	r1, [r7, #4]
 80062c2:	68b8      	ldr	r0, [r7, #8]
 80062c4:	f7ff fdb0 	bl	8005e28 <BSP_SD_WriteBlocks>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d107      	bne.n	80062de <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80062ce:	bf00      	nop
 80062d0:	f7ff fdc8 	bl	8005e64 <BSP_SD_GetCardState>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d1fa      	bne.n	80062d0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80062da:	2300      	movs	r3, #0
 80062dc:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80062de:	7dfb      	ldrb	r3, [r7, #23]
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3718      	adds	r7, #24
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b08c      	sub	sp, #48	; 0x30
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	4603      	mov	r3, r0
 80062f0:	603a      	str	r2, [r7, #0]
 80062f2:	71fb      	strb	r3, [r7, #7]
 80062f4:	460b      	mov	r3, r1
 80062f6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80062fe:	4b25      	ldr	r3, [pc, #148]	; (8006394 <SD_ioctl+0xac>)
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	b2db      	uxtb	r3, r3
 8006304:	f003 0301 	and.w	r3, r3, #1
 8006308:	2b00      	cmp	r3, #0
 800630a:	d001      	beq.n	8006310 <SD_ioctl+0x28>
 800630c:	2303      	movs	r3, #3
 800630e:	e03c      	b.n	800638a <SD_ioctl+0xa2>

  switch (cmd)
 8006310:	79bb      	ldrb	r3, [r7, #6]
 8006312:	2b03      	cmp	r3, #3
 8006314:	d834      	bhi.n	8006380 <SD_ioctl+0x98>
 8006316:	a201      	add	r2, pc, #4	; (adr r2, 800631c <SD_ioctl+0x34>)
 8006318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800631c:	0800632d 	.word	0x0800632d
 8006320:	08006335 	.word	0x08006335
 8006324:	0800634d 	.word	0x0800634d
 8006328:	08006367 	.word	0x08006367
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800632c:	2300      	movs	r3, #0
 800632e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006332:	e028      	b.n	8006386 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006334:	f107 030c 	add.w	r3, r7, #12
 8006338:	4618      	mov	r0, r3
 800633a:	f7ff fda3 	bl	8005e84 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800633e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006344:	2300      	movs	r3, #0
 8006346:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800634a:	e01c      	b.n	8006386 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800634c:	f107 030c 	add.w	r3, r7, #12
 8006350:	4618      	mov	r0, r3
 8006352:	f7ff fd97 	bl	8005e84 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006358:	b29a      	uxth	r2, r3
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800635e:	2300      	movs	r3, #0
 8006360:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006364:	e00f      	b.n	8006386 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006366:	f107 030c 	add.w	r3, r7, #12
 800636a:	4618      	mov	r0, r3
 800636c:	f7ff fd8a 	bl	8005e84 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006372:	0a5a      	lsrs	r2, r3, #9
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006378:	2300      	movs	r3, #0
 800637a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800637e:	e002      	b.n	8006386 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006380:	2304      	movs	r3, #4
 8006382:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8006386:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800638a:	4618      	mov	r0, r3
 800638c:	3730      	adds	r7, #48	; 0x30
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	2000001c 	.word	0x2000001c

08006398 <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8006398:	b480      	push	{r7}
 800639a:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 800639c:	4b0c      	ldr	r3, [pc, #48]	; (80063d0 <MX_SDIO_SD_Init+0x38>)
 800639e:	4a0d      	ldr	r2, [pc, #52]	; (80063d4 <MX_SDIO_SD_Init+0x3c>)
 80063a0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80063a2:	4b0b      	ldr	r3, [pc, #44]	; (80063d0 <MX_SDIO_SD_Init+0x38>)
 80063a4:	2200      	movs	r2, #0
 80063a6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80063a8:	4b09      	ldr	r3, [pc, #36]	; (80063d0 <MX_SDIO_SD_Init+0x38>)
 80063aa:	2200      	movs	r2, #0
 80063ac:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80063ae:	4b08      	ldr	r3, [pc, #32]	; (80063d0 <MX_SDIO_SD_Init+0x38>)
 80063b0:	2200      	movs	r2, #0
 80063b2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80063b4:	4b06      	ldr	r3, [pc, #24]	; (80063d0 <MX_SDIO_SD_Init+0x38>)
 80063b6:	2200      	movs	r2, #0
 80063b8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80063ba:	4b05      	ldr	r3, [pc, #20]	; (80063d0 <MX_SDIO_SD_Init+0x38>)
 80063bc:	2200      	movs	r2, #0
 80063be:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80063c0:	4b03      	ldr	r3, [pc, #12]	; (80063d0 <MX_SDIO_SD_Init+0x38>)
 80063c2:	2200      	movs	r2, #0
 80063c4:	619a      	str	r2, [r3, #24]

}
 80063c6:	bf00      	nop
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr
 80063d0:	20005258 	.word	0x20005258
 80063d4:	40012c00 	.word	0x40012c00

080063d8 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b08a      	sub	sp, #40	; 0x28
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063e0:	f107 0314 	add.w	r3, r7, #20
 80063e4:	2200      	movs	r2, #0
 80063e6:	601a      	str	r2, [r3, #0]
 80063e8:	605a      	str	r2, [r3, #4]
 80063ea:	609a      	str	r2, [r3, #8]
 80063ec:	60da      	str	r2, [r3, #12]
 80063ee:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a31      	ldr	r2, [pc, #196]	; (80064bc <HAL_SD_MspInit+0xe4>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d15b      	bne.n	80064b2 <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80063fa:	2300      	movs	r3, #0
 80063fc:	613b      	str	r3, [r7, #16]
 80063fe:	4b30      	ldr	r3, [pc, #192]	; (80064c0 <HAL_SD_MspInit+0xe8>)
 8006400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006402:	4a2f      	ldr	r2, [pc, #188]	; (80064c0 <HAL_SD_MspInit+0xe8>)
 8006404:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006408:	6453      	str	r3, [r2, #68]	; 0x44
 800640a:	4b2d      	ldr	r3, [pc, #180]	; (80064c0 <HAL_SD_MspInit+0xe8>)
 800640c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800640e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006412:	613b      	str	r3, [r7, #16]
 8006414:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006416:	2300      	movs	r3, #0
 8006418:	60fb      	str	r3, [r7, #12]
 800641a:	4b29      	ldr	r3, [pc, #164]	; (80064c0 <HAL_SD_MspInit+0xe8>)
 800641c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800641e:	4a28      	ldr	r2, [pc, #160]	; (80064c0 <HAL_SD_MspInit+0xe8>)
 8006420:	f043 0304 	orr.w	r3, r3, #4
 8006424:	6313      	str	r3, [r2, #48]	; 0x30
 8006426:	4b26      	ldr	r3, [pc, #152]	; (80064c0 <HAL_SD_MspInit+0xe8>)
 8006428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800642a:	f003 0304 	and.w	r3, r3, #4
 800642e:	60fb      	str	r3, [r7, #12]
 8006430:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006432:	2300      	movs	r3, #0
 8006434:	60bb      	str	r3, [r7, #8]
 8006436:	4b22      	ldr	r3, [pc, #136]	; (80064c0 <HAL_SD_MspInit+0xe8>)
 8006438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643a:	4a21      	ldr	r2, [pc, #132]	; (80064c0 <HAL_SD_MspInit+0xe8>)
 800643c:	f043 0308 	orr.w	r3, r3, #8
 8006440:	6313      	str	r3, [r2, #48]	; 0x30
 8006442:	4b1f      	ldr	r3, [pc, #124]	; (80064c0 <HAL_SD_MspInit+0xe8>)
 8006444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006446:	f003 0308 	and.w	r3, r3, #8
 800644a:	60bb      	str	r3, [r7, #8]
 800644c:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800644e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8006452:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006454:	2302      	movs	r3, #2
 8006456:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006458:	2301      	movs	r3, #1
 800645a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800645c:	2303      	movs	r3, #3
 800645e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006460:	230c      	movs	r3, #12
 8006462:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006464:	f107 0314 	add.w	r3, r7, #20
 8006468:	4619      	mov	r1, r3
 800646a:	4816      	ldr	r0, [pc, #88]	; (80064c4 <HAL_SD_MspInit+0xec>)
 800646c:	f7fa fa02 	bl	8000874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006470:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006474:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006476:	2302      	movs	r3, #2
 8006478:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800647a:	2300      	movs	r3, #0
 800647c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800647e:	2303      	movs	r3, #3
 8006480:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006482:	230c      	movs	r3, #12
 8006484:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006486:	f107 0314 	add.w	r3, r7, #20
 800648a:	4619      	mov	r1, r3
 800648c:	480d      	ldr	r0, [pc, #52]	; (80064c4 <HAL_SD_MspInit+0xec>)
 800648e:	f7fa f9f1 	bl	8000874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006492:	2304      	movs	r3, #4
 8006494:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006496:	2302      	movs	r3, #2
 8006498:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800649a:	2301      	movs	r3, #1
 800649c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800649e:	2303      	movs	r3, #3
 80064a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80064a2:	230c      	movs	r3, #12
 80064a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80064a6:	f107 0314 	add.w	r3, r7, #20
 80064aa:	4619      	mov	r1, r3
 80064ac:	4806      	ldr	r0, [pc, #24]	; (80064c8 <HAL_SD_MspInit+0xf0>)
 80064ae:	f7fa f9e1 	bl	8000874 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 80064b2:	bf00      	nop
 80064b4:	3728      	adds	r7, #40	; 0x28
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	40012c00 	.word	0x40012c00
 80064c0:	40023800 	.word	0x40023800
 80064c4:	40020800 	.word	0x40020800
 80064c8:	40020c00 	.word	0x40020c00

080064cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064d2:	2300      	movs	r3, #0
 80064d4:	607b      	str	r3, [r7, #4]
 80064d6:	4b10      	ldr	r3, [pc, #64]	; (8006518 <HAL_MspInit+0x4c>)
 80064d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064da:	4a0f      	ldr	r2, [pc, #60]	; (8006518 <HAL_MspInit+0x4c>)
 80064dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80064e0:	6453      	str	r3, [r2, #68]	; 0x44
 80064e2:	4b0d      	ldr	r3, [pc, #52]	; (8006518 <HAL_MspInit+0x4c>)
 80064e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064ea:	607b      	str	r3, [r7, #4]
 80064ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80064ee:	2300      	movs	r3, #0
 80064f0:	603b      	str	r3, [r7, #0]
 80064f2:	4b09      	ldr	r3, [pc, #36]	; (8006518 <HAL_MspInit+0x4c>)
 80064f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f6:	4a08      	ldr	r2, [pc, #32]	; (8006518 <HAL_MspInit+0x4c>)
 80064f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064fc:	6413      	str	r3, [r2, #64]	; 0x40
 80064fe:	4b06      	ldr	r3, [pc, #24]	; (8006518 <HAL_MspInit+0x4c>)
 8006500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006506:	603b      	str	r3, [r7, #0]
 8006508:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800650a:	bf00      	nop
 800650c:	370c      	adds	r7, #12
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop
 8006518:	40023800 	.word	0x40023800

0800651c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800651c:	b480      	push	{r7}
 800651e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006520:	bf00      	nop
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr

0800652a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800652a:	b480      	push	{r7}
 800652c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800652e:	e7fe      	b.n	800652e <HardFault_Handler+0x4>

08006530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006530:	b480      	push	{r7}
 8006532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006534:	e7fe      	b.n	8006534 <MemManage_Handler+0x4>

08006536 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006536:	b480      	push	{r7}
 8006538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800653a:	e7fe      	b.n	800653a <BusFault_Handler+0x4>

0800653c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800653c:	b480      	push	{r7}
 800653e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006540:	e7fe      	b.n	8006540 <UsageFault_Handler+0x4>

08006542 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006542:	b480      	push	{r7}
 8006544:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006546:	bf00      	nop
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006550:	b480      	push	{r7}
 8006552:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006554:	bf00      	nop
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr

0800655e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800655e:	b480      	push	{r7}
 8006560:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006562:	bf00      	nop
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006570:	f7fa f858 	bl	8000624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006574:	bf00      	nop
 8006576:	bd80      	pop	{r7, pc}

08006578 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006580:	4b11      	ldr	r3, [pc, #68]	; (80065c8 <_sbrk+0x50>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d102      	bne.n	800658e <_sbrk+0x16>
		heap_end = &end;
 8006588:	4b0f      	ldr	r3, [pc, #60]	; (80065c8 <_sbrk+0x50>)
 800658a:	4a10      	ldr	r2, [pc, #64]	; (80065cc <_sbrk+0x54>)
 800658c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800658e:	4b0e      	ldr	r3, [pc, #56]	; (80065c8 <_sbrk+0x50>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006594:	4b0c      	ldr	r3, [pc, #48]	; (80065c8 <_sbrk+0x50>)
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4413      	add	r3, r2
 800659c:	466a      	mov	r2, sp
 800659e:	4293      	cmp	r3, r2
 80065a0:	d907      	bls.n	80065b2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80065a2:	f000 f8e7 	bl	8006774 <__errno>
 80065a6:	4602      	mov	r2, r0
 80065a8:	230c      	movs	r3, #12
 80065aa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80065ac:	f04f 33ff 	mov.w	r3, #4294967295
 80065b0:	e006      	b.n	80065c0 <_sbrk+0x48>
	}

	heap_end += incr;
 80065b2:	4b05      	ldr	r3, [pc, #20]	; (80065c8 <_sbrk+0x50>)
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4413      	add	r3, r2
 80065ba:	4a03      	ldr	r2, [pc, #12]	; (80065c8 <_sbrk+0x50>)
 80065bc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80065be:	68fb      	ldr	r3, [r7, #12]
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3710      	adds	r7, #16
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	200000d8 	.word	0x200000d8
 80065cc:	20005320 	.word	0x20005320

080065d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80065d0:	b480      	push	{r7}
 80065d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80065d4:	4b16      	ldr	r3, [pc, #88]	; (8006630 <SystemInit+0x60>)
 80065d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065da:	4a15      	ldr	r2, [pc, #84]	; (8006630 <SystemInit+0x60>)
 80065dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80065e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80065e4:	4b13      	ldr	r3, [pc, #76]	; (8006634 <SystemInit+0x64>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a12      	ldr	r2, [pc, #72]	; (8006634 <SystemInit+0x64>)
 80065ea:	f043 0301 	orr.w	r3, r3, #1
 80065ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80065f0:	4b10      	ldr	r3, [pc, #64]	; (8006634 <SystemInit+0x64>)
 80065f2:	2200      	movs	r2, #0
 80065f4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80065f6:	4b0f      	ldr	r3, [pc, #60]	; (8006634 <SystemInit+0x64>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a0e      	ldr	r2, [pc, #56]	; (8006634 <SystemInit+0x64>)
 80065fc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8006600:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006604:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8006606:	4b0b      	ldr	r3, [pc, #44]	; (8006634 <SystemInit+0x64>)
 8006608:	4a0b      	ldr	r2, [pc, #44]	; (8006638 <SystemInit+0x68>)
 800660a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800660c:	4b09      	ldr	r3, [pc, #36]	; (8006634 <SystemInit+0x64>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a08      	ldr	r2, [pc, #32]	; (8006634 <SystemInit+0x64>)
 8006612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006616:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8006618:	4b06      	ldr	r3, [pc, #24]	; (8006634 <SystemInit+0x64>)
 800661a:	2200      	movs	r2, #0
 800661c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800661e:	4b04      	ldr	r3, [pc, #16]	; (8006630 <SystemInit+0x60>)
 8006620:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006624:	609a      	str	r2, [r3, #8]
#endif
}
 8006626:	bf00      	nop
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr
 8006630:	e000ed00 	.word	0xe000ed00
 8006634:	40023800 	.word	0x40023800
 8006638:	24003010 	.word	0x24003010

0800663c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8006640:	4b11      	ldr	r3, [pc, #68]	; (8006688 <MX_USART2_UART_Init+0x4c>)
 8006642:	4a12      	ldr	r2, [pc, #72]	; (800668c <MX_USART2_UART_Init+0x50>)
 8006644:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006646:	4b10      	ldr	r3, [pc, #64]	; (8006688 <MX_USART2_UART_Init+0x4c>)
 8006648:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800664c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800664e:	4b0e      	ldr	r3, [pc, #56]	; (8006688 <MX_USART2_UART_Init+0x4c>)
 8006650:	2200      	movs	r2, #0
 8006652:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006654:	4b0c      	ldr	r3, [pc, #48]	; (8006688 <MX_USART2_UART_Init+0x4c>)
 8006656:	2200      	movs	r2, #0
 8006658:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800665a:	4b0b      	ldr	r3, [pc, #44]	; (8006688 <MX_USART2_UART_Init+0x4c>)
 800665c:	2200      	movs	r2, #0
 800665e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006660:	4b09      	ldr	r3, [pc, #36]	; (8006688 <MX_USART2_UART_Init+0x4c>)
 8006662:	220c      	movs	r2, #12
 8006664:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006666:	4b08      	ldr	r3, [pc, #32]	; (8006688 <MX_USART2_UART_Init+0x4c>)
 8006668:	2200      	movs	r2, #0
 800666a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800666c:	4b06      	ldr	r3, [pc, #24]	; (8006688 <MX_USART2_UART_Init+0x4c>)
 800666e:	2200      	movs	r2, #0
 8006670:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006672:	4805      	ldr	r0, [pc, #20]	; (8006688 <MX_USART2_UART_Init+0x4c>)
 8006674:	f7fc f85d 	bl	8002732 <HAL_UART_Init>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d001      	beq.n	8006682 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800667e:	f7ff fd5f 	bl	8006140 <Error_Handler>
  }

}
 8006682:	bf00      	nop
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	200052dc 	.word	0x200052dc
 800668c:	40004400 	.word	0x40004400

08006690 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b08a      	sub	sp, #40	; 0x28
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006698:	f107 0314 	add.w	r3, r7, #20
 800669c:	2200      	movs	r2, #0
 800669e:	601a      	str	r2, [r3, #0]
 80066a0:	605a      	str	r2, [r3, #4]
 80066a2:	609a      	str	r2, [r3, #8]
 80066a4:	60da      	str	r2, [r3, #12]
 80066a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a19      	ldr	r2, [pc, #100]	; (8006714 <HAL_UART_MspInit+0x84>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d12b      	bne.n	800670a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80066b2:	2300      	movs	r3, #0
 80066b4:	613b      	str	r3, [r7, #16]
 80066b6:	4b18      	ldr	r3, [pc, #96]	; (8006718 <HAL_UART_MspInit+0x88>)
 80066b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ba:	4a17      	ldr	r2, [pc, #92]	; (8006718 <HAL_UART_MspInit+0x88>)
 80066bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066c0:	6413      	str	r3, [r2, #64]	; 0x40
 80066c2:	4b15      	ldr	r3, [pc, #84]	; (8006718 <HAL_UART_MspInit+0x88>)
 80066c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066ca:	613b      	str	r3, [r7, #16]
 80066cc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80066ce:	2300      	movs	r3, #0
 80066d0:	60fb      	str	r3, [r7, #12]
 80066d2:	4b11      	ldr	r3, [pc, #68]	; (8006718 <HAL_UART_MspInit+0x88>)
 80066d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d6:	4a10      	ldr	r2, [pc, #64]	; (8006718 <HAL_UART_MspInit+0x88>)
 80066d8:	f043 0301 	orr.w	r3, r3, #1
 80066dc:	6313      	str	r3, [r2, #48]	; 0x30
 80066de:	4b0e      	ldr	r3, [pc, #56]	; (8006718 <HAL_UART_MspInit+0x88>)
 80066e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e2:	f003 0301 	and.w	r3, r3, #1
 80066e6:	60fb      	str	r3, [r7, #12]
 80066e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80066ea:	230c      	movs	r3, #12
 80066ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066ee:	2302      	movs	r3, #2
 80066f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80066f2:	2301      	movs	r3, #1
 80066f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066f6:	2303      	movs	r3, #3
 80066f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80066fa:	2307      	movs	r3, #7
 80066fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066fe:	f107 0314 	add.w	r3, r7, #20
 8006702:	4619      	mov	r1, r3
 8006704:	4805      	ldr	r0, [pc, #20]	; (800671c <HAL_UART_MspInit+0x8c>)
 8006706:	f7fa f8b5 	bl	8000874 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800670a:	bf00      	nop
 800670c:	3728      	adds	r7, #40	; 0x28
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	40004400 	.word	0x40004400
 8006718:	40023800 	.word	0x40023800
 800671c:	40020000 	.word	0x40020000

08006720 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 8006720:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006758 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006724:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006726:	e003      	b.n	8006730 <LoopCopyDataInit>

08006728 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006728:	4b0c      	ldr	r3, [pc, #48]	; (800675c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800672a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800672c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800672e:	3104      	adds	r1, #4

08006730 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006730:	480b      	ldr	r0, [pc, #44]	; (8006760 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006732:	4b0c      	ldr	r3, [pc, #48]	; (8006764 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006734:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006736:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006738:	d3f6      	bcc.n	8006728 <CopyDataInit>
  ldr  r2, =_sbss
 800673a:	4a0b      	ldr	r2, [pc, #44]	; (8006768 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800673c:	e002      	b.n	8006744 <LoopFillZerobss>

0800673e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800673e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006740:	f842 3b04 	str.w	r3, [r2], #4

08006744 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006744:	4b09      	ldr	r3, [pc, #36]	; (800676c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006746:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006748:	d3f9      	bcc.n	800673e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800674a:	f7ff ff41 	bl	80065d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800674e:	f000 f817 	bl	8006780 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006752:	f7ff fc2d 	bl	8005fb0 <main>
  bx  lr    
 8006756:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 8006758:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800675c:	0800717c 	.word	0x0800717c
  ldr  r0, =_sdata
 8006760:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006764:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 8006768:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 800676c:	20005320 	.word	0x20005320

08006770 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006770:	e7fe      	b.n	8006770 <ADC_IRQHandler>
	...

08006774 <__errno>:
 8006774:	4b01      	ldr	r3, [pc, #4]	; (800677c <__errno+0x8>)
 8006776:	6818      	ldr	r0, [r3, #0]
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	20000024 	.word	0x20000024

08006780 <__libc_init_array>:
 8006780:	b570      	push	{r4, r5, r6, lr}
 8006782:	4e0d      	ldr	r6, [pc, #52]	; (80067b8 <__libc_init_array+0x38>)
 8006784:	4c0d      	ldr	r4, [pc, #52]	; (80067bc <__libc_init_array+0x3c>)
 8006786:	1ba4      	subs	r4, r4, r6
 8006788:	10a4      	asrs	r4, r4, #2
 800678a:	2500      	movs	r5, #0
 800678c:	42a5      	cmp	r5, r4
 800678e:	d109      	bne.n	80067a4 <__libc_init_array+0x24>
 8006790:	4e0b      	ldr	r6, [pc, #44]	; (80067c0 <__libc_init_array+0x40>)
 8006792:	4c0c      	ldr	r4, [pc, #48]	; (80067c4 <__libc_init_array+0x44>)
 8006794:	f000 fc26 	bl	8006fe4 <_init>
 8006798:	1ba4      	subs	r4, r4, r6
 800679a:	10a4      	asrs	r4, r4, #2
 800679c:	2500      	movs	r5, #0
 800679e:	42a5      	cmp	r5, r4
 80067a0:	d105      	bne.n	80067ae <__libc_init_array+0x2e>
 80067a2:	bd70      	pop	{r4, r5, r6, pc}
 80067a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80067a8:	4798      	blx	r3
 80067aa:	3501      	adds	r5, #1
 80067ac:	e7ee      	b.n	800678c <__libc_init_array+0xc>
 80067ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80067b2:	4798      	blx	r3
 80067b4:	3501      	adds	r5, #1
 80067b6:	e7f2      	b.n	800679e <__libc_init_array+0x1e>
 80067b8:	08007174 	.word	0x08007174
 80067bc:	08007174 	.word	0x08007174
 80067c0:	08007174 	.word	0x08007174
 80067c4:	08007178 	.word	0x08007178

080067c8 <memset>:
 80067c8:	4402      	add	r2, r0
 80067ca:	4603      	mov	r3, r0
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d100      	bne.n	80067d2 <memset+0xa>
 80067d0:	4770      	bx	lr
 80067d2:	f803 1b01 	strb.w	r1, [r3], #1
 80067d6:	e7f9      	b.n	80067cc <memset+0x4>

080067d8 <_vsiprintf_r>:
 80067d8:	b500      	push	{lr}
 80067da:	b09b      	sub	sp, #108	; 0x6c
 80067dc:	9100      	str	r1, [sp, #0]
 80067de:	9104      	str	r1, [sp, #16]
 80067e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80067e4:	9105      	str	r1, [sp, #20]
 80067e6:	9102      	str	r1, [sp, #8]
 80067e8:	4905      	ldr	r1, [pc, #20]	; (8006800 <_vsiprintf_r+0x28>)
 80067ea:	9103      	str	r1, [sp, #12]
 80067ec:	4669      	mov	r1, sp
 80067ee:	f000 f86d 	bl	80068cc <_svfiprintf_r>
 80067f2:	9b00      	ldr	r3, [sp, #0]
 80067f4:	2200      	movs	r2, #0
 80067f6:	701a      	strb	r2, [r3, #0]
 80067f8:	b01b      	add	sp, #108	; 0x6c
 80067fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80067fe:	bf00      	nop
 8006800:	ffff0208 	.word	0xffff0208

08006804 <vsiprintf>:
 8006804:	4613      	mov	r3, r2
 8006806:	460a      	mov	r2, r1
 8006808:	4601      	mov	r1, r0
 800680a:	4802      	ldr	r0, [pc, #8]	; (8006814 <vsiprintf+0x10>)
 800680c:	6800      	ldr	r0, [r0, #0]
 800680e:	f7ff bfe3 	b.w	80067d8 <_vsiprintf_r>
 8006812:	bf00      	nop
 8006814:	20000024 	.word	0x20000024

08006818 <__ssputs_r>:
 8006818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800681c:	688e      	ldr	r6, [r1, #8]
 800681e:	429e      	cmp	r6, r3
 8006820:	4682      	mov	sl, r0
 8006822:	460c      	mov	r4, r1
 8006824:	4690      	mov	r8, r2
 8006826:	4699      	mov	r9, r3
 8006828:	d837      	bhi.n	800689a <__ssputs_r+0x82>
 800682a:	898a      	ldrh	r2, [r1, #12]
 800682c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006830:	d031      	beq.n	8006896 <__ssputs_r+0x7e>
 8006832:	6825      	ldr	r5, [r4, #0]
 8006834:	6909      	ldr	r1, [r1, #16]
 8006836:	1a6f      	subs	r7, r5, r1
 8006838:	6965      	ldr	r5, [r4, #20]
 800683a:	2302      	movs	r3, #2
 800683c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006840:	fb95 f5f3 	sdiv	r5, r5, r3
 8006844:	f109 0301 	add.w	r3, r9, #1
 8006848:	443b      	add	r3, r7
 800684a:	429d      	cmp	r5, r3
 800684c:	bf38      	it	cc
 800684e:	461d      	movcc	r5, r3
 8006850:	0553      	lsls	r3, r2, #21
 8006852:	d530      	bpl.n	80068b6 <__ssputs_r+0x9e>
 8006854:	4629      	mov	r1, r5
 8006856:	f000 fb2b 	bl	8006eb0 <_malloc_r>
 800685a:	4606      	mov	r6, r0
 800685c:	b950      	cbnz	r0, 8006874 <__ssputs_r+0x5c>
 800685e:	230c      	movs	r3, #12
 8006860:	f8ca 3000 	str.w	r3, [sl]
 8006864:	89a3      	ldrh	r3, [r4, #12]
 8006866:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800686a:	81a3      	strh	r3, [r4, #12]
 800686c:	f04f 30ff 	mov.w	r0, #4294967295
 8006870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006874:	463a      	mov	r2, r7
 8006876:	6921      	ldr	r1, [r4, #16]
 8006878:	f000 faa8 	bl	8006dcc <memcpy>
 800687c:	89a3      	ldrh	r3, [r4, #12]
 800687e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006882:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006886:	81a3      	strh	r3, [r4, #12]
 8006888:	6126      	str	r6, [r4, #16]
 800688a:	6165      	str	r5, [r4, #20]
 800688c:	443e      	add	r6, r7
 800688e:	1bed      	subs	r5, r5, r7
 8006890:	6026      	str	r6, [r4, #0]
 8006892:	60a5      	str	r5, [r4, #8]
 8006894:	464e      	mov	r6, r9
 8006896:	454e      	cmp	r6, r9
 8006898:	d900      	bls.n	800689c <__ssputs_r+0x84>
 800689a:	464e      	mov	r6, r9
 800689c:	4632      	mov	r2, r6
 800689e:	4641      	mov	r1, r8
 80068a0:	6820      	ldr	r0, [r4, #0]
 80068a2:	f000 fa9e 	bl	8006de2 <memmove>
 80068a6:	68a3      	ldr	r3, [r4, #8]
 80068a8:	1b9b      	subs	r3, r3, r6
 80068aa:	60a3      	str	r3, [r4, #8]
 80068ac:	6823      	ldr	r3, [r4, #0]
 80068ae:	441e      	add	r6, r3
 80068b0:	6026      	str	r6, [r4, #0]
 80068b2:	2000      	movs	r0, #0
 80068b4:	e7dc      	b.n	8006870 <__ssputs_r+0x58>
 80068b6:	462a      	mov	r2, r5
 80068b8:	f000 fb54 	bl	8006f64 <_realloc_r>
 80068bc:	4606      	mov	r6, r0
 80068be:	2800      	cmp	r0, #0
 80068c0:	d1e2      	bne.n	8006888 <__ssputs_r+0x70>
 80068c2:	6921      	ldr	r1, [r4, #16]
 80068c4:	4650      	mov	r0, sl
 80068c6:	f000 faa5 	bl	8006e14 <_free_r>
 80068ca:	e7c8      	b.n	800685e <__ssputs_r+0x46>

080068cc <_svfiprintf_r>:
 80068cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068d0:	461d      	mov	r5, r3
 80068d2:	898b      	ldrh	r3, [r1, #12]
 80068d4:	061f      	lsls	r7, r3, #24
 80068d6:	b09d      	sub	sp, #116	; 0x74
 80068d8:	4680      	mov	r8, r0
 80068da:	460c      	mov	r4, r1
 80068dc:	4616      	mov	r6, r2
 80068de:	d50f      	bpl.n	8006900 <_svfiprintf_r+0x34>
 80068e0:	690b      	ldr	r3, [r1, #16]
 80068e2:	b96b      	cbnz	r3, 8006900 <_svfiprintf_r+0x34>
 80068e4:	2140      	movs	r1, #64	; 0x40
 80068e6:	f000 fae3 	bl	8006eb0 <_malloc_r>
 80068ea:	6020      	str	r0, [r4, #0]
 80068ec:	6120      	str	r0, [r4, #16]
 80068ee:	b928      	cbnz	r0, 80068fc <_svfiprintf_r+0x30>
 80068f0:	230c      	movs	r3, #12
 80068f2:	f8c8 3000 	str.w	r3, [r8]
 80068f6:	f04f 30ff 	mov.w	r0, #4294967295
 80068fa:	e0c8      	b.n	8006a8e <_svfiprintf_r+0x1c2>
 80068fc:	2340      	movs	r3, #64	; 0x40
 80068fe:	6163      	str	r3, [r4, #20]
 8006900:	2300      	movs	r3, #0
 8006902:	9309      	str	r3, [sp, #36]	; 0x24
 8006904:	2320      	movs	r3, #32
 8006906:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800690a:	2330      	movs	r3, #48	; 0x30
 800690c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006910:	9503      	str	r5, [sp, #12]
 8006912:	f04f 0b01 	mov.w	fp, #1
 8006916:	4637      	mov	r7, r6
 8006918:	463d      	mov	r5, r7
 800691a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800691e:	b10b      	cbz	r3, 8006924 <_svfiprintf_r+0x58>
 8006920:	2b25      	cmp	r3, #37	; 0x25
 8006922:	d13e      	bne.n	80069a2 <_svfiprintf_r+0xd6>
 8006924:	ebb7 0a06 	subs.w	sl, r7, r6
 8006928:	d00b      	beq.n	8006942 <_svfiprintf_r+0x76>
 800692a:	4653      	mov	r3, sl
 800692c:	4632      	mov	r2, r6
 800692e:	4621      	mov	r1, r4
 8006930:	4640      	mov	r0, r8
 8006932:	f7ff ff71 	bl	8006818 <__ssputs_r>
 8006936:	3001      	adds	r0, #1
 8006938:	f000 80a4 	beq.w	8006a84 <_svfiprintf_r+0x1b8>
 800693c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800693e:	4453      	add	r3, sl
 8006940:	9309      	str	r3, [sp, #36]	; 0x24
 8006942:	783b      	ldrb	r3, [r7, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	f000 809d 	beq.w	8006a84 <_svfiprintf_r+0x1b8>
 800694a:	2300      	movs	r3, #0
 800694c:	f04f 32ff 	mov.w	r2, #4294967295
 8006950:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006954:	9304      	str	r3, [sp, #16]
 8006956:	9307      	str	r3, [sp, #28]
 8006958:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800695c:	931a      	str	r3, [sp, #104]	; 0x68
 800695e:	462f      	mov	r7, r5
 8006960:	2205      	movs	r2, #5
 8006962:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006966:	4850      	ldr	r0, [pc, #320]	; (8006aa8 <_svfiprintf_r+0x1dc>)
 8006968:	f7f9 fc3a 	bl	80001e0 <memchr>
 800696c:	9b04      	ldr	r3, [sp, #16]
 800696e:	b9d0      	cbnz	r0, 80069a6 <_svfiprintf_r+0xda>
 8006970:	06d9      	lsls	r1, r3, #27
 8006972:	bf44      	itt	mi
 8006974:	2220      	movmi	r2, #32
 8006976:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800697a:	071a      	lsls	r2, r3, #28
 800697c:	bf44      	itt	mi
 800697e:	222b      	movmi	r2, #43	; 0x2b
 8006980:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006984:	782a      	ldrb	r2, [r5, #0]
 8006986:	2a2a      	cmp	r2, #42	; 0x2a
 8006988:	d015      	beq.n	80069b6 <_svfiprintf_r+0xea>
 800698a:	9a07      	ldr	r2, [sp, #28]
 800698c:	462f      	mov	r7, r5
 800698e:	2000      	movs	r0, #0
 8006990:	250a      	movs	r5, #10
 8006992:	4639      	mov	r1, r7
 8006994:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006998:	3b30      	subs	r3, #48	; 0x30
 800699a:	2b09      	cmp	r3, #9
 800699c:	d94d      	bls.n	8006a3a <_svfiprintf_r+0x16e>
 800699e:	b1b8      	cbz	r0, 80069d0 <_svfiprintf_r+0x104>
 80069a0:	e00f      	b.n	80069c2 <_svfiprintf_r+0xf6>
 80069a2:	462f      	mov	r7, r5
 80069a4:	e7b8      	b.n	8006918 <_svfiprintf_r+0x4c>
 80069a6:	4a40      	ldr	r2, [pc, #256]	; (8006aa8 <_svfiprintf_r+0x1dc>)
 80069a8:	1a80      	subs	r0, r0, r2
 80069aa:	fa0b f000 	lsl.w	r0, fp, r0
 80069ae:	4318      	orrs	r0, r3
 80069b0:	9004      	str	r0, [sp, #16]
 80069b2:	463d      	mov	r5, r7
 80069b4:	e7d3      	b.n	800695e <_svfiprintf_r+0x92>
 80069b6:	9a03      	ldr	r2, [sp, #12]
 80069b8:	1d11      	adds	r1, r2, #4
 80069ba:	6812      	ldr	r2, [r2, #0]
 80069bc:	9103      	str	r1, [sp, #12]
 80069be:	2a00      	cmp	r2, #0
 80069c0:	db01      	blt.n	80069c6 <_svfiprintf_r+0xfa>
 80069c2:	9207      	str	r2, [sp, #28]
 80069c4:	e004      	b.n	80069d0 <_svfiprintf_r+0x104>
 80069c6:	4252      	negs	r2, r2
 80069c8:	f043 0302 	orr.w	r3, r3, #2
 80069cc:	9207      	str	r2, [sp, #28]
 80069ce:	9304      	str	r3, [sp, #16]
 80069d0:	783b      	ldrb	r3, [r7, #0]
 80069d2:	2b2e      	cmp	r3, #46	; 0x2e
 80069d4:	d10c      	bne.n	80069f0 <_svfiprintf_r+0x124>
 80069d6:	787b      	ldrb	r3, [r7, #1]
 80069d8:	2b2a      	cmp	r3, #42	; 0x2a
 80069da:	d133      	bne.n	8006a44 <_svfiprintf_r+0x178>
 80069dc:	9b03      	ldr	r3, [sp, #12]
 80069de:	1d1a      	adds	r2, r3, #4
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	9203      	str	r2, [sp, #12]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	bfb8      	it	lt
 80069e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80069ec:	3702      	adds	r7, #2
 80069ee:	9305      	str	r3, [sp, #20]
 80069f0:	4d2e      	ldr	r5, [pc, #184]	; (8006aac <_svfiprintf_r+0x1e0>)
 80069f2:	7839      	ldrb	r1, [r7, #0]
 80069f4:	2203      	movs	r2, #3
 80069f6:	4628      	mov	r0, r5
 80069f8:	f7f9 fbf2 	bl	80001e0 <memchr>
 80069fc:	b138      	cbz	r0, 8006a0e <_svfiprintf_r+0x142>
 80069fe:	2340      	movs	r3, #64	; 0x40
 8006a00:	1b40      	subs	r0, r0, r5
 8006a02:	fa03 f000 	lsl.w	r0, r3, r0
 8006a06:	9b04      	ldr	r3, [sp, #16]
 8006a08:	4303      	orrs	r3, r0
 8006a0a:	3701      	adds	r7, #1
 8006a0c:	9304      	str	r3, [sp, #16]
 8006a0e:	7839      	ldrb	r1, [r7, #0]
 8006a10:	4827      	ldr	r0, [pc, #156]	; (8006ab0 <_svfiprintf_r+0x1e4>)
 8006a12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a16:	2206      	movs	r2, #6
 8006a18:	1c7e      	adds	r6, r7, #1
 8006a1a:	f7f9 fbe1 	bl	80001e0 <memchr>
 8006a1e:	2800      	cmp	r0, #0
 8006a20:	d038      	beq.n	8006a94 <_svfiprintf_r+0x1c8>
 8006a22:	4b24      	ldr	r3, [pc, #144]	; (8006ab4 <_svfiprintf_r+0x1e8>)
 8006a24:	bb13      	cbnz	r3, 8006a6c <_svfiprintf_r+0x1a0>
 8006a26:	9b03      	ldr	r3, [sp, #12]
 8006a28:	3307      	adds	r3, #7
 8006a2a:	f023 0307 	bic.w	r3, r3, #7
 8006a2e:	3308      	adds	r3, #8
 8006a30:	9303      	str	r3, [sp, #12]
 8006a32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a34:	444b      	add	r3, r9
 8006a36:	9309      	str	r3, [sp, #36]	; 0x24
 8006a38:	e76d      	b.n	8006916 <_svfiprintf_r+0x4a>
 8006a3a:	fb05 3202 	mla	r2, r5, r2, r3
 8006a3e:	2001      	movs	r0, #1
 8006a40:	460f      	mov	r7, r1
 8006a42:	e7a6      	b.n	8006992 <_svfiprintf_r+0xc6>
 8006a44:	2300      	movs	r3, #0
 8006a46:	3701      	adds	r7, #1
 8006a48:	9305      	str	r3, [sp, #20]
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	250a      	movs	r5, #10
 8006a4e:	4638      	mov	r0, r7
 8006a50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a54:	3a30      	subs	r2, #48	; 0x30
 8006a56:	2a09      	cmp	r2, #9
 8006a58:	d903      	bls.n	8006a62 <_svfiprintf_r+0x196>
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d0c8      	beq.n	80069f0 <_svfiprintf_r+0x124>
 8006a5e:	9105      	str	r1, [sp, #20]
 8006a60:	e7c6      	b.n	80069f0 <_svfiprintf_r+0x124>
 8006a62:	fb05 2101 	mla	r1, r5, r1, r2
 8006a66:	2301      	movs	r3, #1
 8006a68:	4607      	mov	r7, r0
 8006a6a:	e7f0      	b.n	8006a4e <_svfiprintf_r+0x182>
 8006a6c:	ab03      	add	r3, sp, #12
 8006a6e:	9300      	str	r3, [sp, #0]
 8006a70:	4622      	mov	r2, r4
 8006a72:	4b11      	ldr	r3, [pc, #68]	; (8006ab8 <_svfiprintf_r+0x1ec>)
 8006a74:	a904      	add	r1, sp, #16
 8006a76:	4640      	mov	r0, r8
 8006a78:	f3af 8000 	nop.w
 8006a7c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006a80:	4681      	mov	r9, r0
 8006a82:	d1d6      	bne.n	8006a32 <_svfiprintf_r+0x166>
 8006a84:	89a3      	ldrh	r3, [r4, #12]
 8006a86:	065b      	lsls	r3, r3, #25
 8006a88:	f53f af35 	bmi.w	80068f6 <_svfiprintf_r+0x2a>
 8006a8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a8e:	b01d      	add	sp, #116	; 0x74
 8006a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a94:	ab03      	add	r3, sp, #12
 8006a96:	9300      	str	r3, [sp, #0]
 8006a98:	4622      	mov	r2, r4
 8006a9a:	4b07      	ldr	r3, [pc, #28]	; (8006ab8 <_svfiprintf_r+0x1ec>)
 8006a9c:	a904      	add	r1, sp, #16
 8006a9e:	4640      	mov	r0, r8
 8006aa0:	f000 f882 	bl	8006ba8 <_printf_i>
 8006aa4:	e7ea      	b.n	8006a7c <_svfiprintf_r+0x1b0>
 8006aa6:	bf00      	nop
 8006aa8:	08007138 	.word	0x08007138
 8006aac:	0800713e 	.word	0x0800713e
 8006ab0:	08007142 	.word	0x08007142
 8006ab4:	00000000 	.word	0x00000000
 8006ab8:	08006819 	.word	0x08006819

08006abc <_printf_common>:
 8006abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ac0:	4691      	mov	r9, r2
 8006ac2:	461f      	mov	r7, r3
 8006ac4:	688a      	ldr	r2, [r1, #8]
 8006ac6:	690b      	ldr	r3, [r1, #16]
 8006ac8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006acc:	4293      	cmp	r3, r2
 8006ace:	bfb8      	it	lt
 8006ad0:	4613      	movlt	r3, r2
 8006ad2:	f8c9 3000 	str.w	r3, [r9]
 8006ad6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ada:	4606      	mov	r6, r0
 8006adc:	460c      	mov	r4, r1
 8006ade:	b112      	cbz	r2, 8006ae6 <_printf_common+0x2a>
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	f8c9 3000 	str.w	r3, [r9]
 8006ae6:	6823      	ldr	r3, [r4, #0]
 8006ae8:	0699      	lsls	r1, r3, #26
 8006aea:	bf42      	ittt	mi
 8006aec:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006af0:	3302      	addmi	r3, #2
 8006af2:	f8c9 3000 	strmi.w	r3, [r9]
 8006af6:	6825      	ldr	r5, [r4, #0]
 8006af8:	f015 0506 	ands.w	r5, r5, #6
 8006afc:	d107      	bne.n	8006b0e <_printf_common+0x52>
 8006afe:	f104 0a19 	add.w	sl, r4, #25
 8006b02:	68e3      	ldr	r3, [r4, #12]
 8006b04:	f8d9 2000 	ldr.w	r2, [r9]
 8006b08:	1a9b      	subs	r3, r3, r2
 8006b0a:	42ab      	cmp	r3, r5
 8006b0c:	dc28      	bgt.n	8006b60 <_printf_common+0xa4>
 8006b0e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006b12:	6822      	ldr	r2, [r4, #0]
 8006b14:	3300      	adds	r3, #0
 8006b16:	bf18      	it	ne
 8006b18:	2301      	movne	r3, #1
 8006b1a:	0692      	lsls	r2, r2, #26
 8006b1c:	d42d      	bmi.n	8006b7a <_printf_common+0xbe>
 8006b1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b22:	4639      	mov	r1, r7
 8006b24:	4630      	mov	r0, r6
 8006b26:	47c0      	blx	r8
 8006b28:	3001      	adds	r0, #1
 8006b2a:	d020      	beq.n	8006b6e <_printf_common+0xb2>
 8006b2c:	6823      	ldr	r3, [r4, #0]
 8006b2e:	68e5      	ldr	r5, [r4, #12]
 8006b30:	f8d9 2000 	ldr.w	r2, [r9]
 8006b34:	f003 0306 	and.w	r3, r3, #6
 8006b38:	2b04      	cmp	r3, #4
 8006b3a:	bf08      	it	eq
 8006b3c:	1aad      	subeq	r5, r5, r2
 8006b3e:	68a3      	ldr	r3, [r4, #8]
 8006b40:	6922      	ldr	r2, [r4, #16]
 8006b42:	bf0c      	ite	eq
 8006b44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b48:	2500      	movne	r5, #0
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	bfc4      	itt	gt
 8006b4e:	1a9b      	subgt	r3, r3, r2
 8006b50:	18ed      	addgt	r5, r5, r3
 8006b52:	f04f 0900 	mov.w	r9, #0
 8006b56:	341a      	adds	r4, #26
 8006b58:	454d      	cmp	r5, r9
 8006b5a:	d11a      	bne.n	8006b92 <_printf_common+0xd6>
 8006b5c:	2000      	movs	r0, #0
 8006b5e:	e008      	b.n	8006b72 <_printf_common+0xb6>
 8006b60:	2301      	movs	r3, #1
 8006b62:	4652      	mov	r2, sl
 8006b64:	4639      	mov	r1, r7
 8006b66:	4630      	mov	r0, r6
 8006b68:	47c0      	blx	r8
 8006b6a:	3001      	adds	r0, #1
 8006b6c:	d103      	bne.n	8006b76 <_printf_common+0xba>
 8006b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8006b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b76:	3501      	adds	r5, #1
 8006b78:	e7c3      	b.n	8006b02 <_printf_common+0x46>
 8006b7a:	18e1      	adds	r1, r4, r3
 8006b7c:	1c5a      	adds	r2, r3, #1
 8006b7e:	2030      	movs	r0, #48	; 0x30
 8006b80:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b84:	4422      	add	r2, r4
 8006b86:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b8a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b8e:	3302      	adds	r3, #2
 8006b90:	e7c5      	b.n	8006b1e <_printf_common+0x62>
 8006b92:	2301      	movs	r3, #1
 8006b94:	4622      	mov	r2, r4
 8006b96:	4639      	mov	r1, r7
 8006b98:	4630      	mov	r0, r6
 8006b9a:	47c0      	blx	r8
 8006b9c:	3001      	adds	r0, #1
 8006b9e:	d0e6      	beq.n	8006b6e <_printf_common+0xb2>
 8006ba0:	f109 0901 	add.w	r9, r9, #1
 8006ba4:	e7d8      	b.n	8006b58 <_printf_common+0x9c>
	...

08006ba8 <_printf_i>:
 8006ba8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006bac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006bb0:	460c      	mov	r4, r1
 8006bb2:	7e09      	ldrb	r1, [r1, #24]
 8006bb4:	b085      	sub	sp, #20
 8006bb6:	296e      	cmp	r1, #110	; 0x6e
 8006bb8:	4617      	mov	r7, r2
 8006bba:	4606      	mov	r6, r0
 8006bbc:	4698      	mov	r8, r3
 8006bbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006bc0:	f000 80b3 	beq.w	8006d2a <_printf_i+0x182>
 8006bc4:	d822      	bhi.n	8006c0c <_printf_i+0x64>
 8006bc6:	2963      	cmp	r1, #99	; 0x63
 8006bc8:	d036      	beq.n	8006c38 <_printf_i+0x90>
 8006bca:	d80a      	bhi.n	8006be2 <_printf_i+0x3a>
 8006bcc:	2900      	cmp	r1, #0
 8006bce:	f000 80b9 	beq.w	8006d44 <_printf_i+0x19c>
 8006bd2:	2958      	cmp	r1, #88	; 0x58
 8006bd4:	f000 8083 	beq.w	8006cde <_printf_i+0x136>
 8006bd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bdc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006be0:	e032      	b.n	8006c48 <_printf_i+0xa0>
 8006be2:	2964      	cmp	r1, #100	; 0x64
 8006be4:	d001      	beq.n	8006bea <_printf_i+0x42>
 8006be6:	2969      	cmp	r1, #105	; 0x69
 8006be8:	d1f6      	bne.n	8006bd8 <_printf_i+0x30>
 8006bea:	6820      	ldr	r0, [r4, #0]
 8006bec:	6813      	ldr	r3, [r2, #0]
 8006bee:	0605      	lsls	r5, r0, #24
 8006bf0:	f103 0104 	add.w	r1, r3, #4
 8006bf4:	d52a      	bpl.n	8006c4c <_printf_i+0xa4>
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	6011      	str	r1, [r2, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	da03      	bge.n	8006c06 <_printf_i+0x5e>
 8006bfe:	222d      	movs	r2, #45	; 0x2d
 8006c00:	425b      	negs	r3, r3
 8006c02:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006c06:	486f      	ldr	r0, [pc, #444]	; (8006dc4 <_printf_i+0x21c>)
 8006c08:	220a      	movs	r2, #10
 8006c0a:	e039      	b.n	8006c80 <_printf_i+0xd8>
 8006c0c:	2973      	cmp	r1, #115	; 0x73
 8006c0e:	f000 809d 	beq.w	8006d4c <_printf_i+0x1a4>
 8006c12:	d808      	bhi.n	8006c26 <_printf_i+0x7e>
 8006c14:	296f      	cmp	r1, #111	; 0x6f
 8006c16:	d020      	beq.n	8006c5a <_printf_i+0xb2>
 8006c18:	2970      	cmp	r1, #112	; 0x70
 8006c1a:	d1dd      	bne.n	8006bd8 <_printf_i+0x30>
 8006c1c:	6823      	ldr	r3, [r4, #0]
 8006c1e:	f043 0320 	orr.w	r3, r3, #32
 8006c22:	6023      	str	r3, [r4, #0]
 8006c24:	e003      	b.n	8006c2e <_printf_i+0x86>
 8006c26:	2975      	cmp	r1, #117	; 0x75
 8006c28:	d017      	beq.n	8006c5a <_printf_i+0xb2>
 8006c2a:	2978      	cmp	r1, #120	; 0x78
 8006c2c:	d1d4      	bne.n	8006bd8 <_printf_i+0x30>
 8006c2e:	2378      	movs	r3, #120	; 0x78
 8006c30:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c34:	4864      	ldr	r0, [pc, #400]	; (8006dc8 <_printf_i+0x220>)
 8006c36:	e055      	b.n	8006ce4 <_printf_i+0x13c>
 8006c38:	6813      	ldr	r3, [r2, #0]
 8006c3a:	1d19      	adds	r1, r3, #4
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	6011      	str	r1, [r2, #0]
 8006c40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e08c      	b.n	8006d66 <_printf_i+0x1be>
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	6011      	str	r1, [r2, #0]
 8006c50:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c54:	bf18      	it	ne
 8006c56:	b21b      	sxthne	r3, r3
 8006c58:	e7cf      	b.n	8006bfa <_printf_i+0x52>
 8006c5a:	6813      	ldr	r3, [r2, #0]
 8006c5c:	6825      	ldr	r5, [r4, #0]
 8006c5e:	1d18      	adds	r0, r3, #4
 8006c60:	6010      	str	r0, [r2, #0]
 8006c62:	0628      	lsls	r0, r5, #24
 8006c64:	d501      	bpl.n	8006c6a <_printf_i+0xc2>
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	e002      	b.n	8006c70 <_printf_i+0xc8>
 8006c6a:	0668      	lsls	r0, r5, #25
 8006c6c:	d5fb      	bpl.n	8006c66 <_printf_i+0xbe>
 8006c6e:	881b      	ldrh	r3, [r3, #0]
 8006c70:	4854      	ldr	r0, [pc, #336]	; (8006dc4 <_printf_i+0x21c>)
 8006c72:	296f      	cmp	r1, #111	; 0x6f
 8006c74:	bf14      	ite	ne
 8006c76:	220a      	movne	r2, #10
 8006c78:	2208      	moveq	r2, #8
 8006c7a:	2100      	movs	r1, #0
 8006c7c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c80:	6865      	ldr	r5, [r4, #4]
 8006c82:	60a5      	str	r5, [r4, #8]
 8006c84:	2d00      	cmp	r5, #0
 8006c86:	f2c0 8095 	blt.w	8006db4 <_printf_i+0x20c>
 8006c8a:	6821      	ldr	r1, [r4, #0]
 8006c8c:	f021 0104 	bic.w	r1, r1, #4
 8006c90:	6021      	str	r1, [r4, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d13d      	bne.n	8006d12 <_printf_i+0x16a>
 8006c96:	2d00      	cmp	r5, #0
 8006c98:	f040 808e 	bne.w	8006db8 <_printf_i+0x210>
 8006c9c:	4665      	mov	r5, ip
 8006c9e:	2a08      	cmp	r2, #8
 8006ca0:	d10b      	bne.n	8006cba <_printf_i+0x112>
 8006ca2:	6823      	ldr	r3, [r4, #0]
 8006ca4:	07db      	lsls	r3, r3, #31
 8006ca6:	d508      	bpl.n	8006cba <_printf_i+0x112>
 8006ca8:	6923      	ldr	r3, [r4, #16]
 8006caa:	6862      	ldr	r2, [r4, #4]
 8006cac:	429a      	cmp	r2, r3
 8006cae:	bfde      	ittt	le
 8006cb0:	2330      	movle	r3, #48	; 0x30
 8006cb2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006cb6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006cba:	ebac 0305 	sub.w	r3, ip, r5
 8006cbe:	6123      	str	r3, [r4, #16]
 8006cc0:	f8cd 8000 	str.w	r8, [sp]
 8006cc4:	463b      	mov	r3, r7
 8006cc6:	aa03      	add	r2, sp, #12
 8006cc8:	4621      	mov	r1, r4
 8006cca:	4630      	mov	r0, r6
 8006ccc:	f7ff fef6 	bl	8006abc <_printf_common>
 8006cd0:	3001      	adds	r0, #1
 8006cd2:	d14d      	bne.n	8006d70 <_printf_i+0x1c8>
 8006cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd8:	b005      	add	sp, #20
 8006cda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006cde:	4839      	ldr	r0, [pc, #228]	; (8006dc4 <_printf_i+0x21c>)
 8006ce0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006ce4:	6813      	ldr	r3, [r2, #0]
 8006ce6:	6821      	ldr	r1, [r4, #0]
 8006ce8:	1d1d      	adds	r5, r3, #4
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	6015      	str	r5, [r2, #0]
 8006cee:	060a      	lsls	r2, r1, #24
 8006cf0:	d50b      	bpl.n	8006d0a <_printf_i+0x162>
 8006cf2:	07ca      	lsls	r2, r1, #31
 8006cf4:	bf44      	itt	mi
 8006cf6:	f041 0120 	orrmi.w	r1, r1, #32
 8006cfa:	6021      	strmi	r1, [r4, #0]
 8006cfc:	b91b      	cbnz	r3, 8006d06 <_printf_i+0x15e>
 8006cfe:	6822      	ldr	r2, [r4, #0]
 8006d00:	f022 0220 	bic.w	r2, r2, #32
 8006d04:	6022      	str	r2, [r4, #0]
 8006d06:	2210      	movs	r2, #16
 8006d08:	e7b7      	b.n	8006c7a <_printf_i+0xd2>
 8006d0a:	064d      	lsls	r5, r1, #25
 8006d0c:	bf48      	it	mi
 8006d0e:	b29b      	uxthmi	r3, r3
 8006d10:	e7ef      	b.n	8006cf2 <_printf_i+0x14a>
 8006d12:	4665      	mov	r5, ip
 8006d14:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d18:	fb02 3311 	mls	r3, r2, r1, r3
 8006d1c:	5cc3      	ldrb	r3, [r0, r3]
 8006d1e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006d22:	460b      	mov	r3, r1
 8006d24:	2900      	cmp	r1, #0
 8006d26:	d1f5      	bne.n	8006d14 <_printf_i+0x16c>
 8006d28:	e7b9      	b.n	8006c9e <_printf_i+0xf6>
 8006d2a:	6813      	ldr	r3, [r2, #0]
 8006d2c:	6825      	ldr	r5, [r4, #0]
 8006d2e:	6961      	ldr	r1, [r4, #20]
 8006d30:	1d18      	adds	r0, r3, #4
 8006d32:	6010      	str	r0, [r2, #0]
 8006d34:	0628      	lsls	r0, r5, #24
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	d501      	bpl.n	8006d3e <_printf_i+0x196>
 8006d3a:	6019      	str	r1, [r3, #0]
 8006d3c:	e002      	b.n	8006d44 <_printf_i+0x19c>
 8006d3e:	066a      	lsls	r2, r5, #25
 8006d40:	d5fb      	bpl.n	8006d3a <_printf_i+0x192>
 8006d42:	8019      	strh	r1, [r3, #0]
 8006d44:	2300      	movs	r3, #0
 8006d46:	6123      	str	r3, [r4, #16]
 8006d48:	4665      	mov	r5, ip
 8006d4a:	e7b9      	b.n	8006cc0 <_printf_i+0x118>
 8006d4c:	6813      	ldr	r3, [r2, #0]
 8006d4e:	1d19      	adds	r1, r3, #4
 8006d50:	6011      	str	r1, [r2, #0]
 8006d52:	681d      	ldr	r5, [r3, #0]
 8006d54:	6862      	ldr	r2, [r4, #4]
 8006d56:	2100      	movs	r1, #0
 8006d58:	4628      	mov	r0, r5
 8006d5a:	f7f9 fa41 	bl	80001e0 <memchr>
 8006d5e:	b108      	cbz	r0, 8006d64 <_printf_i+0x1bc>
 8006d60:	1b40      	subs	r0, r0, r5
 8006d62:	6060      	str	r0, [r4, #4]
 8006d64:	6863      	ldr	r3, [r4, #4]
 8006d66:	6123      	str	r3, [r4, #16]
 8006d68:	2300      	movs	r3, #0
 8006d6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d6e:	e7a7      	b.n	8006cc0 <_printf_i+0x118>
 8006d70:	6923      	ldr	r3, [r4, #16]
 8006d72:	462a      	mov	r2, r5
 8006d74:	4639      	mov	r1, r7
 8006d76:	4630      	mov	r0, r6
 8006d78:	47c0      	blx	r8
 8006d7a:	3001      	adds	r0, #1
 8006d7c:	d0aa      	beq.n	8006cd4 <_printf_i+0x12c>
 8006d7e:	6823      	ldr	r3, [r4, #0]
 8006d80:	079b      	lsls	r3, r3, #30
 8006d82:	d413      	bmi.n	8006dac <_printf_i+0x204>
 8006d84:	68e0      	ldr	r0, [r4, #12]
 8006d86:	9b03      	ldr	r3, [sp, #12]
 8006d88:	4298      	cmp	r0, r3
 8006d8a:	bfb8      	it	lt
 8006d8c:	4618      	movlt	r0, r3
 8006d8e:	e7a3      	b.n	8006cd8 <_printf_i+0x130>
 8006d90:	2301      	movs	r3, #1
 8006d92:	464a      	mov	r2, r9
 8006d94:	4639      	mov	r1, r7
 8006d96:	4630      	mov	r0, r6
 8006d98:	47c0      	blx	r8
 8006d9a:	3001      	adds	r0, #1
 8006d9c:	d09a      	beq.n	8006cd4 <_printf_i+0x12c>
 8006d9e:	3501      	adds	r5, #1
 8006da0:	68e3      	ldr	r3, [r4, #12]
 8006da2:	9a03      	ldr	r2, [sp, #12]
 8006da4:	1a9b      	subs	r3, r3, r2
 8006da6:	42ab      	cmp	r3, r5
 8006da8:	dcf2      	bgt.n	8006d90 <_printf_i+0x1e8>
 8006daa:	e7eb      	b.n	8006d84 <_printf_i+0x1dc>
 8006dac:	2500      	movs	r5, #0
 8006dae:	f104 0919 	add.w	r9, r4, #25
 8006db2:	e7f5      	b.n	8006da0 <_printf_i+0x1f8>
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d1ac      	bne.n	8006d12 <_printf_i+0x16a>
 8006db8:	7803      	ldrb	r3, [r0, #0]
 8006dba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006dbe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006dc2:	e76c      	b.n	8006c9e <_printf_i+0xf6>
 8006dc4:	08007149 	.word	0x08007149
 8006dc8:	0800715a 	.word	0x0800715a

08006dcc <memcpy>:
 8006dcc:	b510      	push	{r4, lr}
 8006dce:	1e43      	subs	r3, r0, #1
 8006dd0:	440a      	add	r2, r1
 8006dd2:	4291      	cmp	r1, r2
 8006dd4:	d100      	bne.n	8006dd8 <memcpy+0xc>
 8006dd6:	bd10      	pop	{r4, pc}
 8006dd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ddc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006de0:	e7f7      	b.n	8006dd2 <memcpy+0x6>

08006de2 <memmove>:
 8006de2:	4288      	cmp	r0, r1
 8006de4:	b510      	push	{r4, lr}
 8006de6:	eb01 0302 	add.w	r3, r1, r2
 8006dea:	d807      	bhi.n	8006dfc <memmove+0x1a>
 8006dec:	1e42      	subs	r2, r0, #1
 8006dee:	4299      	cmp	r1, r3
 8006df0:	d00a      	beq.n	8006e08 <memmove+0x26>
 8006df2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006df6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006dfa:	e7f8      	b.n	8006dee <memmove+0xc>
 8006dfc:	4283      	cmp	r3, r0
 8006dfe:	d9f5      	bls.n	8006dec <memmove+0xa>
 8006e00:	1881      	adds	r1, r0, r2
 8006e02:	1ad2      	subs	r2, r2, r3
 8006e04:	42d3      	cmn	r3, r2
 8006e06:	d100      	bne.n	8006e0a <memmove+0x28>
 8006e08:	bd10      	pop	{r4, pc}
 8006e0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e0e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006e12:	e7f7      	b.n	8006e04 <memmove+0x22>

08006e14 <_free_r>:
 8006e14:	b538      	push	{r3, r4, r5, lr}
 8006e16:	4605      	mov	r5, r0
 8006e18:	2900      	cmp	r1, #0
 8006e1a:	d045      	beq.n	8006ea8 <_free_r+0x94>
 8006e1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e20:	1f0c      	subs	r4, r1, #4
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	bfb8      	it	lt
 8006e26:	18e4      	addlt	r4, r4, r3
 8006e28:	f000 f8d2 	bl	8006fd0 <__malloc_lock>
 8006e2c:	4a1f      	ldr	r2, [pc, #124]	; (8006eac <_free_r+0x98>)
 8006e2e:	6813      	ldr	r3, [r2, #0]
 8006e30:	4610      	mov	r0, r2
 8006e32:	b933      	cbnz	r3, 8006e42 <_free_r+0x2e>
 8006e34:	6063      	str	r3, [r4, #4]
 8006e36:	6014      	str	r4, [r2, #0]
 8006e38:	4628      	mov	r0, r5
 8006e3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e3e:	f000 b8c8 	b.w	8006fd2 <__malloc_unlock>
 8006e42:	42a3      	cmp	r3, r4
 8006e44:	d90c      	bls.n	8006e60 <_free_r+0x4c>
 8006e46:	6821      	ldr	r1, [r4, #0]
 8006e48:	1862      	adds	r2, r4, r1
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	bf04      	itt	eq
 8006e4e:	681a      	ldreq	r2, [r3, #0]
 8006e50:	685b      	ldreq	r3, [r3, #4]
 8006e52:	6063      	str	r3, [r4, #4]
 8006e54:	bf04      	itt	eq
 8006e56:	1852      	addeq	r2, r2, r1
 8006e58:	6022      	streq	r2, [r4, #0]
 8006e5a:	6004      	str	r4, [r0, #0]
 8006e5c:	e7ec      	b.n	8006e38 <_free_r+0x24>
 8006e5e:	4613      	mov	r3, r2
 8006e60:	685a      	ldr	r2, [r3, #4]
 8006e62:	b10a      	cbz	r2, 8006e68 <_free_r+0x54>
 8006e64:	42a2      	cmp	r2, r4
 8006e66:	d9fa      	bls.n	8006e5e <_free_r+0x4a>
 8006e68:	6819      	ldr	r1, [r3, #0]
 8006e6a:	1858      	adds	r0, r3, r1
 8006e6c:	42a0      	cmp	r0, r4
 8006e6e:	d10b      	bne.n	8006e88 <_free_r+0x74>
 8006e70:	6820      	ldr	r0, [r4, #0]
 8006e72:	4401      	add	r1, r0
 8006e74:	1858      	adds	r0, r3, r1
 8006e76:	4282      	cmp	r2, r0
 8006e78:	6019      	str	r1, [r3, #0]
 8006e7a:	d1dd      	bne.n	8006e38 <_free_r+0x24>
 8006e7c:	6810      	ldr	r0, [r2, #0]
 8006e7e:	6852      	ldr	r2, [r2, #4]
 8006e80:	605a      	str	r2, [r3, #4]
 8006e82:	4401      	add	r1, r0
 8006e84:	6019      	str	r1, [r3, #0]
 8006e86:	e7d7      	b.n	8006e38 <_free_r+0x24>
 8006e88:	d902      	bls.n	8006e90 <_free_r+0x7c>
 8006e8a:	230c      	movs	r3, #12
 8006e8c:	602b      	str	r3, [r5, #0]
 8006e8e:	e7d3      	b.n	8006e38 <_free_r+0x24>
 8006e90:	6820      	ldr	r0, [r4, #0]
 8006e92:	1821      	adds	r1, r4, r0
 8006e94:	428a      	cmp	r2, r1
 8006e96:	bf04      	itt	eq
 8006e98:	6811      	ldreq	r1, [r2, #0]
 8006e9a:	6852      	ldreq	r2, [r2, #4]
 8006e9c:	6062      	str	r2, [r4, #4]
 8006e9e:	bf04      	itt	eq
 8006ea0:	1809      	addeq	r1, r1, r0
 8006ea2:	6021      	streq	r1, [r4, #0]
 8006ea4:	605c      	str	r4, [r3, #4]
 8006ea6:	e7c7      	b.n	8006e38 <_free_r+0x24>
 8006ea8:	bd38      	pop	{r3, r4, r5, pc}
 8006eaa:	bf00      	nop
 8006eac:	200000dc 	.word	0x200000dc

08006eb0 <_malloc_r>:
 8006eb0:	b570      	push	{r4, r5, r6, lr}
 8006eb2:	1ccd      	adds	r5, r1, #3
 8006eb4:	f025 0503 	bic.w	r5, r5, #3
 8006eb8:	3508      	adds	r5, #8
 8006eba:	2d0c      	cmp	r5, #12
 8006ebc:	bf38      	it	cc
 8006ebe:	250c      	movcc	r5, #12
 8006ec0:	2d00      	cmp	r5, #0
 8006ec2:	4606      	mov	r6, r0
 8006ec4:	db01      	blt.n	8006eca <_malloc_r+0x1a>
 8006ec6:	42a9      	cmp	r1, r5
 8006ec8:	d903      	bls.n	8006ed2 <_malloc_r+0x22>
 8006eca:	230c      	movs	r3, #12
 8006ecc:	6033      	str	r3, [r6, #0]
 8006ece:	2000      	movs	r0, #0
 8006ed0:	bd70      	pop	{r4, r5, r6, pc}
 8006ed2:	f000 f87d 	bl	8006fd0 <__malloc_lock>
 8006ed6:	4a21      	ldr	r2, [pc, #132]	; (8006f5c <_malloc_r+0xac>)
 8006ed8:	6814      	ldr	r4, [r2, #0]
 8006eda:	4621      	mov	r1, r4
 8006edc:	b991      	cbnz	r1, 8006f04 <_malloc_r+0x54>
 8006ede:	4c20      	ldr	r4, [pc, #128]	; (8006f60 <_malloc_r+0xb0>)
 8006ee0:	6823      	ldr	r3, [r4, #0]
 8006ee2:	b91b      	cbnz	r3, 8006eec <_malloc_r+0x3c>
 8006ee4:	4630      	mov	r0, r6
 8006ee6:	f000 f863 	bl	8006fb0 <_sbrk_r>
 8006eea:	6020      	str	r0, [r4, #0]
 8006eec:	4629      	mov	r1, r5
 8006eee:	4630      	mov	r0, r6
 8006ef0:	f000 f85e 	bl	8006fb0 <_sbrk_r>
 8006ef4:	1c43      	adds	r3, r0, #1
 8006ef6:	d124      	bne.n	8006f42 <_malloc_r+0x92>
 8006ef8:	230c      	movs	r3, #12
 8006efa:	6033      	str	r3, [r6, #0]
 8006efc:	4630      	mov	r0, r6
 8006efe:	f000 f868 	bl	8006fd2 <__malloc_unlock>
 8006f02:	e7e4      	b.n	8006ece <_malloc_r+0x1e>
 8006f04:	680b      	ldr	r3, [r1, #0]
 8006f06:	1b5b      	subs	r3, r3, r5
 8006f08:	d418      	bmi.n	8006f3c <_malloc_r+0x8c>
 8006f0a:	2b0b      	cmp	r3, #11
 8006f0c:	d90f      	bls.n	8006f2e <_malloc_r+0x7e>
 8006f0e:	600b      	str	r3, [r1, #0]
 8006f10:	50cd      	str	r5, [r1, r3]
 8006f12:	18cc      	adds	r4, r1, r3
 8006f14:	4630      	mov	r0, r6
 8006f16:	f000 f85c 	bl	8006fd2 <__malloc_unlock>
 8006f1a:	f104 000b 	add.w	r0, r4, #11
 8006f1e:	1d23      	adds	r3, r4, #4
 8006f20:	f020 0007 	bic.w	r0, r0, #7
 8006f24:	1ac3      	subs	r3, r0, r3
 8006f26:	d0d3      	beq.n	8006ed0 <_malloc_r+0x20>
 8006f28:	425a      	negs	r2, r3
 8006f2a:	50e2      	str	r2, [r4, r3]
 8006f2c:	e7d0      	b.n	8006ed0 <_malloc_r+0x20>
 8006f2e:	428c      	cmp	r4, r1
 8006f30:	684b      	ldr	r3, [r1, #4]
 8006f32:	bf16      	itet	ne
 8006f34:	6063      	strne	r3, [r4, #4]
 8006f36:	6013      	streq	r3, [r2, #0]
 8006f38:	460c      	movne	r4, r1
 8006f3a:	e7eb      	b.n	8006f14 <_malloc_r+0x64>
 8006f3c:	460c      	mov	r4, r1
 8006f3e:	6849      	ldr	r1, [r1, #4]
 8006f40:	e7cc      	b.n	8006edc <_malloc_r+0x2c>
 8006f42:	1cc4      	adds	r4, r0, #3
 8006f44:	f024 0403 	bic.w	r4, r4, #3
 8006f48:	42a0      	cmp	r0, r4
 8006f4a:	d005      	beq.n	8006f58 <_malloc_r+0xa8>
 8006f4c:	1a21      	subs	r1, r4, r0
 8006f4e:	4630      	mov	r0, r6
 8006f50:	f000 f82e 	bl	8006fb0 <_sbrk_r>
 8006f54:	3001      	adds	r0, #1
 8006f56:	d0cf      	beq.n	8006ef8 <_malloc_r+0x48>
 8006f58:	6025      	str	r5, [r4, #0]
 8006f5a:	e7db      	b.n	8006f14 <_malloc_r+0x64>
 8006f5c:	200000dc 	.word	0x200000dc
 8006f60:	200000e0 	.word	0x200000e0

08006f64 <_realloc_r>:
 8006f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f66:	4607      	mov	r7, r0
 8006f68:	4614      	mov	r4, r2
 8006f6a:	460e      	mov	r6, r1
 8006f6c:	b921      	cbnz	r1, 8006f78 <_realloc_r+0x14>
 8006f6e:	4611      	mov	r1, r2
 8006f70:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006f74:	f7ff bf9c 	b.w	8006eb0 <_malloc_r>
 8006f78:	b922      	cbnz	r2, 8006f84 <_realloc_r+0x20>
 8006f7a:	f7ff ff4b 	bl	8006e14 <_free_r>
 8006f7e:	4625      	mov	r5, r4
 8006f80:	4628      	mov	r0, r5
 8006f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f84:	f000 f826 	bl	8006fd4 <_malloc_usable_size_r>
 8006f88:	42a0      	cmp	r0, r4
 8006f8a:	d20f      	bcs.n	8006fac <_realloc_r+0x48>
 8006f8c:	4621      	mov	r1, r4
 8006f8e:	4638      	mov	r0, r7
 8006f90:	f7ff ff8e 	bl	8006eb0 <_malloc_r>
 8006f94:	4605      	mov	r5, r0
 8006f96:	2800      	cmp	r0, #0
 8006f98:	d0f2      	beq.n	8006f80 <_realloc_r+0x1c>
 8006f9a:	4631      	mov	r1, r6
 8006f9c:	4622      	mov	r2, r4
 8006f9e:	f7ff ff15 	bl	8006dcc <memcpy>
 8006fa2:	4631      	mov	r1, r6
 8006fa4:	4638      	mov	r0, r7
 8006fa6:	f7ff ff35 	bl	8006e14 <_free_r>
 8006faa:	e7e9      	b.n	8006f80 <_realloc_r+0x1c>
 8006fac:	4635      	mov	r5, r6
 8006fae:	e7e7      	b.n	8006f80 <_realloc_r+0x1c>

08006fb0 <_sbrk_r>:
 8006fb0:	b538      	push	{r3, r4, r5, lr}
 8006fb2:	4c06      	ldr	r4, [pc, #24]	; (8006fcc <_sbrk_r+0x1c>)
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	4605      	mov	r5, r0
 8006fb8:	4608      	mov	r0, r1
 8006fba:	6023      	str	r3, [r4, #0]
 8006fbc:	f7ff fadc 	bl	8006578 <_sbrk>
 8006fc0:	1c43      	adds	r3, r0, #1
 8006fc2:	d102      	bne.n	8006fca <_sbrk_r+0x1a>
 8006fc4:	6823      	ldr	r3, [r4, #0]
 8006fc6:	b103      	cbz	r3, 8006fca <_sbrk_r+0x1a>
 8006fc8:	602b      	str	r3, [r5, #0]
 8006fca:	bd38      	pop	{r3, r4, r5, pc}
 8006fcc:	2000531c 	.word	0x2000531c

08006fd0 <__malloc_lock>:
 8006fd0:	4770      	bx	lr

08006fd2 <__malloc_unlock>:
 8006fd2:	4770      	bx	lr

08006fd4 <_malloc_usable_size_r>:
 8006fd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fd8:	1f18      	subs	r0, r3, #4
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	bfbc      	itt	lt
 8006fde:	580b      	ldrlt	r3, [r1, r0]
 8006fe0:	18c0      	addlt	r0, r0, r3
 8006fe2:	4770      	bx	lr

08006fe4 <_init>:
 8006fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fe6:	bf00      	nop
 8006fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fea:	bc08      	pop	{r3}
 8006fec:	469e      	mov	lr, r3
 8006fee:	4770      	bx	lr

08006ff0 <_fini>:
 8006ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ff2:	bf00      	nop
 8006ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ff6:	bc08      	pop	{r3}
 8006ff8:	469e      	mov	lr, r3
 8006ffa:	4770      	bx	lr
