
QMC5883L.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036f4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08003800  08003800  00013800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003928  08003928  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003928  08003928  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003928  08003928  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003928  08003928  00013928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800392c  0800392c  0001392c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003930  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000070  080039a0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  080039a0  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a898  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c89  00000000  00000000  0002a931  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009b0  00000000  00000000  0002c5c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008c8  00000000  00000000  0002cf70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015327  00000000  00000000  0002d838  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008e5f  00000000  00000000  00042b5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006db4c  00000000  00000000  0004b9be  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b950a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d6c  00000000  00000000  000b9588  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080037e8 	.word	0x080037e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080037e8 	.word	0x080037e8

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a07      	ldr	r2, [pc, #28]	; (8000174 <HAL_Init+0x28>)
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 f929 	bl	80003b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f002 f9fe 	bl	8002568 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 f933 	bl	8000402 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 f909 	bl	80003ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000098 	.word	0x20000098

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000098 	.word	0x20000098

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	68fa      	ldr	r2, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8f7      	bhi.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000254:	b480      	push	{r7}
 8000256:	b085      	sub	sp, #20
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f003 0307 	and.w	r3, r3, #7
 8000262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000264:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <__NVIC_SetPriorityGrouping+0x44>)
 8000266:	68db      	ldr	r3, [r3, #12]
 8000268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000270:	4013      	ands	r3, r2
 8000272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800027c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000286:	4a04      	ldr	r2, [pc, #16]	; (8000298 <__NVIC_SetPriorityGrouping+0x44>)
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	60d3      	str	r3, [r2, #12]
}
 800028c:	bf00      	nop
 800028e:	3714      	adds	r7, #20
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	e000ed00 	.word	0xe000ed00

0800029c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__NVIC_GetPriorityGrouping+0x18>)
 80002a2:	68db      	ldr	r3, [r3, #12]
 80002a4:	0a1b      	lsrs	r3, r3, #8
 80002a6:	f003 0307 	and.w	r3, r3, #7
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e000ed00 	.word	0xe000ed00

080002b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	6039      	str	r1, [r7, #0]
 80002c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	db0a      	blt.n	80002e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	b2da      	uxtb	r2, r3
 80002d0:	490c      	ldr	r1, [pc, #48]	; (8000304 <__NVIC_SetPriority+0x4c>)
 80002d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d6:	0112      	lsls	r2, r2, #4
 80002d8:	b2d2      	uxtb	r2, r2
 80002da:	440b      	add	r3, r1
 80002dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002e0:	e00a      	b.n	80002f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e2:	683b      	ldr	r3, [r7, #0]
 80002e4:	b2da      	uxtb	r2, r3
 80002e6:	4908      	ldr	r1, [pc, #32]	; (8000308 <__NVIC_SetPriority+0x50>)
 80002e8:	79fb      	ldrb	r3, [r7, #7]
 80002ea:	f003 030f 	and.w	r3, r3, #15
 80002ee:	3b04      	subs	r3, #4
 80002f0:	0112      	lsls	r2, r2, #4
 80002f2:	b2d2      	uxtb	r2, r2
 80002f4:	440b      	add	r3, r1
 80002f6:	761a      	strb	r2, [r3, #24]
}
 80002f8:	bf00      	nop
 80002fa:	370c      	adds	r7, #12
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bc80      	pop	{r7}
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	e000e100 	.word	0xe000e100
 8000308:	e000ed00 	.word	0xe000ed00

0800030c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800030c:	b480      	push	{r7}
 800030e:	b089      	sub	sp, #36	; 0x24
 8000310:	af00      	add	r7, sp, #0
 8000312:	60f8      	str	r0, [r7, #12]
 8000314:	60b9      	str	r1, [r7, #8]
 8000316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	f003 0307 	and.w	r3, r3, #7
 800031e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000320:	69fb      	ldr	r3, [r7, #28]
 8000322:	f1c3 0307 	rsb	r3, r3, #7
 8000326:	2b04      	cmp	r3, #4
 8000328:	bf28      	it	cs
 800032a:	2304      	movcs	r3, #4
 800032c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800032e:	69fb      	ldr	r3, [r7, #28]
 8000330:	3304      	adds	r3, #4
 8000332:	2b06      	cmp	r3, #6
 8000334:	d902      	bls.n	800033c <NVIC_EncodePriority+0x30>
 8000336:	69fb      	ldr	r3, [r7, #28]
 8000338:	3b03      	subs	r3, #3
 800033a:	e000      	b.n	800033e <NVIC_EncodePriority+0x32>
 800033c:	2300      	movs	r3, #0
 800033e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000340:	f04f 32ff 	mov.w	r2, #4294967295
 8000344:	69bb      	ldr	r3, [r7, #24]
 8000346:	fa02 f303 	lsl.w	r3, r2, r3
 800034a:	43da      	mvns	r2, r3
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	401a      	ands	r2, r3
 8000350:	697b      	ldr	r3, [r7, #20]
 8000352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000354:	f04f 31ff 	mov.w	r1, #4294967295
 8000358:	697b      	ldr	r3, [r7, #20]
 800035a:	fa01 f303 	lsl.w	r3, r1, r3
 800035e:	43d9      	mvns	r1, r3
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000364:	4313      	orrs	r3, r2
         );
}
 8000366:	4618      	mov	r0, r3
 8000368:	3724      	adds	r7, #36	; 0x24
 800036a:	46bd      	mov	sp, r7
 800036c:	bc80      	pop	{r7}
 800036e:	4770      	bx	lr

08000370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	3b01      	subs	r3, #1
 800037c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000380:	d301      	bcc.n	8000386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000382:	2301      	movs	r3, #1
 8000384:	e00f      	b.n	80003a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000386:	4a0a      	ldr	r2, [pc, #40]	; (80003b0 <SysTick_Config+0x40>)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	3b01      	subs	r3, #1
 800038c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800038e:	210f      	movs	r1, #15
 8000390:	f04f 30ff 	mov.w	r0, #4294967295
 8000394:	f7ff ff90 	bl	80002b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000398:	4b05      	ldr	r3, [pc, #20]	; (80003b0 <SysTick_Config+0x40>)
 800039a:	2200      	movs	r2, #0
 800039c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800039e:	4b04      	ldr	r3, [pc, #16]	; (80003b0 <SysTick_Config+0x40>)
 80003a0:	2207      	movs	r2, #7
 80003a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003a4:	2300      	movs	r3, #0
}
 80003a6:	4618      	mov	r0, r3
 80003a8:	3708      	adds	r7, #8
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	e000e010 	.word	0xe000e010

080003b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003bc:	6878      	ldr	r0, [r7, #4]
 80003be:	f7ff ff49 	bl	8000254 <__NVIC_SetPriorityGrouping>
}
 80003c2:	bf00      	nop
 80003c4:	3708      	adds	r7, #8
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}

080003ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003ca:	b580      	push	{r7, lr}
 80003cc:	b086      	sub	sp, #24
 80003ce:	af00      	add	r7, sp, #0
 80003d0:	4603      	mov	r3, r0
 80003d2:	60b9      	str	r1, [r7, #8]
 80003d4:	607a      	str	r2, [r7, #4]
 80003d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003d8:	2300      	movs	r3, #0
 80003da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003dc:	f7ff ff5e 	bl	800029c <__NVIC_GetPriorityGrouping>
 80003e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003e2:	687a      	ldr	r2, [r7, #4]
 80003e4:	68b9      	ldr	r1, [r7, #8]
 80003e6:	6978      	ldr	r0, [r7, #20]
 80003e8:	f7ff ff90 	bl	800030c <NVIC_EncodePriority>
 80003ec:	4602      	mov	r2, r0
 80003ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003f2:	4611      	mov	r1, r2
 80003f4:	4618      	mov	r0, r3
 80003f6:	f7ff ff5f 	bl	80002b8 <__NVIC_SetPriority>
}
 80003fa:	bf00      	nop
 80003fc:	3718      	adds	r7, #24
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}

08000402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000402:	b580      	push	{r7, lr}
 8000404:	b082      	sub	sp, #8
 8000406:	af00      	add	r7, sp, #0
 8000408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800040a:	6878      	ldr	r0, [r7, #4]
 800040c:	f7ff ffb0 	bl	8000370 <SysTick_Config>
 8000410:	4603      	mov	r3, r0
}
 8000412:	4618      	mov	r0, r3
 8000414:	3708      	adds	r7, #8
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
	...

0800041c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800041c:	b480      	push	{r7}
 800041e:	b08b      	sub	sp, #44	; 0x2c
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
 8000424:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000426:	2300      	movs	r3, #0
 8000428:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800042a:	2300      	movs	r3, #0
 800042c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800042e:	e127      	b.n	8000680 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000430:	2201      	movs	r2, #1
 8000432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000434:	fa02 f303 	lsl.w	r3, r2, r3
 8000438:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	69fa      	ldr	r2, [r7, #28]
 8000440:	4013      	ands	r3, r2
 8000442:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000444:	69ba      	ldr	r2, [r7, #24]
 8000446:	69fb      	ldr	r3, [r7, #28]
 8000448:	429a      	cmp	r2, r3
 800044a:	f040 8116 	bne.w	800067a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	685b      	ldr	r3, [r3, #4]
 8000452:	2b12      	cmp	r3, #18
 8000454:	d034      	beq.n	80004c0 <HAL_GPIO_Init+0xa4>
 8000456:	2b12      	cmp	r3, #18
 8000458:	d80d      	bhi.n	8000476 <HAL_GPIO_Init+0x5a>
 800045a:	2b02      	cmp	r3, #2
 800045c:	d02b      	beq.n	80004b6 <HAL_GPIO_Init+0x9a>
 800045e:	2b02      	cmp	r3, #2
 8000460:	d804      	bhi.n	800046c <HAL_GPIO_Init+0x50>
 8000462:	2b00      	cmp	r3, #0
 8000464:	d031      	beq.n	80004ca <HAL_GPIO_Init+0xae>
 8000466:	2b01      	cmp	r3, #1
 8000468:	d01c      	beq.n	80004a4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800046a:	e048      	b.n	80004fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800046c:	2b03      	cmp	r3, #3
 800046e:	d043      	beq.n	80004f8 <HAL_GPIO_Init+0xdc>
 8000470:	2b11      	cmp	r3, #17
 8000472:	d01b      	beq.n	80004ac <HAL_GPIO_Init+0x90>
          break;
 8000474:	e043      	b.n	80004fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000476:	4a89      	ldr	r2, [pc, #548]	; (800069c <HAL_GPIO_Init+0x280>)
 8000478:	4293      	cmp	r3, r2
 800047a:	d026      	beq.n	80004ca <HAL_GPIO_Init+0xae>
 800047c:	4a87      	ldr	r2, [pc, #540]	; (800069c <HAL_GPIO_Init+0x280>)
 800047e:	4293      	cmp	r3, r2
 8000480:	d806      	bhi.n	8000490 <HAL_GPIO_Init+0x74>
 8000482:	4a87      	ldr	r2, [pc, #540]	; (80006a0 <HAL_GPIO_Init+0x284>)
 8000484:	4293      	cmp	r3, r2
 8000486:	d020      	beq.n	80004ca <HAL_GPIO_Init+0xae>
 8000488:	4a86      	ldr	r2, [pc, #536]	; (80006a4 <HAL_GPIO_Init+0x288>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d01d      	beq.n	80004ca <HAL_GPIO_Init+0xae>
          break;
 800048e:	e036      	b.n	80004fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000490:	4a85      	ldr	r2, [pc, #532]	; (80006a8 <HAL_GPIO_Init+0x28c>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d019      	beq.n	80004ca <HAL_GPIO_Init+0xae>
 8000496:	4a85      	ldr	r2, [pc, #532]	; (80006ac <HAL_GPIO_Init+0x290>)
 8000498:	4293      	cmp	r3, r2
 800049a:	d016      	beq.n	80004ca <HAL_GPIO_Init+0xae>
 800049c:	4a84      	ldr	r2, [pc, #528]	; (80006b0 <HAL_GPIO_Init+0x294>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d013      	beq.n	80004ca <HAL_GPIO_Init+0xae>
          break;
 80004a2:	e02c      	b.n	80004fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	68db      	ldr	r3, [r3, #12]
 80004a8:	623b      	str	r3, [r7, #32]
          break;
 80004aa:	e028      	b.n	80004fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80004ac:	683b      	ldr	r3, [r7, #0]
 80004ae:	68db      	ldr	r3, [r3, #12]
 80004b0:	3304      	adds	r3, #4
 80004b2:	623b      	str	r3, [r7, #32]
          break;
 80004b4:	e023      	b.n	80004fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	68db      	ldr	r3, [r3, #12]
 80004ba:	3308      	adds	r3, #8
 80004bc:	623b      	str	r3, [r7, #32]
          break;
 80004be:	e01e      	b.n	80004fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	68db      	ldr	r3, [r3, #12]
 80004c4:	330c      	adds	r3, #12
 80004c6:	623b      	str	r3, [r7, #32]
          break;
 80004c8:	e019      	b.n	80004fe <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	689b      	ldr	r3, [r3, #8]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d102      	bne.n	80004d8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80004d2:	2304      	movs	r3, #4
 80004d4:	623b      	str	r3, [r7, #32]
          break;
 80004d6:	e012      	b.n	80004fe <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	689b      	ldr	r3, [r3, #8]
 80004dc:	2b01      	cmp	r3, #1
 80004de:	d105      	bne.n	80004ec <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004e0:	2308      	movs	r3, #8
 80004e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	69fa      	ldr	r2, [r7, #28]
 80004e8:	611a      	str	r2, [r3, #16]
          break;
 80004ea:	e008      	b.n	80004fe <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004ec:	2308      	movs	r3, #8
 80004ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	69fa      	ldr	r2, [r7, #28]
 80004f4:	615a      	str	r2, [r3, #20]
          break;
 80004f6:	e002      	b.n	80004fe <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80004f8:	2300      	movs	r3, #0
 80004fa:	623b      	str	r3, [r7, #32]
          break;
 80004fc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80004fe:	69bb      	ldr	r3, [r7, #24]
 8000500:	2bff      	cmp	r3, #255	; 0xff
 8000502:	d801      	bhi.n	8000508 <HAL_GPIO_Init+0xec>
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	e001      	b.n	800050c <HAL_GPIO_Init+0xf0>
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	3304      	adds	r3, #4
 800050c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800050e:	69bb      	ldr	r3, [r7, #24]
 8000510:	2bff      	cmp	r3, #255	; 0xff
 8000512:	d802      	bhi.n	800051a <HAL_GPIO_Init+0xfe>
 8000514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000516:	009b      	lsls	r3, r3, #2
 8000518:	e002      	b.n	8000520 <HAL_GPIO_Init+0x104>
 800051a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800051c:	3b08      	subs	r3, #8
 800051e:	009b      	lsls	r3, r3, #2
 8000520:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000522:	697b      	ldr	r3, [r7, #20]
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	210f      	movs	r1, #15
 8000528:	693b      	ldr	r3, [r7, #16]
 800052a:	fa01 f303 	lsl.w	r3, r1, r3
 800052e:	43db      	mvns	r3, r3
 8000530:	401a      	ands	r2, r3
 8000532:	6a39      	ldr	r1, [r7, #32]
 8000534:	693b      	ldr	r3, [r7, #16]
 8000536:	fa01 f303 	lsl.w	r3, r1, r3
 800053a:	431a      	orrs	r2, r3
 800053c:	697b      	ldr	r3, [r7, #20]
 800053e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	685b      	ldr	r3, [r3, #4]
 8000544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000548:	2b00      	cmp	r3, #0
 800054a:	f000 8096 	beq.w	800067a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800054e:	4b59      	ldr	r3, [pc, #356]	; (80006b4 <HAL_GPIO_Init+0x298>)
 8000550:	699b      	ldr	r3, [r3, #24]
 8000552:	4a58      	ldr	r2, [pc, #352]	; (80006b4 <HAL_GPIO_Init+0x298>)
 8000554:	f043 0301 	orr.w	r3, r3, #1
 8000558:	6193      	str	r3, [r2, #24]
 800055a:	4b56      	ldr	r3, [pc, #344]	; (80006b4 <HAL_GPIO_Init+0x298>)
 800055c:	699b      	ldr	r3, [r3, #24]
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000566:	4a54      	ldr	r2, [pc, #336]	; (80006b8 <HAL_GPIO_Init+0x29c>)
 8000568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800056a:	089b      	lsrs	r3, r3, #2
 800056c:	3302      	adds	r3, #2
 800056e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000572:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000576:	f003 0303 	and.w	r3, r3, #3
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	220f      	movs	r2, #15
 800057e:	fa02 f303 	lsl.w	r3, r2, r3
 8000582:	43db      	mvns	r3, r3
 8000584:	68fa      	ldr	r2, [r7, #12]
 8000586:	4013      	ands	r3, r2
 8000588:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4a4b      	ldr	r2, [pc, #300]	; (80006bc <HAL_GPIO_Init+0x2a0>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d013      	beq.n	80005ba <HAL_GPIO_Init+0x19e>
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4a4a      	ldr	r2, [pc, #296]	; (80006c0 <HAL_GPIO_Init+0x2a4>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d00d      	beq.n	80005b6 <HAL_GPIO_Init+0x19a>
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4a49      	ldr	r2, [pc, #292]	; (80006c4 <HAL_GPIO_Init+0x2a8>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d007      	beq.n	80005b2 <HAL_GPIO_Init+0x196>
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4a48      	ldr	r2, [pc, #288]	; (80006c8 <HAL_GPIO_Init+0x2ac>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d101      	bne.n	80005ae <HAL_GPIO_Init+0x192>
 80005aa:	2303      	movs	r3, #3
 80005ac:	e006      	b.n	80005bc <HAL_GPIO_Init+0x1a0>
 80005ae:	2304      	movs	r3, #4
 80005b0:	e004      	b.n	80005bc <HAL_GPIO_Init+0x1a0>
 80005b2:	2302      	movs	r3, #2
 80005b4:	e002      	b.n	80005bc <HAL_GPIO_Init+0x1a0>
 80005b6:	2301      	movs	r3, #1
 80005b8:	e000      	b.n	80005bc <HAL_GPIO_Init+0x1a0>
 80005ba:	2300      	movs	r3, #0
 80005bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005be:	f002 0203 	and.w	r2, r2, #3
 80005c2:	0092      	lsls	r2, r2, #2
 80005c4:	4093      	lsls	r3, r2
 80005c6:	68fa      	ldr	r2, [r7, #12]
 80005c8:	4313      	orrs	r3, r2
 80005ca:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80005cc:	493a      	ldr	r1, [pc, #232]	; (80006b8 <HAL_GPIO_Init+0x29c>)
 80005ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005d0:	089b      	lsrs	r3, r3, #2
 80005d2:	3302      	adds	r3, #2
 80005d4:	68fa      	ldr	r2, [r7, #12]
 80005d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	685b      	ldr	r3, [r3, #4]
 80005de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d006      	beq.n	80005f4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80005e6:	4b39      	ldr	r3, [pc, #228]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	4938      	ldr	r1, [pc, #224]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 80005ec:	69bb      	ldr	r3, [r7, #24]
 80005ee:	4313      	orrs	r3, r2
 80005f0:	600b      	str	r3, [r1, #0]
 80005f2:	e006      	b.n	8000602 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80005f4:	4b35      	ldr	r3, [pc, #212]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	69bb      	ldr	r3, [r7, #24]
 80005fa:	43db      	mvns	r3, r3
 80005fc:	4933      	ldr	r1, [pc, #204]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 80005fe:	4013      	ands	r3, r2
 8000600:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800060a:	2b00      	cmp	r3, #0
 800060c:	d006      	beq.n	800061c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800060e:	4b2f      	ldr	r3, [pc, #188]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000610:	685a      	ldr	r2, [r3, #4]
 8000612:	492e      	ldr	r1, [pc, #184]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000614:	69bb      	ldr	r3, [r7, #24]
 8000616:	4313      	orrs	r3, r2
 8000618:	604b      	str	r3, [r1, #4]
 800061a:	e006      	b.n	800062a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800061c:	4b2b      	ldr	r3, [pc, #172]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 800061e:	685a      	ldr	r2, [r3, #4]
 8000620:	69bb      	ldr	r3, [r7, #24]
 8000622:	43db      	mvns	r3, r3
 8000624:	4929      	ldr	r1, [pc, #164]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000626:	4013      	ands	r3, r2
 8000628:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	685b      	ldr	r3, [r3, #4]
 800062e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000632:	2b00      	cmp	r3, #0
 8000634:	d006      	beq.n	8000644 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000636:	4b25      	ldr	r3, [pc, #148]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000638:	689a      	ldr	r2, [r3, #8]
 800063a:	4924      	ldr	r1, [pc, #144]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 800063c:	69bb      	ldr	r3, [r7, #24]
 800063e:	4313      	orrs	r3, r2
 8000640:	608b      	str	r3, [r1, #8]
 8000642:	e006      	b.n	8000652 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000644:	4b21      	ldr	r3, [pc, #132]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000646:	689a      	ldr	r2, [r3, #8]
 8000648:	69bb      	ldr	r3, [r7, #24]
 800064a:	43db      	mvns	r3, r3
 800064c:	491f      	ldr	r1, [pc, #124]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 800064e:	4013      	ands	r3, r2
 8000650:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	685b      	ldr	r3, [r3, #4]
 8000656:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800065a:	2b00      	cmp	r3, #0
 800065c:	d006      	beq.n	800066c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800065e:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000660:	68da      	ldr	r2, [r3, #12]
 8000662:	491a      	ldr	r1, [pc, #104]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000664:	69bb      	ldr	r3, [r7, #24]
 8000666:	4313      	orrs	r3, r2
 8000668:	60cb      	str	r3, [r1, #12]
 800066a:	e006      	b.n	800067a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800066c:	4b17      	ldr	r3, [pc, #92]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 800066e:	68da      	ldr	r2, [r3, #12]
 8000670:	69bb      	ldr	r3, [r7, #24]
 8000672:	43db      	mvns	r3, r3
 8000674:	4915      	ldr	r1, [pc, #84]	; (80006cc <HAL_GPIO_Init+0x2b0>)
 8000676:	4013      	ands	r3, r2
 8000678:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800067a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800067c:	3301      	adds	r3, #1
 800067e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000686:	fa22 f303 	lsr.w	r3, r2, r3
 800068a:	2b00      	cmp	r3, #0
 800068c:	f47f aed0 	bne.w	8000430 <HAL_GPIO_Init+0x14>
  }
}
 8000690:	bf00      	nop
 8000692:	372c      	adds	r7, #44	; 0x2c
 8000694:	46bd      	mov	sp, r7
 8000696:	bc80      	pop	{r7}
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	10210000 	.word	0x10210000
 80006a0:	10110000 	.word	0x10110000
 80006a4:	10120000 	.word	0x10120000
 80006a8:	10310000 	.word	0x10310000
 80006ac:	10320000 	.word	0x10320000
 80006b0:	10220000 	.word	0x10220000
 80006b4:	40021000 	.word	0x40021000
 80006b8:	40010000 	.word	0x40010000
 80006bc:	40010800 	.word	0x40010800
 80006c0:	40010c00 	.word	0x40010c00
 80006c4:	40011000 	.word	0x40011000
 80006c8:	40011400 	.word	0x40011400
 80006cc:	40010400 	.word	0x40010400

080006d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d101      	bne.n	80006e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80006de:	2301      	movs	r3, #1
 80006e0:	e10f      	b.n	8000902 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d106      	bne.n	80006fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2200      	movs	r2, #0
 80006f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f001 fdc8 	bl	800228c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2224      	movs	r2, #36	; 0x24
 8000700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f022 0201 	bic.w	r2, r2, #1
 8000712:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000714:	f001 fb0e 	bl	8001d34 <HAL_RCC_GetPCLK1Freq>
 8000718:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	685b      	ldr	r3, [r3, #4]
 800071e:	4a7b      	ldr	r2, [pc, #492]	; (800090c <HAL_I2C_Init+0x23c>)
 8000720:	4293      	cmp	r3, r2
 8000722:	d807      	bhi.n	8000734 <HAL_I2C_Init+0x64>
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	4a7a      	ldr	r2, [pc, #488]	; (8000910 <HAL_I2C_Init+0x240>)
 8000728:	4293      	cmp	r3, r2
 800072a:	bf94      	ite	ls
 800072c:	2301      	movls	r3, #1
 800072e:	2300      	movhi	r3, #0
 8000730:	b2db      	uxtb	r3, r3
 8000732:	e006      	b.n	8000742 <HAL_I2C_Init+0x72>
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	4a77      	ldr	r2, [pc, #476]	; (8000914 <HAL_I2C_Init+0x244>)
 8000738:	4293      	cmp	r3, r2
 800073a:	bf94      	ite	ls
 800073c:	2301      	movls	r3, #1
 800073e:	2300      	movhi	r3, #0
 8000740:	b2db      	uxtb	r3, r3
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8000746:	2301      	movs	r3, #1
 8000748:	e0db      	b.n	8000902 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	4a72      	ldr	r2, [pc, #456]	; (8000918 <HAL_I2C_Init+0x248>)
 800074e:	fba2 2303 	umull	r2, r3, r2, r3
 8000752:	0c9b      	lsrs	r3, r3, #18
 8000754:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	685b      	ldr	r3, [r3, #4]
 800075c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	68ba      	ldr	r2, [r7, #8]
 8000766:	430a      	orrs	r2, r1
 8000768:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	6a1b      	ldr	r3, [r3, #32]
 8000770:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	685b      	ldr	r3, [r3, #4]
 8000778:	4a64      	ldr	r2, [pc, #400]	; (800090c <HAL_I2C_Init+0x23c>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d802      	bhi.n	8000784 <HAL_I2C_Init+0xb4>
 800077e:	68bb      	ldr	r3, [r7, #8]
 8000780:	3301      	adds	r3, #1
 8000782:	e009      	b.n	8000798 <HAL_I2C_Init+0xc8>
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800078a:	fb02 f303 	mul.w	r3, r2, r3
 800078e:	4a63      	ldr	r2, [pc, #396]	; (800091c <HAL_I2C_Init+0x24c>)
 8000790:	fba2 2303 	umull	r2, r3, r2, r3
 8000794:	099b      	lsrs	r3, r3, #6
 8000796:	3301      	adds	r3, #1
 8000798:	687a      	ldr	r2, [r7, #4]
 800079a:	6812      	ldr	r2, [r2, #0]
 800079c:	430b      	orrs	r3, r1
 800079e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	69db      	ldr	r3, [r3, #28]
 80007a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80007aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	4956      	ldr	r1, [pc, #344]	; (800090c <HAL_I2C_Init+0x23c>)
 80007b4:	428b      	cmp	r3, r1
 80007b6:	d80d      	bhi.n	80007d4 <HAL_I2C_Init+0x104>
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	1e59      	subs	r1, r3, #1
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80007c6:	3301      	adds	r3, #1
 80007c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007cc:	2b04      	cmp	r3, #4
 80007ce:	bf38      	it	cc
 80007d0:	2304      	movcc	r3, #4
 80007d2:	e04f      	b.n	8000874 <HAL_I2C_Init+0x1a4>
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	689b      	ldr	r3, [r3, #8]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d111      	bne.n	8000800 <HAL_I2C_Init+0x130>
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	1e58      	subs	r0, r3, #1
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6859      	ldr	r1, [r3, #4]
 80007e4:	460b      	mov	r3, r1
 80007e6:	005b      	lsls	r3, r3, #1
 80007e8:	440b      	add	r3, r1
 80007ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80007ee:	3301      	adds	r3, #1
 80007f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	bf0c      	ite	eq
 80007f8:	2301      	moveq	r3, #1
 80007fa:	2300      	movne	r3, #0
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	e012      	b.n	8000826 <HAL_I2C_Init+0x156>
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	1e58      	subs	r0, r3, #1
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	6859      	ldr	r1, [r3, #4]
 8000808:	460b      	mov	r3, r1
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	440b      	add	r3, r1
 800080e:	0099      	lsls	r1, r3, #2
 8000810:	440b      	add	r3, r1
 8000812:	fbb0 f3f3 	udiv	r3, r0, r3
 8000816:	3301      	adds	r3, #1
 8000818:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800081c:	2b00      	cmp	r3, #0
 800081e:	bf0c      	ite	eq
 8000820:	2301      	moveq	r3, #1
 8000822:	2300      	movne	r3, #0
 8000824:	b2db      	uxtb	r3, r3
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <HAL_I2C_Init+0x15e>
 800082a:	2301      	movs	r3, #1
 800082c:	e022      	b.n	8000874 <HAL_I2C_Init+0x1a4>
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	689b      	ldr	r3, [r3, #8]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d10e      	bne.n	8000854 <HAL_I2C_Init+0x184>
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	1e58      	subs	r0, r3, #1
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	6859      	ldr	r1, [r3, #4]
 800083e:	460b      	mov	r3, r1
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	440b      	add	r3, r1
 8000844:	fbb0 f3f3 	udiv	r3, r0, r3
 8000848:	3301      	adds	r3, #1
 800084a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800084e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000852:	e00f      	b.n	8000874 <HAL_I2C_Init+0x1a4>
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	1e58      	subs	r0, r3, #1
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	6859      	ldr	r1, [r3, #4]
 800085c:	460b      	mov	r3, r1
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	440b      	add	r3, r1
 8000862:	0099      	lsls	r1, r3, #2
 8000864:	440b      	add	r3, r1
 8000866:	fbb0 f3f3 	udiv	r3, r0, r3
 800086a:	3301      	adds	r3, #1
 800086c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000870:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000874:	6879      	ldr	r1, [r7, #4]
 8000876:	6809      	ldr	r1, [r1, #0]
 8000878:	4313      	orrs	r3, r2
 800087a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	69da      	ldr	r2, [r3, #28]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6a1b      	ldr	r3, [r3, #32]
 800088e:	431a      	orrs	r2, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	430a      	orrs	r2, r1
 8000896:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	689b      	ldr	r3, [r3, #8]
 800089e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80008a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80008a6:	687a      	ldr	r2, [r7, #4]
 80008a8:	6911      	ldr	r1, [r2, #16]
 80008aa:	687a      	ldr	r2, [r7, #4]
 80008ac:	68d2      	ldr	r2, [r2, #12]
 80008ae:	4311      	orrs	r1, r2
 80008b0:	687a      	ldr	r2, [r7, #4]
 80008b2:	6812      	ldr	r2, [r2, #0]
 80008b4:	430b      	orrs	r3, r1
 80008b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	68db      	ldr	r3, [r3, #12]
 80008be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	695a      	ldr	r2, [r3, #20]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	431a      	orrs	r2, r3
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	430a      	orrs	r2, r1
 80008d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f042 0201 	orr.w	r2, r2, #1
 80008e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2200      	movs	r2, #0
 80008e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2220      	movs	r2, #32
 80008ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2200      	movs	r2, #0
 80008f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2200      	movs	r2, #0
 80008fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000900:	2300      	movs	r3, #0
}
 8000902:	4618      	mov	r0, r3
 8000904:	3710      	adds	r7, #16
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	000186a0 	.word	0x000186a0
 8000910:	001e847f 	.word	0x001e847f
 8000914:	003d08ff 	.word	0x003d08ff
 8000918:	431bde83 	.word	0x431bde83
 800091c:	10624dd3 	.word	0x10624dd3

08000920 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b088      	sub	sp, #32
 8000924:	af02      	add	r7, sp, #8
 8000926:	60f8      	str	r0, [r7, #12]
 8000928:	607a      	str	r2, [r7, #4]
 800092a:	461a      	mov	r2, r3
 800092c:	460b      	mov	r3, r1
 800092e:	817b      	strh	r3, [r7, #10]
 8000930:	4613      	mov	r3, r2
 8000932:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000934:	f7ff fc62 	bl	80001fc <HAL_GetTick>
 8000938:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000940:	b2db      	uxtb	r3, r3
 8000942:	2b20      	cmp	r3, #32
 8000944:	f040 80e0 	bne.w	8000b08 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	9300      	str	r3, [sp, #0]
 800094c:	2319      	movs	r3, #25
 800094e:	2201      	movs	r2, #1
 8000950:	4970      	ldr	r1, [pc, #448]	; (8000b14 <HAL_I2C_Master_Transmit+0x1f4>)
 8000952:	68f8      	ldr	r0, [r7, #12]
 8000954:	f000 fc3c 	bl	80011d0 <I2C_WaitOnFlagUntilTimeout>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800095e:	2302      	movs	r3, #2
 8000960:	e0d3      	b.n	8000b0a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000968:	2b01      	cmp	r3, #1
 800096a:	d101      	bne.n	8000970 <HAL_I2C_Master_Transmit+0x50>
 800096c:	2302      	movs	r3, #2
 800096e:	e0cc      	b.n	8000b0a <HAL_I2C_Master_Transmit+0x1ea>
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	2201      	movs	r2, #1
 8000974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	2b01      	cmp	r3, #1
 8000984:	d007      	beq.n	8000996 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f042 0201 	orr.w	r2, r2, #1
 8000994:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80009a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	2221      	movs	r2, #33	; 0x21
 80009aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	2210      	movs	r2, #16
 80009b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	2200      	movs	r2, #0
 80009ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	893a      	ldrh	r2, [r7, #8]
 80009c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80009cc:	b29a      	uxth	r2, r3
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	4a50      	ldr	r2, [pc, #320]	; (8000b18 <HAL_I2C_Master_Transmit+0x1f8>)
 80009d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80009d8:	8979      	ldrh	r1, [r7, #10]
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	6a3a      	ldr	r2, [r7, #32]
 80009de:	68f8      	ldr	r0, [r7, #12]
 80009e0:	f000 faca 	bl	8000f78 <I2C_MasterRequestWrite>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
 80009ec:	e08d      	b.n	8000b0a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80009ee:	2300      	movs	r3, #0
 80009f0:	613b      	str	r3, [r7, #16]
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	695b      	ldr	r3, [r3, #20]
 80009f8:	613b      	str	r3, [r7, #16]
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	613b      	str	r3, [r7, #16]
 8000a02:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8000a04:	e066      	b.n	8000ad4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000a06:	697a      	ldr	r2, [r7, #20]
 8000a08:	6a39      	ldr	r1, [r7, #32]
 8000a0a:	68f8      	ldr	r0, [r7, #12]
 8000a0c:	f000 fcb6 	bl	800137c <I2C_WaitOnTXEFlagUntilTimeout>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d00d      	beq.n	8000a32 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	2b04      	cmp	r3, #4
 8000a1c:	d107      	bne.n	8000a2e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a2c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	e06b      	b.n	8000b0a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a36:	781a      	ldrb	r2, [r3, #0]
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a42:	1c5a      	adds	r2, r3, #1
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000a4c:	b29b      	uxth	r3, r3
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	b29a      	uxth	r2, r3
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	b29a      	uxth	r2, r3
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	695b      	ldr	r3, [r3, #20]
 8000a68:	f003 0304 	and.w	r3, r3, #4
 8000a6c:	2b04      	cmp	r3, #4
 8000a6e:	d11b      	bne.n	8000aa8 <HAL_I2C_Master_Transmit+0x188>
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d017      	beq.n	8000aa8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a7c:	781a      	ldrb	r2, [r3, #0]
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a88:	1c5a      	adds	r2, r3, #1
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	3b01      	subs	r3, #1
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000aa0:	3b01      	subs	r3, #1
 8000aa2:	b29a      	uxth	r2, r3
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000aa8:	697a      	ldr	r2, [r7, #20]
 8000aaa:	6a39      	ldr	r1, [r7, #32]
 8000aac:	68f8      	ldr	r0, [r7, #12]
 8000aae:	f000 fca6 	bl	80013fe <I2C_WaitOnBTFFlagUntilTimeout>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d00d      	beq.n	8000ad4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abc:	2b04      	cmp	r3, #4
 8000abe:	d107      	bne.n	8000ad0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ace:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	e01a      	b.n	8000b0a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d194      	bne.n	8000a06 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000aea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	2220      	movs	r2, #32
 8000af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	2200      	movs	r2, #0
 8000af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	2200      	movs	r2, #0
 8000b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8000b04:	2300      	movs	r3, #0
 8000b06:	e000      	b.n	8000b0a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8000b08:	2302      	movs	r3, #2
  }
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3718      	adds	r7, #24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	00100002 	.word	0x00100002
 8000b18:	ffff0000 	.word	0xffff0000

08000b1c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08c      	sub	sp, #48	; 0x30
 8000b20:	af02      	add	r7, sp, #8
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	607a      	str	r2, [r7, #4]
 8000b26:	461a      	mov	r2, r3
 8000b28:	460b      	mov	r3, r1
 8000b2a:	817b      	strh	r3, [r7, #10]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000b30:	f7ff fb64 	bl	80001fc <HAL_GetTick>
 8000b34:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	2b20      	cmp	r3, #32
 8000b40:	f040 8213 	bne.w	8000f6a <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b46:	9300      	str	r3, [sp, #0]
 8000b48:	2319      	movs	r3, #25
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	497e      	ldr	r1, [pc, #504]	; (8000d48 <HAL_I2C_Master_Receive+0x22c>)
 8000b4e:	68f8      	ldr	r0, [r7, #12]
 8000b50:	f000 fb3e 	bl	80011d0 <I2C_WaitOnFlagUntilTimeout>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	e206      	b.n	8000f6c <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d101      	bne.n	8000b6c <HAL_I2C_Master_Receive+0x50>
 8000b68:	2302      	movs	r3, #2
 8000b6a:	e1ff      	b.n	8000f6c <HAL_I2C_Master_Receive+0x450>
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	2201      	movs	r2, #1
 8000b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d007      	beq.n	8000b92 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f042 0201 	orr.w	r2, r2, #1
 8000b90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000ba0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	2222      	movs	r2, #34	; 0x22
 8000ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	2210      	movs	r2, #16
 8000bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	893a      	ldrh	r2, [r7, #8]
 8000bc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	4a5e      	ldr	r2, [pc, #376]	; (8000d4c <HAL_I2C_Master_Receive+0x230>)
 8000bd2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000bd4:	8979      	ldrh	r1, [r7, #10]
 8000bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000bda:	68f8      	ldr	r0, [r7, #12]
 8000bdc:	f000 fa42 	bl	8001064 <I2C_MasterRequestRead>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	e1c0      	b.n	8000f6c <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d113      	bne.n	8000c1a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	623b      	str	r3, [r7, #32]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	695b      	ldr	r3, [r3, #20]
 8000bfc:	623b      	str	r3, [r7, #32]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	623b      	str	r3, [r7, #32]
 8000c06:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	e194      	b.n	8000f44 <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d11d      	bne.n	8000c5e <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c30:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c32:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000c34:	2300      	movs	r3, #0
 8000c36:	61fb      	str	r3, [r7, #28]
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	695b      	ldr	r3, [r3, #20]
 8000c3e:	61fb      	str	r3, [r7, #28]
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	699b      	ldr	r3, [r3, #24]
 8000c46:	61fb      	str	r3, [r7, #28]
 8000c48:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000c58:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000c5a:	b662      	cpsie	i
 8000c5c:	e172      	b.n	8000f44 <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	d11d      	bne.n	8000ca2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000c74:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000c76:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000c78:	2300      	movs	r3, #0
 8000c7a:	61bb      	str	r3, [r7, #24]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	695b      	ldr	r3, [r3, #20]
 8000c82:	61bb      	str	r3, [r7, #24]
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	699b      	ldr	r3, [r3, #24]
 8000c8a:	61bb      	str	r3, [r7, #24]
 8000c8c:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c9c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000c9e:	b662      	cpsie	i
 8000ca0:	e150      	b.n	8000f44 <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000cb0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	695b      	ldr	r3, [r3, #20]
 8000cbc:	617b      	str	r3, [r7, #20]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	617b      	str	r3, [r7, #20]
 8000cc6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8000cc8:	e13c      	b.n	8000f44 <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000cce:	2b03      	cmp	r3, #3
 8000cd0:	f200 80f5 	bhi.w	8000ebe <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d123      	bne.n	8000d24 <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cde:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000ce0:	68f8      	ldr	r0, [r7, #12]
 8000ce2:	f000 fbcd 	bl	8001480 <I2C_WaitOnRXNEFlagUntilTimeout>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 8000cec:	2301      	movs	r3, #1
 8000cee:	e13d      	b.n	8000f6c <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	691a      	ldr	r2, [r3, #16]
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cfa:	b2d2      	uxtb	r2, r2
 8000cfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d02:	1c5a      	adds	r2, r3, #1
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d0c:	3b01      	subs	r3, #1
 8000d0e:	b29a      	uxth	r2, r3
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	3b01      	subs	r3, #1
 8000d1c:	b29a      	uxth	r2, r3
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	855a      	strh	r2, [r3, #42]	; 0x2a
 8000d22:	e10f      	b.n	8000f44 <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	d150      	bne.n	8000dce <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2e:	9300      	str	r3, [sp, #0]
 8000d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d32:	2200      	movs	r2, #0
 8000d34:	4906      	ldr	r1, [pc, #24]	; (8000d50 <HAL_I2C_Master_Receive+0x234>)
 8000d36:	68f8      	ldr	r0, [r7, #12]
 8000d38:	f000 fa4a 	bl	80011d0 <I2C_WaitOnFlagUntilTimeout>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d008      	beq.n	8000d54 <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e112      	b.n	8000f6c <HAL_I2C_Master_Receive+0x450>
 8000d46:	bf00      	nop
 8000d48:	00100002 	.word	0x00100002
 8000d4c:	ffff0000 	.word	0xffff0000
 8000d50:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8000d54:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d64:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	691a      	ldr	r2, [r3, #16]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d70:	b2d2      	uxtb	r2, r2
 8000d72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d78:	1c5a      	adds	r2, r3, #1
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d82:	3b01      	subs	r3, #1
 8000d84:	b29a      	uxth	r2, r3
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	3b01      	subs	r3, #1
 8000d92:	b29a      	uxth	r2, r3
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8000d98:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	691a      	ldr	r2, [r3, #16]
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da4:	b2d2      	uxtb	r2, r2
 8000da6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dac:	1c5a      	adds	r2, r3, #1
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000db6:	3b01      	subs	r3, #1
 8000db8:	b29a      	uxth	r2, r3
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	3b01      	subs	r3, #1
 8000dc6:	b29a      	uxth	r2, r3
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8000dcc:	e0ba      	b.n	8000f44 <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd0:	9300      	str	r3, [sp, #0]
 8000dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	4967      	ldr	r1, [pc, #412]	; (8000f74 <HAL_I2C_Master_Receive+0x458>)
 8000dd8:	68f8      	ldr	r0, [r7, #12]
 8000dda:	f000 f9f9 	bl	80011d0 <I2C_WaitOnFlagUntilTimeout>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 8000de4:	2301      	movs	r3, #1
 8000de6:	e0c1      	b.n	8000f6c <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000df6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000df8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	691a      	ldr	r2, [r3, #16]
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e04:	b2d2      	uxtb	r2, r2
 8000e06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e0c:	1c5a      	adds	r2, r3, #1
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e16:	3b01      	subs	r3, #1
 8000e18:	b29a      	uxth	r2, r3
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e22:	b29b      	uxth	r3, r3
 8000e24:	3b01      	subs	r3, #1
 8000e26:	b29a      	uxth	r2, r3
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2e:	9300      	str	r3, [sp, #0]
 8000e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e32:	2200      	movs	r2, #0
 8000e34:	494f      	ldr	r1, [pc, #316]	; (8000f74 <HAL_I2C_Master_Receive+0x458>)
 8000e36:	68f8      	ldr	r0, [r7, #12]
 8000e38:	f000 f9ca 	bl	80011d0 <I2C_WaitOnFlagUntilTimeout>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e092      	b.n	8000f6c <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e54:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	691a      	ldr	r2, [r3, #16]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e60:	b2d2      	uxtb	r2, r2
 8000e62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e68:	1c5a      	adds	r2, r3, #1
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000e72:	3b01      	subs	r3, #1
 8000e74:	b29a      	uxth	r2, r3
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	3b01      	subs	r3, #1
 8000e82:	b29a      	uxth	r2, r3
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8000e88:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	691a      	ldr	r2, [r3, #16]
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e94:	b2d2      	uxtb	r2, r2
 8000e96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e9c:	1c5a      	adds	r2, r3, #1
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	b29a      	uxth	r2, r3
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8000ebc:	e042      	b.n	8000f44 <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000ebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ec0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000ec2:	68f8      	ldr	r0, [r7, #12]
 8000ec4:	f000 fadc 	bl	8001480 <I2C_WaitOnRXNEFlagUntilTimeout>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e04c      	b.n	8000f6c <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	691a      	ldr	r2, [r3, #16]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000edc:	b2d2      	uxtb	r2, r2
 8000ede:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee4:	1c5a      	adds	r2, r3, #1
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	b29a      	uxth	r2, r3
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	3b01      	subs	r3, #1
 8000efe:	b29a      	uxth	r2, r3
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	695b      	ldr	r3, [r3, #20]
 8000f0a:	f003 0304 	and.w	r3, r3, #4
 8000f0e:	2b04      	cmp	r3, #4
 8000f10:	d118      	bne.n	8000f44 <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	691a      	ldr	r2, [r3, #16]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1c:	b2d2      	uxtb	r2, r2
 8000f1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f24:	1c5a      	adds	r2, r3, #1
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	f47f aebe 	bne.w	8000cca <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	2220      	movs	r2, #32
 8000f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	2200      	movs	r2, #0
 8000f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8000f66:	2300      	movs	r3, #0
 8000f68:	e000      	b.n	8000f6c <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 8000f6a:	2302      	movs	r3, #2
  }
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3728      	adds	r7, #40	; 0x28
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	00010004 	.word	0x00010004

08000f78 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b088      	sub	sp, #32
 8000f7c:	af02      	add	r7, sp, #8
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	607a      	str	r2, [r7, #4]
 8000f82:	603b      	str	r3, [r7, #0]
 8000f84:	460b      	mov	r3, r1
 8000f86:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	2b08      	cmp	r3, #8
 8000f92:	d006      	beq.n	8000fa2 <I2C_MasterRequestWrite+0x2a>
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d003      	beq.n	8000fa2 <I2C_MasterRequestWrite+0x2a>
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000fa0:	d108      	bne.n	8000fb4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	e00b      	b.n	8000fcc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb8:	2b12      	cmp	r3, #18
 8000fba:	d107      	bne.n	8000fcc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000fd8:	68f8      	ldr	r0, [r7, #12]
 8000fda:	f000 f8f9 	bl	80011d0 <I2C_WaitOnFlagUntilTimeout>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e035      	b.n	8001054 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	691b      	ldr	r3, [r3, #16]
 8000fec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000ff0:	d108      	bne.n	8001004 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000ff2:	897b      	ldrh	r3, [r7, #10]
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001000:	611a      	str	r2, [r3, #16]
 8001002:	e01b      	b.n	800103c <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001004:	897b      	ldrh	r3, [r7, #10]
 8001006:	11db      	asrs	r3, r3, #7
 8001008:	b2db      	uxtb	r3, r3
 800100a:	f003 0306 	and.w	r3, r3, #6
 800100e:	b2db      	uxtb	r3, r3
 8001010:	f063 030f 	orn	r3, r3, #15
 8001014:	b2da      	uxtb	r2, r3
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	490e      	ldr	r1, [pc, #56]	; (800105c <I2C_MasterRequestWrite+0xe4>)
 8001022:	68f8      	ldr	r0, [r7, #12]
 8001024:	f000 f92b 	bl	800127e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e010      	b.n	8001054 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001032:	897b      	ldrh	r3, [r7, #10]
 8001034:	b2da      	uxtb	r2, r3
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	4907      	ldr	r1, [pc, #28]	; (8001060 <I2C_MasterRequestWrite+0xe8>)
 8001042:	68f8      	ldr	r0, [r7, #12]
 8001044:	f000 f91b 	bl	800127e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e000      	b.n	8001054 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8001052:	2300      	movs	r3, #0
}
 8001054:	4618      	mov	r0, r3
 8001056:	3718      	adds	r7, #24
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	00010008 	.word	0x00010008
 8001060:	00010002 	.word	0x00010002

08001064 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b088      	sub	sp, #32
 8001068:	af02      	add	r7, sp, #8
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	607a      	str	r2, [r7, #4]
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	460b      	mov	r3, r1
 8001072:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001078:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001088:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	2b08      	cmp	r3, #8
 800108e:	d006      	beq.n	800109e <I2C_MasterRequestRead+0x3a>
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d003      	beq.n	800109e <I2C_MasterRequestRead+0x3a>
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800109c:	d108      	bne.n	80010b0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	e00b      	b.n	80010c8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b4:	2b11      	cmp	r3, #17
 80010b6:	d107      	bne.n	80010c8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2200      	movs	r2, #0
 80010d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80010d4:	68f8      	ldr	r0, [r7, #12]
 80010d6:	f000 f87b 	bl	80011d0 <I2C_WaitOnFlagUntilTimeout>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e06d      	b.n	80011c0 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	691b      	ldr	r3, [r3, #16]
 80010e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80010ec:	d108      	bne.n	8001100 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80010ee:	897b      	ldrh	r3, [r7, #10]
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	f043 0301 	orr.w	r3, r3, #1
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	611a      	str	r2, [r3, #16]
 80010fe:	e053      	b.n	80011a8 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001100:	897b      	ldrh	r3, [r7, #10]
 8001102:	11db      	asrs	r3, r3, #7
 8001104:	b2db      	uxtb	r3, r3
 8001106:	f003 0306 	and.w	r3, r3, #6
 800110a:	b2db      	uxtb	r3, r3
 800110c:	f063 030f 	orn	r3, r3, #15
 8001110:	b2da      	uxtb	r2, r3
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	492a      	ldr	r1, [pc, #168]	; (80011c8 <I2C_MasterRequestRead+0x164>)
 800111e:	68f8      	ldr	r0, [r7, #12]
 8001120:	f000 f8ad 	bl	800127e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e048      	b.n	80011c0 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800112e:	897b      	ldrh	r3, [r7, #10]
 8001130:	b2da      	uxtb	r2, r3
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	4923      	ldr	r1, [pc, #140]	; (80011cc <I2C_MasterRequestRead+0x168>)
 800113e:	68f8      	ldr	r0, [r7, #12]
 8001140:	f000 f89d 	bl	800127e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e038      	b.n	80011c0 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	695b      	ldr	r3, [r3, #20]
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	613b      	str	r3, [r7, #16]
 8001162:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001172:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2200      	movs	r2, #0
 800117c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001180:	68f8      	ldr	r0, [r7, #12]
 8001182:	f000 f825 	bl	80011d0 <I2C_WaitOnFlagUntilTimeout>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e017      	b.n	80011c0 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001190:	897b      	ldrh	r3, [r7, #10]
 8001192:	11db      	asrs	r3, r3, #7
 8001194:	b2db      	uxtb	r3, r3
 8001196:	f003 0306 	and.w	r3, r3, #6
 800119a:	b2db      	uxtb	r3, r3
 800119c:	f063 030e 	orn	r3, r3, #14
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	4907      	ldr	r1, [pc, #28]	; (80011cc <I2C_MasterRequestRead+0x168>)
 80011ae:	68f8      	ldr	r0, [r7, #12]
 80011b0:	f000 f865 	bl	800127e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e000      	b.n	80011c0 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 80011be:	2300      	movs	r3, #0
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3718      	adds	r7, #24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	00010008 	.word	0x00010008
 80011cc:	00010002 	.word	0x00010002

080011d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	603b      	str	r3, [r7, #0]
 80011dc:	4613      	mov	r3, r2
 80011de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80011e0:	e025      	b.n	800122e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e8:	d021      	beq.n	800122e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80011ea:	f7ff f807 	bl	80001fc <HAL_GetTick>
 80011ee:	4602      	mov	r2, r0
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	683a      	ldr	r2, [r7, #0]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d302      	bcc.n	8001200 <I2C_WaitOnFlagUntilTimeout+0x30>
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d116      	bne.n	800122e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	2200      	movs	r2, #0
 8001204:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2220      	movs	r2, #32
 800120a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	2200      	movs	r2, #0
 8001212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	f043 0220 	orr.w	r2, r3, #32
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2200      	movs	r2, #0
 8001226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e023      	b.n	8001276 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	0c1b      	lsrs	r3, r3, #16
 8001232:	b2db      	uxtb	r3, r3
 8001234:	2b01      	cmp	r3, #1
 8001236:	d10d      	bne.n	8001254 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	43da      	mvns	r2, r3
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	4013      	ands	r3, r2
 8001244:	b29b      	uxth	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	bf0c      	ite	eq
 800124a:	2301      	moveq	r3, #1
 800124c:	2300      	movne	r3, #0
 800124e:	b2db      	uxtb	r3, r3
 8001250:	461a      	mov	r2, r3
 8001252:	e00c      	b.n	800126e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	699b      	ldr	r3, [r3, #24]
 800125a:	43da      	mvns	r2, r3
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	4013      	ands	r3, r2
 8001260:	b29b      	uxth	r3, r3
 8001262:	2b00      	cmp	r3, #0
 8001264:	bf0c      	ite	eq
 8001266:	2301      	moveq	r3, #1
 8001268:	2300      	movne	r3, #0
 800126a:	b2db      	uxtb	r3, r3
 800126c:	461a      	mov	r2, r3
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	429a      	cmp	r2, r3
 8001272:	d0b6      	beq.n	80011e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b084      	sub	sp, #16
 8001282:	af00      	add	r7, sp, #0
 8001284:	60f8      	str	r0, [r7, #12]
 8001286:	60b9      	str	r1, [r7, #8]
 8001288:	607a      	str	r2, [r7, #4]
 800128a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800128c:	e051      	b.n	8001332 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	695b      	ldr	r3, [r3, #20]
 8001294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800129c:	d123      	bne.n	80012e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012ac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80012b6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2200      	movs	r2, #0
 80012bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	2220      	movs	r2, #32
 80012c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	2200      	movs	r2, #0
 80012ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	f043 0204 	orr.w	r2, r3, #4
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e046      	b.n	8001374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ec:	d021      	beq.n	8001332 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012ee:	f7fe ff85 	bl	80001fc <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d302      	bcc.n	8001304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d116      	bne.n	8001332 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2200      	movs	r2, #0
 8001308:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	2220      	movs	r2, #32
 800130e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2200      	movs	r2, #0
 8001316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	f043 0220 	orr.w	r2, r3, #32
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	2200      	movs	r2, #0
 800132a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e020      	b.n	8001374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	0c1b      	lsrs	r3, r3, #16
 8001336:	b2db      	uxtb	r3, r3
 8001338:	2b01      	cmp	r3, #1
 800133a:	d10c      	bne.n	8001356 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	43da      	mvns	r2, r3
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	4013      	ands	r3, r2
 8001348:	b29b      	uxth	r3, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	bf14      	ite	ne
 800134e:	2301      	movne	r3, #1
 8001350:	2300      	moveq	r3, #0
 8001352:	b2db      	uxtb	r3, r3
 8001354:	e00b      	b.n	800136e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	43da      	mvns	r2, r3
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	4013      	ands	r3, r2
 8001362:	b29b      	uxth	r3, r3
 8001364:	2b00      	cmp	r3, #0
 8001366:	bf14      	ite	ne
 8001368:	2301      	movne	r3, #1
 800136a:	2300      	moveq	r3, #0
 800136c:	b2db      	uxtb	r3, r3
 800136e:	2b00      	cmp	r3, #0
 8001370:	d18d      	bne.n	800128e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001388:	e02d      	b.n	80013e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800138a:	68f8      	ldr	r0, [r7, #12]
 800138c:	f000 f8ce 	bl	800152c <I2C_IsAcknowledgeFailed>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e02d      	b.n	80013f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a0:	d021      	beq.n	80013e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013a2:	f7fe ff2b 	bl	80001fc <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	68ba      	ldr	r2, [r7, #8]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d302      	bcc.n	80013b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d116      	bne.n	80013e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2200      	movs	r2, #0
 80013bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2220      	movs	r2, #32
 80013c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	f043 0220 	orr.w	r2, r3, #32
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e007      	b.n	80013f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	695b      	ldr	r3, [r3, #20]
 80013ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013f0:	2b80      	cmp	r3, #128	; 0x80
 80013f2:	d1ca      	bne.n	800138a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b084      	sub	sp, #16
 8001402:	af00      	add	r7, sp, #0
 8001404:	60f8      	str	r0, [r7, #12]
 8001406:	60b9      	str	r1, [r7, #8]
 8001408:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800140a:	e02d      	b.n	8001468 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800140c:	68f8      	ldr	r0, [r7, #12]
 800140e:	f000 f88d 	bl	800152c <I2C_IsAcknowledgeFailed>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e02d      	b.n	8001478 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001422:	d021      	beq.n	8001468 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001424:	f7fe feea 	bl	80001fc <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	429a      	cmp	r2, r3
 8001432:	d302      	bcc.n	800143a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d116      	bne.n	8001468 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	2200      	movs	r2, #0
 800143e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2220      	movs	r2, #32
 8001444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2200      	movs	r2, #0
 800144c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001454:	f043 0220 	orr.w	r2, r3, #32
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2200      	movs	r2, #0
 8001460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e007      	b.n	8001478 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	f003 0304 	and.w	r3, r3, #4
 8001472:	2b04      	cmp	r3, #4
 8001474:	d1ca      	bne.n	800140c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800148c:	e042      	b.n	8001514 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	695b      	ldr	r3, [r3, #20]
 8001494:	f003 0310 	and.w	r3, r3, #16
 8001498:	2b10      	cmp	r3, #16
 800149a:	d119      	bne.n	80014d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f06f 0210 	mvn.w	r2, #16
 80014a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2200      	movs	r2, #0
 80014aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2220      	movs	r2, #32
 80014b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2200      	movs	r2, #0
 80014b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e029      	b.n	8001524 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014d0:	f7fe fe94 	bl	80001fc <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	68ba      	ldr	r2, [r7, #8]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d302      	bcc.n	80014e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d116      	bne.n	8001514 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2200      	movs	r2, #0
 80014ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2220      	movs	r2, #32
 80014f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001500:	f043 0220 	orr.w	r2, r3, #32
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e007      	b.n	8001524 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800151e:	2b40      	cmp	r3, #64	; 0x40
 8001520:	d1b5      	bne.n	800148e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	695b      	ldr	r3, [r3, #20]
 800153a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800153e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001542:	d11b      	bne.n	800157c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800154c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2220      	movs	r2, #32
 8001558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	f043 0204 	orr.w	r2, r3, #4
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e000      	b.n	800157e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr

08001588 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d101      	bne.n	800159a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e26c      	b.n	8001a74 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 8087 	beq.w	80016b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015a8:	4b92      	ldr	r3, [pc, #584]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 030c 	and.w	r3, r3, #12
 80015b0:	2b04      	cmp	r3, #4
 80015b2:	d00c      	beq.n	80015ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015b4:	4b8f      	ldr	r3, [pc, #572]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 030c 	and.w	r3, r3, #12
 80015bc:	2b08      	cmp	r3, #8
 80015be:	d112      	bne.n	80015e6 <HAL_RCC_OscConfig+0x5e>
 80015c0:	4b8c      	ldr	r3, [pc, #560]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015cc:	d10b      	bne.n	80015e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ce:	4b89      	ldr	r3, [pc, #548]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d06c      	beq.n	80016b4 <HAL_RCC_OscConfig+0x12c>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d168      	bne.n	80016b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e246      	b.n	8001a74 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015ee:	d106      	bne.n	80015fe <HAL_RCC_OscConfig+0x76>
 80015f0:	4b80      	ldr	r3, [pc, #512]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a7f      	ldr	r2, [pc, #508]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 80015f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015fa:	6013      	str	r3, [r2, #0]
 80015fc:	e02e      	b.n	800165c <HAL_RCC_OscConfig+0xd4>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d10c      	bne.n	8001620 <HAL_RCC_OscConfig+0x98>
 8001606:	4b7b      	ldr	r3, [pc, #492]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a7a      	ldr	r2, [pc, #488]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 800160c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	4b78      	ldr	r3, [pc, #480]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a77      	ldr	r2, [pc, #476]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 8001618:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800161c:	6013      	str	r3, [r2, #0]
 800161e:	e01d      	b.n	800165c <HAL_RCC_OscConfig+0xd4>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001628:	d10c      	bne.n	8001644 <HAL_RCC_OscConfig+0xbc>
 800162a:	4b72      	ldr	r3, [pc, #456]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a71      	ldr	r2, [pc, #452]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 8001630:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001634:	6013      	str	r3, [r2, #0]
 8001636:	4b6f      	ldr	r3, [pc, #444]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a6e      	ldr	r2, [pc, #440]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 800163c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001640:	6013      	str	r3, [r2, #0]
 8001642:	e00b      	b.n	800165c <HAL_RCC_OscConfig+0xd4>
 8001644:	4b6b      	ldr	r3, [pc, #428]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a6a      	ldr	r2, [pc, #424]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 800164a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800164e:	6013      	str	r3, [r2, #0]
 8001650:	4b68      	ldr	r3, [pc, #416]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a67      	ldr	r2, [pc, #412]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 8001656:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800165a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d013      	beq.n	800168c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001664:	f7fe fdca 	bl	80001fc <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800166c:	f7fe fdc6 	bl	80001fc <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b64      	cmp	r3, #100	; 0x64
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e1fa      	b.n	8001a74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167e:	4b5d      	ldr	r3, [pc, #372]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d0f0      	beq.n	800166c <HAL_RCC_OscConfig+0xe4>
 800168a:	e014      	b.n	80016b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168c:	f7fe fdb6 	bl	80001fc <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001694:	f7fe fdb2 	bl	80001fc <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b64      	cmp	r3, #100	; 0x64
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e1e6      	b.n	8001a74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016a6:	4b53      	ldr	r3, [pc, #332]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1f0      	bne.n	8001694 <HAL_RCC_OscConfig+0x10c>
 80016b2:	e000      	b.n	80016b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d063      	beq.n	800178a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016c2:	4b4c      	ldr	r3, [pc, #304]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f003 030c 	and.w	r3, r3, #12
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d00b      	beq.n	80016e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016ce:	4b49      	ldr	r3, [pc, #292]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f003 030c 	and.w	r3, r3, #12
 80016d6:	2b08      	cmp	r3, #8
 80016d8:	d11c      	bne.n	8001714 <HAL_RCC_OscConfig+0x18c>
 80016da:	4b46      	ldr	r3, [pc, #280]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d116      	bne.n	8001714 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016e6:	4b43      	ldr	r3, [pc, #268]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d005      	beq.n	80016fe <HAL_RCC_OscConfig+0x176>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d001      	beq.n	80016fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e1ba      	b.n	8001a74 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016fe:	4b3d      	ldr	r3, [pc, #244]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	4939      	ldr	r1, [pc, #228]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 800170e:	4313      	orrs	r3, r2
 8001710:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001712:	e03a      	b.n	800178a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d020      	beq.n	800175e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800171c:	4b36      	ldr	r3, [pc, #216]	; (80017f8 <HAL_RCC_OscConfig+0x270>)
 800171e:	2201      	movs	r2, #1
 8001720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001722:	f7fe fd6b 	bl	80001fc <HAL_GetTick>
 8001726:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001728:	e008      	b.n	800173c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800172a:	f7fe fd67 	bl	80001fc <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e19b      	b.n	8001a74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800173c:	4b2d      	ldr	r3, [pc, #180]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d0f0      	beq.n	800172a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001748:	4b2a      	ldr	r3, [pc, #168]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	695b      	ldr	r3, [r3, #20]
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	4927      	ldr	r1, [pc, #156]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 8001758:	4313      	orrs	r3, r2
 800175a:	600b      	str	r3, [r1, #0]
 800175c:	e015      	b.n	800178a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800175e:	4b26      	ldr	r3, [pc, #152]	; (80017f8 <HAL_RCC_OscConfig+0x270>)
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001764:	f7fe fd4a 	bl	80001fc <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800176c:	f7fe fd46 	bl	80001fc <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e17a      	b.n	8001a74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800177e:	4b1d      	ldr	r3, [pc, #116]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1f0      	bne.n	800176c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0308 	and.w	r3, r3, #8
 8001792:	2b00      	cmp	r3, #0
 8001794:	d03a      	beq.n	800180c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d019      	beq.n	80017d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800179e:	4b17      	ldr	r3, [pc, #92]	; (80017fc <HAL_RCC_OscConfig+0x274>)
 80017a0:	2201      	movs	r2, #1
 80017a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a4:	f7fe fd2a 	bl	80001fc <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ac:	f7fe fd26 	bl	80001fc <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e15a      	b.n	8001a74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017be:	4b0d      	ldr	r3, [pc, #52]	; (80017f4 <HAL_RCC_OscConfig+0x26c>)
 80017c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d0f0      	beq.n	80017ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017ca:	2001      	movs	r0, #1
 80017cc:	f000 fada 	bl	8001d84 <RCC_Delay>
 80017d0:	e01c      	b.n	800180c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017d2:	4b0a      	ldr	r3, [pc, #40]	; (80017fc <HAL_RCC_OscConfig+0x274>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d8:	f7fe fd10 	bl	80001fc <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017de:	e00f      	b.n	8001800 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017e0:	f7fe fd0c 	bl	80001fc <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d908      	bls.n	8001800 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e140      	b.n	8001a74 <HAL_RCC_OscConfig+0x4ec>
 80017f2:	bf00      	nop
 80017f4:	40021000 	.word	0x40021000
 80017f8:	42420000 	.word	0x42420000
 80017fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001800:	4b9e      	ldr	r3, [pc, #632]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 8001802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1e9      	bne.n	80017e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0304 	and.w	r3, r3, #4
 8001814:	2b00      	cmp	r3, #0
 8001816:	f000 80a6 	beq.w	8001966 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800181a:	2300      	movs	r3, #0
 800181c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800181e:	4b97      	ldr	r3, [pc, #604]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d10d      	bne.n	8001846 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800182a:	4b94      	ldr	r3, [pc, #592]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	4a93      	ldr	r2, [pc, #588]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 8001830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001834:	61d3      	str	r3, [r2, #28]
 8001836:	4b91      	ldr	r3, [pc, #580]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001842:	2301      	movs	r3, #1
 8001844:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001846:	4b8e      	ldr	r3, [pc, #568]	; (8001a80 <HAL_RCC_OscConfig+0x4f8>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184e:	2b00      	cmp	r3, #0
 8001850:	d118      	bne.n	8001884 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001852:	4b8b      	ldr	r3, [pc, #556]	; (8001a80 <HAL_RCC_OscConfig+0x4f8>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a8a      	ldr	r2, [pc, #552]	; (8001a80 <HAL_RCC_OscConfig+0x4f8>)
 8001858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800185c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800185e:	f7fe fccd 	bl	80001fc <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001866:	f7fe fcc9 	bl	80001fc <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b64      	cmp	r3, #100	; 0x64
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e0fd      	b.n	8001a74 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001878:	4b81      	ldr	r3, [pc, #516]	; (8001a80 <HAL_RCC_OscConfig+0x4f8>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001880:	2b00      	cmp	r3, #0
 8001882:	d0f0      	beq.n	8001866 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d106      	bne.n	800189a <HAL_RCC_OscConfig+0x312>
 800188c:	4b7b      	ldr	r3, [pc, #492]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 800188e:	6a1b      	ldr	r3, [r3, #32]
 8001890:	4a7a      	ldr	r2, [pc, #488]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 8001892:	f043 0301 	orr.w	r3, r3, #1
 8001896:	6213      	str	r3, [r2, #32]
 8001898:	e02d      	b.n	80018f6 <HAL_RCC_OscConfig+0x36e>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d10c      	bne.n	80018bc <HAL_RCC_OscConfig+0x334>
 80018a2:	4b76      	ldr	r3, [pc, #472]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 80018a4:	6a1b      	ldr	r3, [r3, #32]
 80018a6:	4a75      	ldr	r2, [pc, #468]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 80018a8:	f023 0301 	bic.w	r3, r3, #1
 80018ac:	6213      	str	r3, [r2, #32]
 80018ae:	4b73      	ldr	r3, [pc, #460]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 80018b0:	6a1b      	ldr	r3, [r3, #32]
 80018b2:	4a72      	ldr	r2, [pc, #456]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 80018b4:	f023 0304 	bic.w	r3, r3, #4
 80018b8:	6213      	str	r3, [r2, #32]
 80018ba:	e01c      	b.n	80018f6 <HAL_RCC_OscConfig+0x36e>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	2b05      	cmp	r3, #5
 80018c2:	d10c      	bne.n	80018de <HAL_RCC_OscConfig+0x356>
 80018c4:	4b6d      	ldr	r3, [pc, #436]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 80018c6:	6a1b      	ldr	r3, [r3, #32]
 80018c8:	4a6c      	ldr	r2, [pc, #432]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 80018ca:	f043 0304 	orr.w	r3, r3, #4
 80018ce:	6213      	str	r3, [r2, #32]
 80018d0:	4b6a      	ldr	r3, [pc, #424]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	4a69      	ldr	r2, [pc, #420]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 80018d6:	f043 0301 	orr.w	r3, r3, #1
 80018da:	6213      	str	r3, [r2, #32]
 80018dc:	e00b      	b.n	80018f6 <HAL_RCC_OscConfig+0x36e>
 80018de:	4b67      	ldr	r3, [pc, #412]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 80018e0:	6a1b      	ldr	r3, [r3, #32]
 80018e2:	4a66      	ldr	r2, [pc, #408]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 80018e4:	f023 0301 	bic.w	r3, r3, #1
 80018e8:	6213      	str	r3, [r2, #32]
 80018ea:	4b64      	ldr	r3, [pc, #400]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 80018ec:	6a1b      	ldr	r3, [r3, #32]
 80018ee:	4a63      	ldr	r2, [pc, #396]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 80018f0:	f023 0304 	bic.w	r3, r3, #4
 80018f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d015      	beq.n	800192a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018fe:	f7fe fc7d 	bl	80001fc <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001904:	e00a      	b.n	800191c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001906:	f7fe fc79 	bl	80001fc <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	f241 3288 	movw	r2, #5000	; 0x1388
 8001914:	4293      	cmp	r3, r2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e0ab      	b.n	8001a74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800191c:	4b57      	ldr	r3, [pc, #348]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 800191e:	6a1b      	ldr	r3, [r3, #32]
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0ee      	beq.n	8001906 <HAL_RCC_OscConfig+0x37e>
 8001928:	e014      	b.n	8001954 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800192a:	f7fe fc67 	bl	80001fc <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001930:	e00a      	b.n	8001948 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001932:	f7fe fc63 	bl	80001fc <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001940:	4293      	cmp	r3, r2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e095      	b.n	8001a74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001948:	4b4c      	ldr	r3, [pc, #304]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1ee      	bne.n	8001932 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001954:	7dfb      	ldrb	r3, [r7, #23]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d105      	bne.n	8001966 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800195a:	4b48      	ldr	r3, [pc, #288]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	4a47      	ldr	r2, [pc, #284]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 8001960:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001964:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	2b00      	cmp	r3, #0
 800196c:	f000 8081 	beq.w	8001a72 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001970:	4b42      	ldr	r3, [pc, #264]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 030c 	and.w	r3, r3, #12
 8001978:	2b08      	cmp	r3, #8
 800197a:	d061      	beq.n	8001a40 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	69db      	ldr	r3, [r3, #28]
 8001980:	2b02      	cmp	r3, #2
 8001982:	d146      	bne.n	8001a12 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001984:	4b3f      	ldr	r3, [pc, #252]	; (8001a84 <HAL_RCC_OscConfig+0x4fc>)
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198a:	f7fe fc37 	bl	80001fc <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001992:	f7fe fc33 	bl	80001fc <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e067      	b.n	8001a74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019a4:	4b35      	ldr	r3, [pc, #212]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1f0      	bne.n	8001992 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a1b      	ldr	r3, [r3, #32]
 80019b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b8:	d108      	bne.n	80019cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019ba:	4b30      	ldr	r3, [pc, #192]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	492d      	ldr	r1, [pc, #180]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 80019c8:	4313      	orrs	r3, r2
 80019ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019cc:	4b2b      	ldr	r3, [pc, #172]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a19      	ldr	r1, [r3, #32]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019dc:	430b      	orrs	r3, r1
 80019de:	4927      	ldr	r1, [pc, #156]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019e4:	4b27      	ldr	r3, [pc, #156]	; (8001a84 <HAL_RCC_OscConfig+0x4fc>)
 80019e6:	2201      	movs	r2, #1
 80019e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ea:	f7fe fc07 	bl	80001fc <HAL_GetTick>
 80019ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019f0:	e008      	b.n	8001a04 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019f2:	f7fe fc03 	bl	80001fc <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e037      	b.n	8001a74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a04:	4b1d      	ldr	r3, [pc, #116]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d0f0      	beq.n	80019f2 <HAL_RCC_OscConfig+0x46a>
 8001a10:	e02f      	b.n	8001a72 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a12:	4b1c      	ldr	r3, [pc, #112]	; (8001a84 <HAL_RCC_OscConfig+0x4fc>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a18:	f7fe fbf0 	bl	80001fc <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a20:	f7fe fbec 	bl	80001fc <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e020      	b.n	8001a74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a32:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1f0      	bne.n	8001a20 <HAL_RCC_OscConfig+0x498>
 8001a3e:	e018      	b.n	8001a72 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	69db      	ldr	r3, [r3, #28]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d101      	bne.n	8001a4c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e013      	b.n	8001a74 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a4c:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <HAL_RCC_OscConfig+0x4f4>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d106      	bne.n	8001a6e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d001      	beq.n	8001a72 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e000      	b.n	8001a74 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3718      	adds	r7, #24
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	40007000 	.word	0x40007000
 8001a84:	42420060 	.word	0x42420060

08001a88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d101      	bne.n	8001a9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e0d0      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a9c:	4b6a      	ldr	r3, [pc, #424]	; (8001c48 <HAL_RCC_ClockConfig+0x1c0>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0307 	and.w	r3, r3, #7
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d910      	bls.n	8001acc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aaa:	4b67      	ldr	r3, [pc, #412]	; (8001c48 <HAL_RCC_ClockConfig+0x1c0>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f023 0207 	bic.w	r2, r3, #7
 8001ab2:	4965      	ldr	r1, [pc, #404]	; (8001c48 <HAL_RCC_ClockConfig+0x1c0>)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aba:	4b63      	ldr	r3, [pc, #396]	; (8001c48 <HAL_RCC_ClockConfig+0x1c0>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d001      	beq.n	8001acc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e0b8      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0302 	and.w	r3, r3, #2
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d020      	beq.n	8001b1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0304 	and.w	r3, r3, #4
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d005      	beq.n	8001af0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ae4:	4b59      	ldr	r3, [pc, #356]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	4a58      	ldr	r2, [pc, #352]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001aea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001aee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0308 	and.w	r3, r3, #8
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d005      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001afc:	4b53      	ldr	r3, [pc, #332]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	4a52      	ldr	r2, [pc, #328]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001b02:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b08:	4b50      	ldr	r3, [pc, #320]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	494d      	ldr	r1, [pc, #308]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001b16:	4313      	orrs	r3, r2
 8001b18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d040      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d107      	bne.n	8001b3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b2e:	4b47      	ldr	r3, [pc, #284]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d115      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e07f      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d107      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b46:	4b41      	ldr	r3, [pc, #260]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d109      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e073      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b56:	4b3d      	ldr	r3, [pc, #244]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e06b      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b66:	4b39      	ldr	r3, [pc, #228]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f023 0203 	bic.w	r2, r3, #3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	4936      	ldr	r1, [pc, #216]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b78:	f7fe fb40 	bl	80001fc <HAL_GetTick>
 8001b7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b7e:	e00a      	b.n	8001b96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b80:	f7fe fb3c 	bl	80001fc <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e053      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b96:	4b2d      	ldr	r3, [pc, #180]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f003 020c 	and.w	r2, r3, #12
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d1eb      	bne.n	8001b80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ba8:	4b27      	ldr	r3, [pc, #156]	; (8001c48 <HAL_RCC_ClockConfig+0x1c0>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d210      	bcs.n	8001bd8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb6:	4b24      	ldr	r3, [pc, #144]	; (8001c48 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f023 0207 	bic.w	r2, r3, #7
 8001bbe:	4922      	ldr	r1, [pc, #136]	; (8001c48 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc6:	4b20      	ldr	r3, [pc, #128]	; (8001c48 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d001      	beq.n	8001bd8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e032      	b.n	8001c3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d008      	beq.n	8001bf6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001be4:	4b19      	ldr	r3, [pc, #100]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	4916      	ldr	r1, [pc, #88]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0308 	and.w	r3, r3, #8
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d009      	beq.n	8001c16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c02:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	490e      	ldr	r1, [pc, #56]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c16:	f000 f821 	bl	8001c5c <HAL_RCC_GetSysClockFreq>
 8001c1a:	4601      	mov	r1, r0
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	091b      	lsrs	r3, r3, #4
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	4a0a      	ldr	r2, [pc, #40]	; (8001c50 <HAL_RCC_ClockConfig+0x1c8>)
 8001c28:	5cd3      	ldrb	r3, [r2, r3]
 8001c2a:	fa21 f303 	lsr.w	r3, r1, r3
 8001c2e:	4a09      	ldr	r2, [pc, #36]	; (8001c54 <HAL_RCC_ClockConfig+0x1cc>)
 8001c30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c32:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <HAL_RCC_ClockConfig+0x1d0>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7fe fa9e 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40022000 	.word	0x40022000
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	08003878 	.word	0x08003878
 8001c54:	20000008 	.word	0x20000008
 8001c58:	20000000 	.word	0x20000000

08001c5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c5c:	b490      	push	{r4, r7}
 8001c5e:	b08a      	sub	sp, #40	; 0x28
 8001c60:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c62:	4b2a      	ldr	r3, [pc, #168]	; (8001d0c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c64:	1d3c      	adds	r4, r7, #4
 8001c66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c6c:	4b28      	ldr	r3, [pc, #160]	; (8001d10 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c6e:	881b      	ldrh	r3, [r3, #0]
 8001c70:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c72:	2300      	movs	r3, #0
 8001c74:	61fb      	str	r3, [r7, #28]
 8001c76:	2300      	movs	r3, #0
 8001c78:	61bb      	str	r3, [r7, #24]
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c86:	4b23      	ldr	r3, [pc, #140]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	f003 030c 	and.w	r3, r3, #12
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	d002      	beq.n	8001c9c <HAL_RCC_GetSysClockFreq+0x40>
 8001c96:	2b08      	cmp	r3, #8
 8001c98:	d003      	beq.n	8001ca2 <HAL_RCC_GetSysClockFreq+0x46>
 8001c9a:	e02d      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c9c:	4b1e      	ldr	r3, [pc, #120]	; (8001d18 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c9e:	623b      	str	r3, [r7, #32]
      break;
 8001ca0:	e02d      	b.n	8001cfe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	0c9b      	lsrs	r3, r3, #18
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001cae:	4413      	add	r3, r2
 8001cb0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001cb4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d013      	beq.n	8001ce8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cc0:	4b14      	ldr	r3, [pc, #80]	; (8001d14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	0c5b      	lsrs	r3, r3, #17
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001cce:	4413      	add	r3, r2
 8001cd0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001cd4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	4a0f      	ldr	r2, [pc, #60]	; (8001d18 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cda:	fb02 f203 	mul.w	r2, r2, r3
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ce6:	e004      	b.n	8001cf2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	4a0c      	ldr	r2, [pc, #48]	; (8001d1c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cec:	fb02 f303 	mul.w	r3, r2, r3
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	623b      	str	r3, [r7, #32]
      break;
 8001cf6:	e002      	b.n	8001cfe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cf8:	4b07      	ldr	r3, [pc, #28]	; (8001d18 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cfa:	623b      	str	r3, [r7, #32]
      break;
 8001cfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cfe:	6a3b      	ldr	r3, [r7, #32]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3728      	adds	r7, #40	; 0x28
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc90      	pop	{r4, r7}
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	08003800 	.word	0x08003800
 8001d10:	08003810 	.word	0x08003810
 8001d14:	40021000 	.word	0x40021000
 8001d18:	007a1200 	.word	0x007a1200
 8001d1c:	003d0900 	.word	0x003d0900

08001d20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d24:	4b02      	ldr	r3, [pc, #8]	; (8001d30 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d26:	681b      	ldr	r3, [r3, #0]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr
 8001d30:	20000008 	.word	0x20000008

08001d34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d38:	f7ff fff2 	bl	8001d20 <HAL_RCC_GetHCLKFreq>
 8001d3c:	4601      	mov	r1, r0
 8001d3e:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	0a1b      	lsrs	r3, r3, #8
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	4a03      	ldr	r2, [pc, #12]	; (8001d58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d4a:	5cd3      	ldrb	r3, [r2, r3]
 8001d4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40021000 	.word	0x40021000
 8001d58:	08003888 	.word	0x08003888

08001d5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d60:	f7ff ffde 	bl	8001d20 <HAL_RCC_GetHCLKFreq>
 8001d64:	4601      	mov	r1, r0
 8001d66:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	0adb      	lsrs	r3, r3, #11
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	4a03      	ldr	r2, [pc, #12]	; (8001d80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d72:	5cd3      	ldrb	r3, [r2, r3]
 8001d74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	08003888 	.word	0x08003888

08001d84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d8c:	4b0a      	ldr	r3, [pc, #40]	; (8001db8 <RCC_Delay+0x34>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a0a      	ldr	r2, [pc, #40]	; (8001dbc <RCC_Delay+0x38>)
 8001d92:	fba2 2303 	umull	r2, r3, r2, r3
 8001d96:	0a5b      	lsrs	r3, r3, #9
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	fb02 f303 	mul.w	r3, r2, r3
 8001d9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001da0:	bf00      	nop
  }
  while (Delay --);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	1e5a      	subs	r2, r3, #1
 8001da6:	60fa      	str	r2, [r7, #12]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1f9      	bne.n	8001da0 <RCC_Delay+0x1c>
}
 8001dac:	bf00      	nop
 8001dae:	3714      	adds	r7, #20
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bc80      	pop	{r7}
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	20000008 	.word	0x20000008
 8001dbc:	10624dd3 	.word	0x10624dd3

08001dc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e03f      	b.n	8001e52 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d106      	bne.n	8001dec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 fd08 	bl	80027fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2224      	movs	r2, #36	; 0x24
 8001df0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68da      	ldr	r2, [r3, #12]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 f90b 	bl	8002020 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	691a      	ldr	r2, [r3, #16]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	695a      	ldr	r2, [r3, #20]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68da      	ldr	r2, [r3, #12]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2220      	movs	r2, #32
 8001e44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2220      	movs	r2, #32
 8001e4c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b088      	sub	sp, #32
 8001e5e:	af02      	add	r7, sp, #8
 8001e60:	60f8      	str	r0, [r7, #12]
 8001e62:	60b9      	str	r1, [r7, #8]
 8001e64:	603b      	str	r3, [r7, #0]
 8001e66:	4613      	mov	r3, r2
 8001e68:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b20      	cmp	r3, #32
 8001e78:	f040 8083 	bne.w	8001f82 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d002      	beq.n	8001e88 <HAL_UART_Transmit+0x2e>
 8001e82:	88fb      	ldrh	r3, [r7, #6]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e07b      	b.n	8001f84 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d101      	bne.n	8001e9a <HAL_UART_Transmit+0x40>
 8001e96:	2302      	movs	r3, #2
 8001e98:	e074      	b.n	8001f84 <HAL_UART_Transmit+0x12a>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2221      	movs	r2, #33	; 0x21
 8001eac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001eb0:	f7fe f9a4 	bl	80001fc <HAL_GetTick>
 8001eb4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	88fa      	ldrh	r2, [r7, #6]
 8001eba:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	88fa      	ldrh	r2, [r7, #6]
 8001ec0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001ec2:	e042      	b.n	8001f4a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001eda:	d122      	bne.n	8001f22 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2180      	movs	r1, #128	; 0x80
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f000 f850 	bl	8001f8c <UART_WaitOnFlagUntilTimeout>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e046      	b.n	8001f84 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	461a      	mov	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f08:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d103      	bne.n	8001f1a <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	3302      	adds	r3, #2
 8001f16:	60bb      	str	r3, [r7, #8]
 8001f18:	e017      	b.n	8001f4a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	60bb      	str	r3, [r7, #8]
 8001f20:	e013      	b.n	8001f4a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	9300      	str	r3, [sp, #0]
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	2180      	movs	r1, #128	; 0x80
 8001f2c:	68f8      	ldr	r0, [r7, #12]
 8001f2e:	f000 f82d 	bl	8001f8c <UART_WaitOnFlagUntilTimeout>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e023      	b.n	8001f84 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	1c5a      	adds	r2, r3, #1
 8001f40:	60ba      	str	r2, [r7, #8]
 8001f42:	781a      	ldrb	r2, [r3, #0]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1b7      	bne.n	8001ec4 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	9300      	str	r3, [sp, #0]
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	2140      	movs	r1, #64	; 0x40
 8001f5e:	68f8      	ldr	r0, [r7, #12]
 8001f60:	f000 f814 	bl	8001f8c <UART_WaitOnFlagUntilTimeout>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e00a      	b.n	8001f84 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2220      	movs	r2, #32
 8001f72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	e000      	b.n	8001f84 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001f82:	2302      	movs	r3, #2
  }
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3718      	adds	r7, #24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	603b      	str	r3, [r7, #0]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f9c:	e02c      	b.n	8001ff8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa4:	d028      	beq.n	8001ff8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d007      	beq.n	8001fbc <UART_WaitOnFlagUntilTimeout+0x30>
 8001fac:	f7fe f926 	bl	80001fc <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d21d      	bcs.n	8001ff8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68da      	ldr	r2, [r3, #12]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001fca:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	695a      	ldr	r2, [r3, #20]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f022 0201 	bic.w	r2, r2, #1
 8001fda:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2220      	movs	r2, #32
 8001fe0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e00f      	b.n	8002018 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	4013      	ands	r3, r2
 8002002:	68ba      	ldr	r2, [r7, #8]
 8002004:	429a      	cmp	r2, r3
 8002006:	bf0c      	ite	eq
 8002008:	2301      	moveq	r3, #1
 800200a:	2300      	movne	r3, #0
 800200c:	b2db      	uxtb	r3, r3
 800200e:	461a      	mov	r2, r3
 8002010:	79fb      	ldrb	r3, [r7, #7]
 8002012:	429a      	cmp	r2, r3
 8002014:	d0c3      	beq.n	8001f9e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68da      	ldr	r2, [r3, #12]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	430a      	orrs	r2, r1
 800203c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689a      	ldr	r2, [r3, #8]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	431a      	orrs	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	695b      	ldr	r3, [r3, #20]
 800204c:	4313      	orrs	r3, r2
 800204e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800205a:	f023 030c 	bic.w	r3, r3, #12
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6812      	ldr	r2, [r2, #0]
 8002062:	68f9      	ldr	r1, [r7, #12]
 8002064:	430b      	orrs	r3, r1
 8002066:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	699a      	ldr	r2, [r3, #24]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	430a      	orrs	r2, r1
 800207c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a52      	ldr	r2, [pc, #328]	; (80021cc <UART_SetConfig+0x1ac>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d14e      	bne.n	8002126 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002088:	f7ff fe68 	bl	8001d5c <HAL_RCC_GetPCLK2Freq>
 800208c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	4613      	mov	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	009a      	lsls	r2, r3, #2
 8002098:	441a      	add	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a4:	4a4a      	ldr	r2, [pc, #296]	; (80021d0 <UART_SetConfig+0x1b0>)
 80020a6:	fba2 2303 	umull	r2, r3, r2, r3
 80020aa:	095b      	lsrs	r3, r3, #5
 80020ac:	0119      	lsls	r1, r3, #4
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	4613      	mov	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	009a      	lsls	r2, r3, #2
 80020b8:	441a      	add	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80020c4:	4b42      	ldr	r3, [pc, #264]	; (80021d0 <UART_SetConfig+0x1b0>)
 80020c6:	fba3 0302 	umull	r0, r3, r3, r2
 80020ca:	095b      	lsrs	r3, r3, #5
 80020cc:	2064      	movs	r0, #100	; 0x64
 80020ce:	fb00 f303 	mul.w	r3, r0, r3
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	011b      	lsls	r3, r3, #4
 80020d6:	3332      	adds	r3, #50	; 0x32
 80020d8:	4a3d      	ldr	r2, [pc, #244]	; (80021d0 <UART_SetConfig+0x1b0>)
 80020da:	fba2 2303 	umull	r2, r3, r2, r3
 80020de:	095b      	lsrs	r3, r3, #5
 80020e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020e4:	4419      	add	r1, r3
 80020e6:	68ba      	ldr	r2, [r7, #8]
 80020e8:	4613      	mov	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4413      	add	r3, r2
 80020ee:	009a      	lsls	r2, r3, #2
 80020f0:	441a      	add	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80020fc:	4b34      	ldr	r3, [pc, #208]	; (80021d0 <UART_SetConfig+0x1b0>)
 80020fe:	fba3 0302 	umull	r0, r3, r3, r2
 8002102:	095b      	lsrs	r3, r3, #5
 8002104:	2064      	movs	r0, #100	; 0x64
 8002106:	fb00 f303 	mul.w	r3, r0, r3
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	011b      	lsls	r3, r3, #4
 800210e:	3332      	adds	r3, #50	; 0x32
 8002110:	4a2f      	ldr	r2, [pc, #188]	; (80021d0 <UART_SetConfig+0x1b0>)
 8002112:	fba2 2303 	umull	r2, r3, r2, r3
 8002116:	095b      	lsrs	r3, r3, #5
 8002118:	f003 020f 	and.w	r2, r3, #15
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	440a      	add	r2, r1
 8002122:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002124:	e04d      	b.n	80021c2 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002126:	f7ff fe05 	bl	8001d34 <HAL_RCC_GetPCLK1Freq>
 800212a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800212c:	68ba      	ldr	r2, [r7, #8]
 800212e:	4613      	mov	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	009a      	lsls	r2, r3, #2
 8002136:	441a      	add	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002142:	4a23      	ldr	r2, [pc, #140]	; (80021d0 <UART_SetConfig+0x1b0>)
 8002144:	fba2 2303 	umull	r2, r3, r2, r3
 8002148:	095b      	lsrs	r3, r3, #5
 800214a:	0119      	lsls	r1, r3, #4
 800214c:	68ba      	ldr	r2, [r7, #8]
 800214e:	4613      	mov	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	009a      	lsls	r2, r3, #2
 8002156:	441a      	add	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002162:	4b1b      	ldr	r3, [pc, #108]	; (80021d0 <UART_SetConfig+0x1b0>)
 8002164:	fba3 0302 	umull	r0, r3, r3, r2
 8002168:	095b      	lsrs	r3, r3, #5
 800216a:	2064      	movs	r0, #100	; 0x64
 800216c:	fb00 f303 	mul.w	r3, r0, r3
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	011b      	lsls	r3, r3, #4
 8002174:	3332      	adds	r3, #50	; 0x32
 8002176:	4a16      	ldr	r2, [pc, #88]	; (80021d0 <UART_SetConfig+0x1b0>)
 8002178:	fba2 2303 	umull	r2, r3, r2, r3
 800217c:	095b      	lsrs	r3, r3, #5
 800217e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002182:	4419      	add	r1, r3
 8002184:	68ba      	ldr	r2, [r7, #8]
 8002186:	4613      	mov	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	4413      	add	r3, r2
 800218c:	009a      	lsls	r2, r3, #2
 800218e:	441a      	add	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	fbb2 f2f3 	udiv	r2, r2, r3
 800219a:	4b0d      	ldr	r3, [pc, #52]	; (80021d0 <UART_SetConfig+0x1b0>)
 800219c:	fba3 0302 	umull	r0, r3, r3, r2
 80021a0:	095b      	lsrs	r3, r3, #5
 80021a2:	2064      	movs	r0, #100	; 0x64
 80021a4:	fb00 f303 	mul.w	r3, r0, r3
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	011b      	lsls	r3, r3, #4
 80021ac:	3332      	adds	r3, #50	; 0x32
 80021ae:	4a08      	ldr	r2, [pc, #32]	; (80021d0 <UART_SetConfig+0x1b0>)
 80021b0:	fba2 2303 	umull	r2, r3, r2, r3
 80021b4:	095b      	lsrs	r3, r3, #5
 80021b6:	f003 020f 	and.w	r2, r3, #15
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	440a      	add	r2, r1
 80021c0:	609a      	str	r2, [r3, #8]
}
 80021c2:	bf00      	nop
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40013800 	.word	0x40013800
 80021d0:	51eb851f 	.word	0x51eb851f

080021d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021da:	4b14      	ldr	r3, [pc, #80]	; (800222c <MX_GPIO_Init+0x58>)
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	4a13      	ldr	r2, [pc, #76]	; (800222c <MX_GPIO_Init+0x58>)
 80021e0:	f043 0320 	orr.w	r3, r3, #32
 80021e4:	6193      	str	r3, [r2, #24]
 80021e6:	4b11      	ldr	r3, [pc, #68]	; (800222c <MX_GPIO_Init+0x58>)
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	f003 0320 	and.w	r3, r3, #32
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f2:	4b0e      	ldr	r3, [pc, #56]	; (800222c <MX_GPIO_Init+0x58>)
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	4a0d      	ldr	r2, [pc, #52]	; (800222c <MX_GPIO_Init+0x58>)
 80021f8:	f043 0308 	orr.w	r3, r3, #8
 80021fc:	6193      	str	r3, [r2, #24]
 80021fe:	4b0b      	ldr	r3, [pc, #44]	; (800222c <MX_GPIO_Init+0x58>)
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	f003 0308 	and.w	r3, r3, #8
 8002206:	60bb      	str	r3, [r7, #8]
 8002208:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800220a:	4b08      	ldr	r3, [pc, #32]	; (800222c <MX_GPIO_Init+0x58>)
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	4a07      	ldr	r2, [pc, #28]	; (800222c <MX_GPIO_Init+0x58>)
 8002210:	f043 0304 	orr.w	r3, r3, #4
 8002214:	6193      	str	r3, [r2, #24]
 8002216:	4b05      	ldr	r3, [pc, #20]	; (800222c <MX_GPIO_Init+0x58>)
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	f003 0304 	and.w	r3, r3, #4
 800221e:	607b      	str	r3, [r7, #4]
 8002220:	687b      	ldr	r3, [r7, #4]

}
 8002222:	bf00      	nop
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr
 800222c:	40021000 	.word	0x40021000

08002230 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8002234:	4b12      	ldr	r3, [pc, #72]	; (8002280 <MX_I2C2_Init+0x50>)
 8002236:	4a13      	ldr	r2, [pc, #76]	; (8002284 <MX_I2C2_Init+0x54>)
 8002238:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800223a:	4b11      	ldr	r3, [pc, #68]	; (8002280 <MX_I2C2_Init+0x50>)
 800223c:	4a12      	ldr	r2, [pc, #72]	; (8002288 <MX_I2C2_Init+0x58>)
 800223e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002240:	4b0f      	ldr	r3, [pc, #60]	; (8002280 <MX_I2C2_Init+0x50>)
 8002242:	2200      	movs	r2, #0
 8002244:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002246:	4b0e      	ldr	r3, [pc, #56]	; (8002280 <MX_I2C2_Init+0x50>)
 8002248:	2200      	movs	r2, #0
 800224a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800224c:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <MX_I2C2_Init+0x50>)
 800224e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002252:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002254:	4b0a      	ldr	r3, [pc, #40]	; (8002280 <MX_I2C2_Init+0x50>)
 8002256:	2200      	movs	r2, #0
 8002258:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800225a:	4b09      	ldr	r3, [pc, #36]	; (8002280 <MX_I2C2_Init+0x50>)
 800225c:	2200      	movs	r2, #0
 800225e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002260:	4b07      	ldr	r3, [pc, #28]	; (8002280 <MX_I2C2_Init+0x50>)
 8002262:	2200      	movs	r2, #0
 8002264:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002266:	4b06      	ldr	r3, [pc, #24]	; (8002280 <MX_I2C2_Init+0x50>)
 8002268:	2200      	movs	r2, #0
 800226a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800226c:	4804      	ldr	r0, [pc, #16]	; (8002280 <MX_I2C2_Init+0x50>)
 800226e:	f7fe fa2f 	bl	80006d0 <HAL_I2C_Init>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002278:	f000 f8a6 	bl	80023c8 <Error_Handler>
  }

}
 800227c:	bf00      	nop
 800227e:	bd80      	pop	{r7, pc}
 8002280:	2000009c 	.word	0x2000009c
 8002284:	40005800 	.word	0x40005800
 8002288:	000186a0 	.word	0x000186a0

0800228c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b088      	sub	sp, #32
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002294:	f107 0310 	add.w	r3, r7, #16
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	605a      	str	r2, [r3, #4]
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a16      	ldr	r2, [pc, #88]	; (8002300 <HAL_I2C_MspInit+0x74>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d124      	bne.n	80022f6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ac:	4b15      	ldr	r3, [pc, #84]	; (8002304 <HAL_I2C_MspInit+0x78>)
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	4a14      	ldr	r2, [pc, #80]	; (8002304 <HAL_I2C_MspInit+0x78>)
 80022b2:	f043 0308 	orr.w	r3, r3, #8
 80022b6:	6193      	str	r3, [r2, #24]
 80022b8:	4b12      	ldr	r3, [pc, #72]	; (8002304 <HAL_I2C_MspInit+0x78>)
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	f003 0308 	and.w	r3, r3, #8
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80022c4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80022c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022ca:	2312      	movs	r3, #18
 80022cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022ce:	2303      	movs	r3, #3
 80022d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022d2:	f107 0310 	add.w	r3, r7, #16
 80022d6:	4619      	mov	r1, r3
 80022d8:	480b      	ldr	r0, [pc, #44]	; (8002308 <HAL_I2C_MspInit+0x7c>)
 80022da:	f7fe f89f 	bl	800041c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80022de:	4b09      	ldr	r3, [pc, #36]	; (8002304 <HAL_I2C_MspInit+0x78>)
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	4a08      	ldr	r2, [pc, #32]	; (8002304 <HAL_I2C_MspInit+0x78>)
 80022e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022e8:	61d3      	str	r3, [r2, #28]
 80022ea:	4b06      	ldr	r3, [pc, #24]	; (8002304 <HAL_I2C_MspInit+0x78>)
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022f2:	60bb      	str	r3, [r7, #8]
 80022f4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80022f6:	bf00      	nop
 80022f8:	3720      	adds	r7, #32
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40005800 	.word	0x40005800
 8002304:	40021000 	.word	0x40021000
 8002308:	40010c00 	.word	0x40010c00

0800230c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0


	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002312:	f7fd ff1b 	bl	800014c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002316:	f000 f813 	bl	8002340 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800231a:	f7ff ff5b 	bl	80021d4 <MX_GPIO_Init>
	MX_I2C2_Init();
 800231e:	f7ff ff87 	bl	8002230 <MX_I2C2_Init>
	MX_USART1_UART_Init();
 8002322:	f000 fa41 	bl	80027a8 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	qmc5883l_init();
 8002326:	f000 f855 	bl	80023d4 <qmc5883l_init>
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		qmc5883l_read_data(&x, &y, &z);
 800232a:	1cba      	adds	r2, r7, #2
 800232c:	1d39      	adds	r1, r7, #4
 800232e:	1dbb      	adds	r3, r7, #6
 8002330:	4618      	mov	r0, r3
 8002332:	f000 f881 	bl	8002438 <qmc5883l_read_data>
		HAL_Delay(1000);
 8002336:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800233a:	f7fd ff69 	bl	8000210 <HAL_Delay>
		qmc5883l_read_data(&x, &y, &z);
 800233e:	e7f4      	b.n	800232a <main+0x1e>

08002340 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b090      	sub	sp, #64	; 0x40
 8002344:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002346:	f107 0318 	add.w	r3, r7, #24
 800234a:	2228      	movs	r2, #40	; 0x28
 800234c:	2100      	movs	r1, #0
 800234e:	4618      	mov	r0, r3
 8002350:	f000 faf0 	bl	8002934 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002354:	1d3b      	adds	r3, r7, #4
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	605a      	str	r2, [r3, #4]
 800235c:	609a      	str	r2, [r3, #8]
 800235e:	60da      	str	r2, [r3, #12]
 8002360:	611a      	str	r2, [r3, #16]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002362:	2301      	movs	r3, #1
 8002364:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002366:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800236a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800236c:	2300      	movs	r3, #0
 800236e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002370:	2301      	movs	r3, #1
 8002372:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002374:	2302      	movs	r3, #2
 8002376:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002378:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800237c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800237e:	2300      	movs	r3, #0
 8002380:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002382:	f107 0318 	add.w	r3, r7, #24
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff f8fe 	bl	8001588 <HAL_RCC_OscConfig>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <SystemClock_Config+0x56>
	{
		Error_Handler();
 8002392:	f000 f819 	bl	80023c8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002396:	230f      	movs	r3, #15
 8002398:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800239a:	2302      	movs	r3, #2
 800239c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800239e:	2380      	movs	r3, #128	; 0x80
 80023a0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023a6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80023ac:	1d3b      	adds	r3, r7, #4
 80023ae:	2100      	movs	r1, #0
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7ff fb69 	bl	8001a88 <HAL_RCC_ClockConfig>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <SystemClock_Config+0x80>
	{
		Error_Handler();
 80023bc:	f000 f804 	bl	80023c8 <Error_Handler>
	}
}
 80023c0:	bf00      	nop
 80023c2:	3740      	adds	r7, #64	; 0x40
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80023cc:	bf00      	nop
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr

080023d4 <qmc5883l_init>:

static void i2c_read (I2C_HandleTypeDef *hi, uint8_t dev_addr, uint8_t *buffer, uint16_t buff_size);
static void i2c_write (I2C_HandleTypeDef *hi, uint8_t dev_addr, uint8_t *buffer, uint16_t buff_size);

void qmc5883l_init()
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0

	uint8_t data[] = {QMC5883L_RESET, 0x01};
 80023da:	4b0b      	ldr	r3, [pc, #44]	; (8002408 <qmc5883l_init+0x34>)
 80023dc:	881b      	ldrh	r3, [r3, #0]
 80023de:	80bb      	strh	r3, [r7, #4]
	i2c_write(QMC5883L_I2C, QMC5883L_WRITE_ADDRESS, data, 2); // reset sensor
 80023e0:	1d3a      	adds	r2, r7, #4
 80023e2:	2302      	movs	r3, #2
 80023e4:	211a      	movs	r1, #26
 80023e6:	4809      	ldr	r0, [pc, #36]	; (800240c <qmc5883l_init+0x38>)
 80023e8:	f000 f87a 	bl	80024e0 <i2c_write>

	data[0] = QMC5883L_CONFIG;
 80023ec:	2309      	movs	r3, #9
 80023ee:	713b      	strb	r3, [r7, #4]
	data[1] = 0x05; // OS512, 2GAUSS, 50 HZ, Continuous mode
 80023f0:	2305      	movs	r3, #5
 80023f2:	717b      	strb	r3, [r7, #5]

	i2c_write(QMC5883L_I2C, QMC5883L_WRITE_ADDRESS, data, 2);
 80023f4:	1d3a      	adds	r2, r7, #4
 80023f6:	2302      	movs	r3, #2
 80023f8:	211a      	movs	r1, #26
 80023fa:	4804      	ldr	r0, [pc, #16]	; (800240c <qmc5883l_init+0x38>)
 80023fc:	f000 f870 	bl	80024e0 <i2c_write>

}
 8002400:	bf00      	nop
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	08003814 	.word	0x08003814
 800240c:	2000009c 	.word	0x2000009c

08002410 <qmc5883l_is_ready>:

uint8_t qmc5883l_is_ready()
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
	uint8_t status[1];

	i2c_read(QMC5883L_I2C, QMC5883L_READ_ADDRESS, status, 1);
 8002416:	1d3a      	adds	r2, r7, #4
 8002418:	2301      	movs	r3, #1
 800241a:	211b      	movs	r1, #27
 800241c:	4805      	ldr	r0, [pc, #20]	; (8002434 <qmc5883l_is_ready+0x24>)
 800241e:	f000 f881 	bl	8002524 <i2c_read>

	return *status & 1;
 8002422:	793b      	ldrb	r3, [r7, #4]
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	b2db      	uxtb	r3, r3
}
 800242a:	4618      	mov	r0, r3
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	2000009c 	.word	0x2000009c

08002438 <qmc5883l_read_data>:

void qmc5883l_read_data(uint16_t *x, uint16_t *y, uint16_t *z)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]

	while(!qmc5883l_is_ready()) {
 8002444:	bf00      	nop
 8002446:	f7ff ffe3 	bl	8002410 <qmc5883l_is_ready>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0fa      	beq.n	8002446 <qmc5883l_read_data+0xe>
		//printf("Device is not ready yet!\r\n");
	}

	uint8_t rx_buff[6];

	i2c_read(QMC5883L_I2C, QMC5883L_READ_ADDRESS, rx_buff, 6);
 8002450:	f107 0210 	add.w	r2, r7, #16
 8002454:	2306      	movs	r3, #6
 8002456:	211b      	movs	r1, #27
 8002458:	481f      	ldr	r0, [pc, #124]	; (80024d8 <qmc5883l_read_data+0xa0>)
 800245a:	f000 f863 	bl	8002524 <i2c_read>


	*x = rx_buff[1];
 800245e:	7c7b      	ldrb	r3, [r7, #17]
 8002460:	b29a      	uxth	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	801a      	strh	r2, [r3, #0]
	*x = ((*x) << 8) | rx_buff[0];
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	881b      	ldrh	r3, [r3, #0]
 800246a:	021b      	lsls	r3, r3, #8
 800246c:	b21a      	sxth	r2, r3
 800246e:	7c3b      	ldrb	r3, [r7, #16]
 8002470:	b21b      	sxth	r3, r3
 8002472:	4313      	orrs	r3, r2
 8002474:	b21b      	sxth	r3, r3
 8002476:	b29a      	uxth	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	801a      	strh	r2, [r3, #0]

	*y = rx_buff[3];
 800247c:	7cfb      	ldrb	r3, [r7, #19]
 800247e:	b29a      	uxth	r2, r3
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	801a      	strh	r2, [r3, #0]
	*y = ((*y) << 8) | rx_buff[2];
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	881b      	ldrh	r3, [r3, #0]
 8002488:	021b      	lsls	r3, r3, #8
 800248a:	b21a      	sxth	r2, r3
 800248c:	7cbb      	ldrb	r3, [r7, #18]
 800248e:	b21b      	sxth	r3, r3
 8002490:	4313      	orrs	r3, r2
 8002492:	b21b      	sxth	r3, r3
 8002494:	b29a      	uxth	r2, r3
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	801a      	strh	r2, [r3, #0]

	*z = rx_buff[4];
 800249a:	7d3b      	ldrb	r3, [r7, #20]
 800249c:	b29a      	uxth	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	801a      	strh	r2, [r3, #0]
	*z = ((*z) << 8) | rx_buff[4];
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	881b      	ldrh	r3, [r3, #0]
 80024a6:	021b      	lsls	r3, r3, #8
 80024a8:	b21a      	sxth	r2, r3
 80024aa:	7d3b      	ldrb	r3, [r7, #20]
 80024ac:	b21b      	sxth	r3, r3
 80024ae:	4313      	orrs	r3, r2
 80024b0:	b21b      	sxth	r3, r3
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	801a      	strh	r2, [r3, #0]

	printf("%u, %u, %u\r\n", *x, *y, *z);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	881b      	ldrh	r3, [r3, #0]
 80024bc:	4619      	mov	r1, r3
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	881b      	ldrh	r3, [r3, #0]
 80024c2:	461a      	mov	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	881b      	ldrh	r3, [r3, #0]
 80024c8:	4804      	ldr	r0, [pc, #16]	; (80024dc <qmc5883l_read_data+0xa4>)
 80024ca:	f000 fa3b 	bl	8002944 <iprintf>
}
 80024ce:	bf00      	nop
 80024d0:	3718      	adds	r7, #24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	2000009c 	.word	0x2000009c
 80024dc:	08003818 	.word	0x08003818

080024e0 <i2c_write>:


static void i2c_write (I2C_HandleTypeDef *hi, uint8_t dev_addr, uint8_t *buffer, uint16_t buff_size)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af02      	add	r7, sp, #8
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	607a      	str	r2, [r7, #4]
 80024ea:	461a      	mov	r2, r3
 80024ec:	460b      	mov	r3, r1
 80024ee:	72fb      	strb	r3, [r7, #11]
 80024f0:	4613      	mov	r3, r2
 80024f2:	813b      	strh	r3, [r7, #8]

	while (HAL_I2C_Master_Transmit(hi, dev_addr, buffer, buff_size, 0xFFFF) != HAL_OK)
 80024f4:	e002      	b.n	80024fc <i2c_write+0x1c>
	{
		printf("Error occurred in writing to device\r\n");
 80024f6:	480a      	ldr	r0, [pc, #40]	; (8002520 <i2c_write+0x40>)
 80024f8:	f000 fa98 	bl	8002a2c <puts>
	while (HAL_I2C_Master_Transmit(hi, dev_addr, buffer, buff_size, 0xFFFF) != HAL_OK)
 80024fc:	7afb      	ldrb	r3, [r7, #11]
 80024fe:	b299      	uxth	r1, r3
 8002500:	893a      	ldrh	r2, [r7, #8]
 8002502:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002506:	9300      	str	r3, [sp, #0]
 8002508:	4613      	mov	r3, r2
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	68f8      	ldr	r0, [r7, #12]
 800250e:	f7fe fa07 	bl	8000920 <HAL_I2C_Master_Transmit>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d1ee      	bne.n	80024f6 <i2c_write+0x16>
	}

}
 8002518:	bf00      	nop
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	08003828 	.word	0x08003828

08002524 <i2c_read>:


static void i2c_read (I2C_HandleTypeDef *hi, uint8_t dev_addr, uint8_t *buffer, uint16_t buff_size)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af02      	add	r7, sp, #8
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	607a      	str	r2, [r7, #4]
 800252e:	461a      	mov	r2, r3
 8002530:	460b      	mov	r3, r1
 8002532:	72fb      	strb	r3, [r7, #11]
 8002534:	4613      	mov	r3, r2
 8002536:	813b      	strh	r3, [r7, #8]
	while (HAL_I2C_Master_Receive(hi, dev_addr, buffer, buff_size, 0xFFFF) != HAL_OK)
 8002538:	e002      	b.n	8002540 <i2c_read+0x1c>
	{
		printf("Error occurred in reading from device\r\n");
 800253a:	480a      	ldr	r0, [pc, #40]	; (8002564 <i2c_read+0x40>)
 800253c:	f000 fa76 	bl	8002a2c <puts>
	while (HAL_I2C_Master_Receive(hi, dev_addr, buffer, buff_size, 0xFFFF) != HAL_OK)
 8002540:	7afb      	ldrb	r3, [r7, #11]
 8002542:	b299      	uxth	r1, r3
 8002544:	893a      	ldrh	r2, [r7, #8]
 8002546:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	4613      	mov	r3, r2
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f7fe fae3 	bl	8000b1c <HAL_I2C_Master_Receive>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1ee      	bne.n	800253a <i2c_read+0x16>
	}
}
 800255c:	bf00      	nop
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	08003850 	.word	0x08003850

08002568 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800256e:	4b15      	ldr	r3, [pc, #84]	; (80025c4 <HAL_MspInit+0x5c>)
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	4a14      	ldr	r2, [pc, #80]	; (80025c4 <HAL_MspInit+0x5c>)
 8002574:	f043 0301 	orr.w	r3, r3, #1
 8002578:	6193      	str	r3, [r2, #24]
 800257a:	4b12      	ldr	r3, [pc, #72]	; (80025c4 <HAL_MspInit+0x5c>)
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	60bb      	str	r3, [r7, #8]
 8002584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002586:	4b0f      	ldr	r3, [pc, #60]	; (80025c4 <HAL_MspInit+0x5c>)
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	4a0e      	ldr	r2, [pc, #56]	; (80025c4 <HAL_MspInit+0x5c>)
 800258c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002590:	61d3      	str	r3, [r2, #28]
 8002592:	4b0c      	ldr	r3, [pc, #48]	; (80025c4 <HAL_MspInit+0x5c>)
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259a:	607b      	str	r3, [r7, #4]
 800259c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800259e:	4b0a      	ldr	r3, [pc, #40]	; (80025c8 <HAL_MspInit+0x60>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	4a04      	ldr	r2, [pc, #16]	; (80025c8 <HAL_MspInit+0x60>)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025ba:	bf00      	nop
 80025bc:	3714      	adds	r7, #20
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr
 80025c4:	40021000 	.word	0x40021000
 80025c8:	40010000 	.word	0x40010000

080025cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80025d0:	bf00      	nop
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr

080025d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025dc:	e7fe      	b.n	80025dc <HardFault_Handler+0x4>

080025de <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025de:	b480      	push	{r7}
 80025e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025e2:	e7fe      	b.n	80025e2 <MemManage_Handler+0x4>

080025e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025e8:	e7fe      	b.n	80025e8 <BusFault_Handler+0x4>

080025ea <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025ea:	b480      	push	{r7}
 80025ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025ee:	e7fe      	b.n	80025ee <UsageFault_Handler+0x4>

080025f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025f4:	bf00      	nop
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr

080025fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002600:	bf00      	nop
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr

08002608 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr

08002614 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002618:	f7fd fdde 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800261c:	bf00      	nop
 800261e:	bd80      	pop	{r7, pc}

08002620 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800262c:	2300      	movs	r3, #0
 800262e:	617b      	str	r3, [r7, #20]
 8002630:	e00a      	b.n	8002648 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002632:	f3af 8000 	nop.w
 8002636:	4601      	mov	r1, r0
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	1c5a      	adds	r2, r3, #1
 800263c:	60ba      	str	r2, [r7, #8]
 800263e:	b2ca      	uxtb	r2, r1
 8002640:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	3301      	adds	r3, #1
 8002646:	617b      	str	r3, [r7, #20]
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	429a      	cmp	r2, r3
 800264e:	dbf0      	blt.n	8002632 <_read+0x12>
	}

	return len;
 8002650:	687b      	ldr	r3, [r7, #4]
}
 8002652:	4618      	mov	r0, r3
 8002654:	3718      	adds	r7, #24
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
	...

0800265c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
	{
		__io_putchar(*ptr++);
	}
	*/

	HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, 1000);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	b29a      	uxth	r2, r3
 800266c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002670:	68b9      	ldr	r1, [r7, #8]
 8002672:	4804      	ldr	r0, [pc, #16]	; (8002684 <_write+0x28>)
 8002674:	f7ff fbf1 	bl	8001e5a <HAL_UART_Transmit>

	return len;
 8002678:	687b      	ldr	r3, [r7, #4]
}
 800267a:	4618      	mov	r0, r3
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	200000f0 	.word	0x200000f0

08002688 <_close>:

int _close(int file)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
	return -1;
 8002690:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002694:	4618      	mov	r0, r3
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	bc80      	pop	{r7}
 800269c:	4770      	bx	lr

0800269e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800269e:	b480      	push	{r7}
 80026a0:	b083      	sub	sp, #12
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
 80026a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026ae:	605a      	str	r2, [r3, #4]
	return 0;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bc80      	pop	{r7}
 80026ba:	4770      	bx	lr

080026bc <_isatty>:

int _isatty(int file)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
	return 1;
 80026c4:	2301      	movs	r3, #1
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bc80      	pop	{r7}
 80026ce:	4770      	bx	lr

080026d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
	return 0;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3714      	adds	r7, #20
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr

080026e8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80026f0:	4b11      	ldr	r3, [pc, #68]	; (8002738 <_sbrk+0x50>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d102      	bne.n	80026fe <_sbrk+0x16>
		heap_end = &end;
 80026f8:	4b0f      	ldr	r3, [pc, #60]	; (8002738 <_sbrk+0x50>)
 80026fa:	4a10      	ldr	r2, [pc, #64]	; (800273c <_sbrk+0x54>)
 80026fc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80026fe:	4b0e      	ldr	r3, [pc, #56]	; (8002738 <_sbrk+0x50>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002704:	4b0c      	ldr	r3, [pc, #48]	; (8002738 <_sbrk+0x50>)
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4413      	add	r3, r2
 800270c:	466a      	mov	r2, sp
 800270e:	4293      	cmp	r3, r2
 8002710:	d907      	bls.n	8002722 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002712:	f000 f8e5 	bl	80028e0 <__errno>
 8002716:	4602      	mov	r2, r0
 8002718:	230c      	movs	r3, #12
 800271a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800271c:	f04f 33ff 	mov.w	r3, #4294967295
 8002720:	e006      	b.n	8002730 <_sbrk+0x48>
	}

	heap_end += incr;
 8002722:	4b05      	ldr	r3, [pc, #20]	; (8002738 <_sbrk+0x50>)
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4413      	add	r3, r2
 800272a:	4a03      	ldr	r2, [pc, #12]	; (8002738 <_sbrk+0x50>)
 800272c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800272e:	68fb      	ldr	r3, [r7, #12]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	2000008c 	.word	0x2000008c
 800273c:	20000138 	.word	0x20000138

08002740 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002744:	4b15      	ldr	r3, [pc, #84]	; (800279c <SystemInit+0x5c>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a14      	ldr	r2, [pc, #80]	; (800279c <SystemInit+0x5c>)
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002750:	4b12      	ldr	r3, [pc, #72]	; (800279c <SystemInit+0x5c>)
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	4911      	ldr	r1, [pc, #68]	; (800279c <SystemInit+0x5c>)
 8002756:	4b12      	ldr	r3, [pc, #72]	; (80027a0 <SystemInit+0x60>)
 8002758:	4013      	ands	r3, r2
 800275a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800275c:	4b0f      	ldr	r3, [pc, #60]	; (800279c <SystemInit+0x5c>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a0e      	ldr	r2, [pc, #56]	; (800279c <SystemInit+0x5c>)
 8002762:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800276a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800276c:	4b0b      	ldr	r3, [pc, #44]	; (800279c <SystemInit+0x5c>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a0a      	ldr	r2, [pc, #40]	; (800279c <SystemInit+0x5c>)
 8002772:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002776:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002778:	4b08      	ldr	r3, [pc, #32]	; (800279c <SystemInit+0x5c>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	4a07      	ldr	r2, [pc, #28]	; (800279c <SystemInit+0x5c>)
 800277e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002782:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002784:	4b05      	ldr	r3, [pc, #20]	; (800279c <SystemInit+0x5c>)
 8002786:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800278a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800278c:	4b05      	ldr	r3, [pc, #20]	; (80027a4 <SystemInit+0x64>)
 800278e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002792:	609a      	str	r2, [r3, #8]
#endif 
}
 8002794:	bf00      	nop
 8002796:	46bd      	mov	sp, r7
 8002798:	bc80      	pop	{r7}
 800279a:	4770      	bx	lr
 800279c:	40021000 	.word	0x40021000
 80027a0:	f8ff0000 	.word	0xf8ff0000
 80027a4:	e000ed00 	.word	0xe000ed00

080027a8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80027ac:	4b11      	ldr	r3, [pc, #68]	; (80027f4 <MX_USART1_UART_Init+0x4c>)
 80027ae:	4a12      	ldr	r2, [pc, #72]	; (80027f8 <MX_USART1_UART_Init+0x50>)
 80027b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80027b2:	4b10      	ldr	r3, [pc, #64]	; (80027f4 <MX_USART1_UART_Init+0x4c>)
 80027b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027ba:	4b0e      	ldr	r3, [pc, #56]	; (80027f4 <MX_USART1_UART_Init+0x4c>)
 80027bc:	2200      	movs	r2, #0
 80027be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027c0:	4b0c      	ldr	r3, [pc, #48]	; (80027f4 <MX_USART1_UART_Init+0x4c>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027c6:	4b0b      	ldr	r3, [pc, #44]	; (80027f4 <MX_USART1_UART_Init+0x4c>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027cc:	4b09      	ldr	r3, [pc, #36]	; (80027f4 <MX_USART1_UART_Init+0x4c>)
 80027ce:	220c      	movs	r2, #12
 80027d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027d2:	4b08      	ldr	r3, [pc, #32]	; (80027f4 <MX_USART1_UART_Init+0x4c>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027d8:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <MX_USART1_UART_Init+0x4c>)
 80027da:	2200      	movs	r2, #0
 80027dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027de:	4805      	ldr	r0, [pc, #20]	; (80027f4 <MX_USART1_UART_Init+0x4c>)
 80027e0:	f7ff faee 	bl	8001dc0 <HAL_UART_Init>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80027ea:	f7ff fded 	bl	80023c8 <Error_Handler>
  }

}
 80027ee:	bf00      	nop
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	200000f0 	.word	0x200000f0
 80027f8:	40013800 	.word	0x40013800

080027fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b088      	sub	sp, #32
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002804:	f107 0310 	add.w	r3, r7, #16
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	605a      	str	r2, [r3, #4]
 800280e:	609a      	str	r2, [r3, #8]
 8002810:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a1c      	ldr	r2, [pc, #112]	; (8002888 <HAL_UART_MspInit+0x8c>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d131      	bne.n	8002880 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800281c:	4b1b      	ldr	r3, [pc, #108]	; (800288c <HAL_UART_MspInit+0x90>)
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	4a1a      	ldr	r2, [pc, #104]	; (800288c <HAL_UART_MspInit+0x90>)
 8002822:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002826:	6193      	str	r3, [r2, #24]
 8002828:	4b18      	ldr	r3, [pc, #96]	; (800288c <HAL_UART_MspInit+0x90>)
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002834:	4b15      	ldr	r3, [pc, #84]	; (800288c <HAL_UART_MspInit+0x90>)
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	4a14      	ldr	r2, [pc, #80]	; (800288c <HAL_UART_MspInit+0x90>)
 800283a:	f043 0304 	orr.w	r3, r3, #4
 800283e:	6193      	str	r3, [r2, #24]
 8002840:	4b12      	ldr	r3, [pc, #72]	; (800288c <HAL_UART_MspInit+0x90>)
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	60bb      	str	r3, [r7, #8]
 800284a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800284c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002850:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002852:	2302      	movs	r3, #2
 8002854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002856:	2303      	movs	r3, #3
 8002858:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800285a:	f107 0310 	add.w	r3, r7, #16
 800285e:	4619      	mov	r1, r3
 8002860:	480b      	ldr	r0, [pc, #44]	; (8002890 <HAL_UART_MspInit+0x94>)
 8002862:	f7fd fddb 	bl	800041c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002866:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800286a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800286c:	2300      	movs	r3, #0
 800286e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002870:	2300      	movs	r3, #0
 8002872:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002874:	f107 0310 	add.w	r3, r7, #16
 8002878:	4619      	mov	r1, r3
 800287a:	4805      	ldr	r0, [pc, #20]	; (8002890 <HAL_UART_MspInit+0x94>)
 800287c:	f7fd fdce 	bl	800041c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002880:	bf00      	nop
 8002882:	3720      	adds	r7, #32
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40013800 	.word	0x40013800
 800288c:	40021000 	.word	0x40021000
 8002890:	40010800 	.word	0x40010800

08002894 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002894:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002896:	e003      	b.n	80028a0 <LoopCopyDataInit>

08002898 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002898:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800289a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800289c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800289e:	3104      	adds	r1, #4

080028a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80028a0:	480a      	ldr	r0, [pc, #40]	; (80028cc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80028a2:	4b0b      	ldr	r3, [pc, #44]	; (80028d0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80028a4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80028a6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80028a8:	d3f6      	bcc.n	8002898 <CopyDataInit>
  ldr r2, =_sbss
 80028aa:	4a0a      	ldr	r2, [pc, #40]	; (80028d4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80028ac:	e002      	b.n	80028b4 <LoopFillZerobss>

080028ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80028ae:	2300      	movs	r3, #0
  str r3, [r2], #4
 80028b0:	f842 3b04 	str.w	r3, [r2], #4

080028b4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80028b4:	4b08      	ldr	r3, [pc, #32]	; (80028d8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80028b6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80028b8:	d3f9      	bcc.n	80028ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80028ba:	f7ff ff41 	bl	8002740 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028be:	f000 f815 	bl	80028ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80028c2:	f7ff fd23 	bl	800230c <main>
  bx lr
 80028c6:	4770      	bx	lr
  ldr r3, =_sidata
 80028c8:	08003930 	.word	0x08003930
  ldr r0, =_sdata
 80028cc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80028d0:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80028d4:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80028d8:	20000134 	.word	0x20000134

080028dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80028dc:	e7fe      	b.n	80028dc <ADC1_2_IRQHandler>
	...

080028e0 <__errno>:
 80028e0:	4b01      	ldr	r3, [pc, #4]	; (80028e8 <__errno+0x8>)
 80028e2:	6818      	ldr	r0, [r3, #0]
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	2000000c 	.word	0x2000000c

080028ec <__libc_init_array>:
 80028ec:	b570      	push	{r4, r5, r6, lr}
 80028ee:	2500      	movs	r5, #0
 80028f0:	4e0c      	ldr	r6, [pc, #48]	; (8002924 <__libc_init_array+0x38>)
 80028f2:	4c0d      	ldr	r4, [pc, #52]	; (8002928 <__libc_init_array+0x3c>)
 80028f4:	1ba4      	subs	r4, r4, r6
 80028f6:	10a4      	asrs	r4, r4, #2
 80028f8:	42a5      	cmp	r5, r4
 80028fa:	d109      	bne.n	8002910 <__libc_init_array+0x24>
 80028fc:	f000 ff74 	bl	80037e8 <_init>
 8002900:	2500      	movs	r5, #0
 8002902:	4e0a      	ldr	r6, [pc, #40]	; (800292c <__libc_init_array+0x40>)
 8002904:	4c0a      	ldr	r4, [pc, #40]	; (8002930 <__libc_init_array+0x44>)
 8002906:	1ba4      	subs	r4, r4, r6
 8002908:	10a4      	asrs	r4, r4, #2
 800290a:	42a5      	cmp	r5, r4
 800290c:	d105      	bne.n	800291a <__libc_init_array+0x2e>
 800290e:	bd70      	pop	{r4, r5, r6, pc}
 8002910:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002914:	4798      	blx	r3
 8002916:	3501      	adds	r5, #1
 8002918:	e7ee      	b.n	80028f8 <__libc_init_array+0xc>
 800291a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800291e:	4798      	blx	r3
 8002920:	3501      	adds	r5, #1
 8002922:	e7f2      	b.n	800290a <__libc_init_array+0x1e>
 8002924:	08003928 	.word	0x08003928
 8002928:	08003928 	.word	0x08003928
 800292c:	08003928 	.word	0x08003928
 8002930:	0800392c 	.word	0x0800392c

08002934 <memset>:
 8002934:	4603      	mov	r3, r0
 8002936:	4402      	add	r2, r0
 8002938:	4293      	cmp	r3, r2
 800293a:	d100      	bne.n	800293e <memset+0xa>
 800293c:	4770      	bx	lr
 800293e:	f803 1b01 	strb.w	r1, [r3], #1
 8002942:	e7f9      	b.n	8002938 <memset+0x4>

08002944 <iprintf>:
 8002944:	b40f      	push	{r0, r1, r2, r3}
 8002946:	4b0a      	ldr	r3, [pc, #40]	; (8002970 <iprintf+0x2c>)
 8002948:	b513      	push	{r0, r1, r4, lr}
 800294a:	681c      	ldr	r4, [r3, #0]
 800294c:	b124      	cbz	r4, 8002958 <iprintf+0x14>
 800294e:	69a3      	ldr	r3, [r4, #24]
 8002950:	b913      	cbnz	r3, 8002958 <iprintf+0x14>
 8002952:	4620      	mov	r0, r4
 8002954:	f000 fa22 	bl	8002d9c <__sinit>
 8002958:	ab05      	add	r3, sp, #20
 800295a:	9a04      	ldr	r2, [sp, #16]
 800295c:	68a1      	ldr	r1, [r4, #8]
 800295e:	4620      	mov	r0, r4
 8002960:	9301      	str	r3, [sp, #4]
 8002962:	f000 fbd7 	bl	8003114 <_vfiprintf_r>
 8002966:	b002      	add	sp, #8
 8002968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800296c:	b004      	add	sp, #16
 800296e:	4770      	bx	lr
 8002970:	2000000c 	.word	0x2000000c

08002974 <_puts_r>:
 8002974:	b570      	push	{r4, r5, r6, lr}
 8002976:	460e      	mov	r6, r1
 8002978:	4605      	mov	r5, r0
 800297a:	b118      	cbz	r0, 8002984 <_puts_r+0x10>
 800297c:	6983      	ldr	r3, [r0, #24]
 800297e:	b90b      	cbnz	r3, 8002984 <_puts_r+0x10>
 8002980:	f000 fa0c 	bl	8002d9c <__sinit>
 8002984:	69ab      	ldr	r3, [r5, #24]
 8002986:	68ac      	ldr	r4, [r5, #8]
 8002988:	b913      	cbnz	r3, 8002990 <_puts_r+0x1c>
 800298a:	4628      	mov	r0, r5
 800298c:	f000 fa06 	bl	8002d9c <__sinit>
 8002990:	4b23      	ldr	r3, [pc, #140]	; (8002a20 <_puts_r+0xac>)
 8002992:	429c      	cmp	r4, r3
 8002994:	d117      	bne.n	80029c6 <_puts_r+0x52>
 8002996:	686c      	ldr	r4, [r5, #4]
 8002998:	89a3      	ldrh	r3, [r4, #12]
 800299a:	071b      	lsls	r3, r3, #28
 800299c:	d51d      	bpl.n	80029da <_puts_r+0x66>
 800299e:	6923      	ldr	r3, [r4, #16]
 80029a0:	b1db      	cbz	r3, 80029da <_puts_r+0x66>
 80029a2:	3e01      	subs	r6, #1
 80029a4:	68a3      	ldr	r3, [r4, #8]
 80029a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80029aa:	3b01      	subs	r3, #1
 80029ac:	60a3      	str	r3, [r4, #8]
 80029ae:	b9e9      	cbnz	r1, 80029ec <_puts_r+0x78>
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	da2e      	bge.n	8002a12 <_puts_r+0x9e>
 80029b4:	4622      	mov	r2, r4
 80029b6:	210a      	movs	r1, #10
 80029b8:	4628      	mov	r0, r5
 80029ba:	f000 f83f 	bl	8002a3c <__swbuf_r>
 80029be:	3001      	adds	r0, #1
 80029c0:	d011      	beq.n	80029e6 <_puts_r+0x72>
 80029c2:	200a      	movs	r0, #10
 80029c4:	e011      	b.n	80029ea <_puts_r+0x76>
 80029c6:	4b17      	ldr	r3, [pc, #92]	; (8002a24 <_puts_r+0xb0>)
 80029c8:	429c      	cmp	r4, r3
 80029ca:	d101      	bne.n	80029d0 <_puts_r+0x5c>
 80029cc:	68ac      	ldr	r4, [r5, #8]
 80029ce:	e7e3      	b.n	8002998 <_puts_r+0x24>
 80029d0:	4b15      	ldr	r3, [pc, #84]	; (8002a28 <_puts_r+0xb4>)
 80029d2:	429c      	cmp	r4, r3
 80029d4:	bf08      	it	eq
 80029d6:	68ec      	ldreq	r4, [r5, #12]
 80029d8:	e7de      	b.n	8002998 <_puts_r+0x24>
 80029da:	4621      	mov	r1, r4
 80029dc:	4628      	mov	r0, r5
 80029de:	f000 f87f 	bl	8002ae0 <__swsetup_r>
 80029e2:	2800      	cmp	r0, #0
 80029e4:	d0dd      	beq.n	80029a2 <_puts_r+0x2e>
 80029e6:	f04f 30ff 	mov.w	r0, #4294967295
 80029ea:	bd70      	pop	{r4, r5, r6, pc}
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	da04      	bge.n	80029fa <_puts_r+0x86>
 80029f0:	69a2      	ldr	r2, [r4, #24]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	dc06      	bgt.n	8002a04 <_puts_r+0x90>
 80029f6:	290a      	cmp	r1, #10
 80029f8:	d004      	beq.n	8002a04 <_puts_r+0x90>
 80029fa:	6823      	ldr	r3, [r4, #0]
 80029fc:	1c5a      	adds	r2, r3, #1
 80029fe:	6022      	str	r2, [r4, #0]
 8002a00:	7019      	strb	r1, [r3, #0]
 8002a02:	e7cf      	b.n	80029a4 <_puts_r+0x30>
 8002a04:	4622      	mov	r2, r4
 8002a06:	4628      	mov	r0, r5
 8002a08:	f000 f818 	bl	8002a3c <__swbuf_r>
 8002a0c:	3001      	adds	r0, #1
 8002a0e:	d1c9      	bne.n	80029a4 <_puts_r+0x30>
 8002a10:	e7e9      	b.n	80029e6 <_puts_r+0x72>
 8002a12:	200a      	movs	r0, #10
 8002a14:	6823      	ldr	r3, [r4, #0]
 8002a16:	1c5a      	adds	r2, r3, #1
 8002a18:	6022      	str	r2, [r4, #0]
 8002a1a:	7018      	strb	r0, [r3, #0]
 8002a1c:	e7e5      	b.n	80029ea <_puts_r+0x76>
 8002a1e:	bf00      	nop
 8002a20:	080038b4 	.word	0x080038b4
 8002a24:	080038d4 	.word	0x080038d4
 8002a28:	08003894 	.word	0x08003894

08002a2c <puts>:
 8002a2c:	4b02      	ldr	r3, [pc, #8]	; (8002a38 <puts+0xc>)
 8002a2e:	4601      	mov	r1, r0
 8002a30:	6818      	ldr	r0, [r3, #0]
 8002a32:	f7ff bf9f 	b.w	8002974 <_puts_r>
 8002a36:	bf00      	nop
 8002a38:	2000000c 	.word	0x2000000c

08002a3c <__swbuf_r>:
 8002a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a3e:	460e      	mov	r6, r1
 8002a40:	4614      	mov	r4, r2
 8002a42:	4605      	mov	r5, r0
 8002a44:	b118      	cbz	r0, 8002a4e <__swbuf_r+0x12>
 8002a46:	6983      	ldr	r3, [r0, #24]
 8002a48:	b90b      	cbnz	r3, 8002a4e <__swbuf_r+0x12>
 8002a4a:	f000 f9a7 	bl	8002d9c <__sinit>
 8002a4e:	4b21      	ldr	r3, [pc, #132]	; (8002ad4 <__swbuf_r+0x98>)
 8002a50:	429c      	cmp	r4, r3
 8002a52:	d12a      	bne.n	8002aaa <__swbuf_r+0x6e>
 8002a54:	686c      	ldr	r4, [r5, #4]
 8002a56:	69a3      	ldr	r3, [r4, #24]
 8002a58:	60a3      	str	r3, [r4, #8]
 8002a5a:	89a3      	ldrh	r3, [r4, #12]
 8002a5c:	071a      	lsls	r2, r3, #28
 8002a5e:	d52e      	bpl.n	8002abe <__swbuf_r+0x82>
 8002a60:	6923      	ldr	r3, [r4, #16]
 8002a62:	b363      	cbz	r3, 8002abe <__swbuf_r+0x82>
 8002a64:	6923      	ldr	r3, [r4, #16]
 8002a66:	6820      	ldr	r0, [r4, #0]
 8002a68:	b2f6      	uxtb	r6, r6
 8002a6a:	1ac0      	subs	r0, r0, r3
 8002a6c:	6963      	ldr	r3, [r4, #20]
 8002a6e:	4637      	mov	r7, r6
 8002a70:	4283      	cmp	r3, r0
 8002a72:	dc04      	bgt.n	8002a7e <__swbuf_r+0x42>
 8002a74:	4621      	mov	r1, r4
 8002a76:	4628      	mov	r0, r5
 8002a78:	f000 f926 	bl	8002cc8 <_fflush_r>
 8002a7c:	bb28      	cbnz	r0, 8002aca <__swbuf_r+0x8e>
 8002a7e:	68a3      	ldr	r3, [r4, #8]
 8002a80:	3001      	adds	r0, #1
 8002a82:	3b01      	subs	r3, #1
 8002a84:	60a3      	str	r3, [r4, #8]
 8002a86:	6823      	ldr	r3, [r4, #0]
 8002a88:	1c5a      	adds	r2, r3, #1
 8002a8a:	6022      	str	r2, [r4, #0]
 8002a8c:	701e      	strb	r6, [r3, #0]
 8002a8e:	6963      	ldr	r3, [r4, #20]
 8002a90:	4283      	cmp	r3, r0
 8002a92:	d004      	beq.n	8002a9e <__swbuf_r+0x62>
 8002a94:	89a3      	ldrh	r3, [r4, #12]
 8002a96:	07db      	lsls	r3, r3, #31
 8002a98:	d519      	bpl.n	8002ace <__swbuf_r+0x92>
 8002a9a:	2e0a      	cmp	r6, #10
 8002a9c:	d117      	bne.n	8002ace <__swbuf_r+0x92>
 8002a9e:	4621      	mov	r1, r4
 8002aa0:	4628      	mov	r0, r5
 8002aa2:	f000 f911 	bl	8002cc8 <_fflush_r>
 8002aa6:	b190      	cbz	r0, 8002ace <__swbuf_r+0x92>
 8002aa8:	e00f      	b.n	8002aca <__swbuf_r+0x8e>
 8002aaa:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <__swbuf_r+0x9c>)
 8002aac:	429c      	cmp	r4, r3
 8002aae:	d101      	bne.n	8002ab4 <__swbuf_r+0x78>
 8002ab0:	68ac      	ldr	r4, [r5, #8]
 8002ab2:	e7d0      	b.n	8002a56 <__swbuf_r+0x1a>
 8002ab4:	4b09      	ldr	r3, [pc, #36]	; (8002adc <__swbuf_r+0xa0>)
 8002ab6:	429c      	cmp	r4, r3
 8002ab8:	bf08      	it	eq
 8002aba:	68ec      	ldreq	r4, [r5, #12]
 8002abc:	e7cb      	b.n	8002a56 <__swbuf_r+0x1a>
 8002abe:	4621      	mov	r1, r4
 8002ac0:	4628      	mov	r0, r5
 8002ac2:	f000 f80d 	bl	8002ae0 <__swsetup_r>
 8002ac6:	2800      	cmp	r0, #0
 8002ac8:	d0cc      	beq.n	8002a64 <__swbuf_r+0x28>
 8002aca:	f04f 37ff 	mov.w	r7, #4294967295
 8002ace:	4638      	mov	r0, r7
 8002ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	080038b4 	.word	0x080038b4
 8002ad8:	080038d4 	.word	0x080038d4
 8002adc:	08003894 	.word	0x08003894

08002ae0 <__swsetup_r>:
 8002ae0:	4b32      	ldr	r3, [pc, #200]	; (8002bac <__swsetup_r+0xcc>)
 8002ae2:	b570      	push	{r4, r5, r6, lr}
 8002ae4:	681d      	ldr	r5, [r3, #0]
 8002ae6:	4606      	mov	r6, r0
 8002ae8:	460c      	mov	r4, r1
 8002aea:	b125      	cbz	r5, 8002af6 <__swsetup_r+0x16>
 8002aec:	69ab      	ldr	r3, [r5, #24]
 8002aee:	b913      	cbnz	r3, 8002af6 <__swsetup_r+0x16>
 8002af0:	4628      	mov	r0, r5
 8002af2:	f000 f953 	bl	8002d9c <__sinit>
 8002af6:	4b2e      	ldr	r3, [pc, #184]	; (8002bb0 <__swsetup_r+0xd0>)
 8002af8:	429c      	cmp	r4, r3
 8002afa:	d10f      	bne.n	8002b1c <__swsetup_r+0x3c>
 8002afc:	686c      	ldr	r4, [r5, #4]
 8002afe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	0715      	lsls	r5, r2, #28
 8002b06:	d42c      	bmi.n	8002b62 <__swsetup_r+0x82>
 8002b08:	06d0      	lsls	r0, r2, #27
 8002b0a:	d411      	bmi.n	8002b30 <__swsetup_r+0x50>
 8002b0c:	2209      	movs	r2, #9
 8002b0e:	6032      	str	r2, [r6, #0]
 8002b10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b14:	81a3      	strh	r3, [r4, #12]
 8002b16:	f04f 30ff 	mov.w	r0, #4294967295
 8002b1a:	e03e      	b.n	8002b9a <__swsetup_r+0xba>
 8002b1c:	4b25      	ldr	r3, [pc, #148]	; (8002bb4 <__swsetup_r+0xd4>)
 8002b1e:	429c      	cmp	r4, r3
 8002b20:	d101      	bne.n	8002b26 <__swsetup_r+0x46>
 8002b22:	68ac      	ldr	r4, [r5, #8]
 8002b24:	e7eb      	b.n	8002afe <__swsetup_r+0x1e>
 8002b26:	4b24      	ldr	r3, [pc, #144]	; (8002bb8 <__swsetup_r+0xd8>)
 8002b28:	429c      	cmp	r4, r3
 8002b2a:	bf08      	it	eq
 8002b2c:	68ec      	ldreq	r4, [r5, #12]
 8002b2e:	e7e6      	b.n	8002afe <__swsetup_r+0x1e>
 8002b30:	0751      	lsls	r1, r2, #29
 8002b32:	d512      	bpl.n	8002b5a <__swsetup_r+0x7a>
 8002b34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b36:	b141      	cbz	r1, 8002b4a <__swsetup_r+0x6a>
 8002b38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002b3c:	4299      	cmp	r1, r3
 8002b3e:	d002      	beq.n	8002b46 <__swsetup_r+0x66>
 8002b40:	4630      	mov	r0, r6
 8002b42:	f000 fa19 	bl	8002f78 <_free_r>
 8002b46:	2300      	movs	r3, #0
 8002b48:	6363      	str	r3, [r4, #52]	; 0x34
 8002b4a:	89a3      	ldrh	r3, [r4, #12]
 8002b4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002b50:	81a3      	strh	r3, [r4, #12]
 8002b52:	2300      	movs	r3, #0
 8002b54:	6063      	str	r3, [r4, #4]
 8002b56:	6923      	ldr	r3, [r4, #16]
 8002b58:	6023      	str	r3, [r4, #0]
 8002b5a:	89a3      	ldrh	r3, [r4, #12]
 8002b5c:	f043 0308 	orr.w	r3, r3, #8
 8002b60:	81a3      	strh	r3, [r4, #12]
 8002b62:	6923      	ldr	r3, [r4, #16]
 8002b64:	b94b      	cbnz	r3, 8002b7a <__swsetup_r+0x9a>
 8002b66:	89a3      	ldrh	r3, [r4, #12]
 8002b68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002b6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b70:	d003      	beq.n	8002b7a <__swsetup_r+0x9a>
 8002b72:	4621      	mov	r1, r4
 8002b74:	4630      	mov	r0, r6
 8002b76:	f000 f9bf 	bl	8002ef8 <__smakebuf_r>
 8002b7a:	89a2      	ldrh	r2, [r4, #12]
 8002b7c:	f012 0301 	ands.w	r3, r2, #1
 8002b80:	d00c      	beq.n	8002b9c <__swsetup_r+0xbc>
 8002b82:	2300      	movs	r3, #0
 8002b84:	60a3      	str	r3, [r4, #8]
 8002b86:	6963      	ldr	r3, [r4, #20]
 8002b88:	425b      	negs	r3, r3
 8002b8a:	61a3      	str	r3, [r4, #24]
 8002b8c:	6923      	ldr	r3, [r4, #16]
 8002b8e:	b953      	cbnz	r3, 8002ba6 <__swsetup_r+0xc6>
 8002b90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b94:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002b98:	d1ba      	bne.n	8002b10 <__swsetup_r+0x30>
 8002b9a:	bd70      	pop	{r4, r5, r6, pc}
 8002b9c:	0792      	lsls	r2, r2, #30
 8002b9e:	bf58      	it	pl
 8002ba0:	6963      	ldrpl	r3, [r4, #20]
 8002ba2:	60a3      	str	r3, [r4, #8]
 8002ba4:	e7f2      	b.n	8002b8c <__swsetup_r+0xac>
 8002ba6:	2000      	movs	r0, #0
 8002ba8:	e7f7      	b.n	8002b9a <__swsetup_r+0xba>
 8002baa:	bf00      	nop
 8002bac:	2000000c 	.word	0x2000000c
 8002bb0:	080038b4 	.word	0x080038b4
 8002bb4:	080038d4 	.word	0x080038d4
 8002bb8:	08003894 	.word	0x08003894

08002bbc <__sflush_r>:
 8002bbc:	898a      	ldrh	r2, [r1, #12]
 8002bbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bc2:	4605      	mov	r5, r0
 8002bc4:	0710      	lsls	r0, r2, #28
 8002bc6:	460c      	mov	r4, r1
 8002bc8:	d458      	bmi.n	8002c7c <__sflush_r+0xc0>
 8002bca:	684b      	ldr	r3, [r1, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	dc05      	bgt.n	8002bdc <__sflush_r+0x20>
 8002bd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	dc02      	bgt.n	8002bdc <__sflush_r+0x20>
 8002bd6:	2000      	movs	r0, #0
 8002bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002bdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002bde:	2e00      	cmp	r6, #0
 8002be0:	d0f9      	beq.n	8002bd6 <__sflush_r+0x1a>
 8002be2:	2300      	movs	r3, #0
 8002be4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002be8:	682f      	ldr	r7, [r5, #0]
 8002bea:	6a21      	ldr	r1, [r4, #32]
 8002bec:	602b      	str	r3, [r5, #0]
 8002bee:	d032      	beq.n	8002c56 <__sflush_r+0x9a>
 8002bf0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002bf2:	89a3      	ldrh	r3, [r4, #12]
 8002bf4:	075a      	lsls	r2, r3, #29
 8002bf6:	d505      	bpl.n	8002c04 <__sflush_r+0x48>
 8002bf8:	6863      	ldr	r3, [r4, #4]
 8002bfa:	1ac0      	subs	r0, r0, r3
 8002bfc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002bfe:	b10b      	cbz	r3, 8002c04 <__sflush_r+0x48>
 8002c00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002c02:	1ac0      	subs	r0, r0, r3
 8002c04:	2300      	movs	r3, #0
 8002c06:	4602      	mov	r2, r0
 8002c08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002c0a:	6a21      	ldr	r1, [r4, #32]
 8002c0c:	4628      	mov	r0, r5
 8002c0e:	47b0      	blx	r6
 8002c10:	1c43      	adds	r3, r0, #1
 8002c12:	89a3      	ldrh	r3, [r4, #12]
 8002c14:	d106      	bne.n	8002c24 <__sflush_r+0x68>
 8002c16:	6829      	ldr	r1, [r5, #0]
 8002c18:	291d      	cmp	r1, #29
 8002c1a:	d848      	bhi.n	8002cae <__sflush_r+0xf2>
 8002c1c:	4a29      	ldr	r2, [pc, #164]	; (8002cc4 <__sflush_r+0x108>)
 8002c1e:	40ca      	lsrs	r2, r1
 8002c20:	07d6      	lsls	r6, r2, #31
 8002c22:	d544      	bpl.n	8002cae <__sflush_r+0xf2>
 8002c24:	2200      	movs	r2, #0
 8002c26:	6062      	str	r2, [r4, #4]
 8002c28:	6922      	ldr	r2, [r4, #16]
 8002c2a:	04d9      	lsls	r1, r3, #19
 8002c2c:	6022      	str	r2, [r4, #0]
 8002c2e:	d504      	bpl.n	8002c3a <__sflush_r+0x7e>
 8002c30:	1c42      	adds	r2, r0, #1
 8002c32:	d101      	bne.n	8002c38 <__sflush_r+0x7c>
 8002c34:	682b      	ldr	r3, [r5, #0]
 8002c36:	b903      	cbnz	r3, 8002c3a <__sflush_r+0x7e>
 8002c38:	6560      	str	r0, [r4, #84]	; 0x54
 8002c3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c3c:	602f      	str	r7, [r5, #0]
 8002c3e:	2900      	cmp	r1, #0
 8002c40:	d0c9      	beq.n	8002bd6 <__sflush_r+0x1a>
 8002c42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002c46:	4299      	cmp	r1, r3
 8002c48:	d002      	beq.n	8002c50 <__sflush_r+0x94>
 8002c4a:	4628      	mov	r0, r5
 8002c4c:	f000 f994 	bl	8002f78 <_free_r>
 8002c50:	2000      	movs	r0, #0
 8002c52:	6360      	str	r0, [r4, #52]	; 0x34
 8002c54:	e7c0      	b.n	8002bd8 <__sflush_r+0x1c>
 8002c56:	2301      	movs	r3, #1
 8002c58:	4628      	mov	r0, r5
 8002c5a:	47b0      	blx	r6
 8002c5c:	1c41      	adds	r1, r0, #1
 8002c5e:	d1c8      	bne.n	8002bf2 <__sflush_r+0x36>
 8002c60:	682b      	ldr	r3, [r5, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0c5      	beq.n	8002bf2 <__sflush_r+0x36>
 8002c66:	2b1d      	cmp	r3, #29
 8002c68:	d001      	beq.n	8002c6e <__sflush_r+0xb2>
 8002c6a:	2b16      	cmp	r3, #22
 8002c6c:	d101      	bne.n	8002c72 <__sflush_r+0xb6>
 8002c6e:	602f      	str	r7, [r5, #0]
 8002c70:	e7b1      	b.n	8002bd6 <__sflush_r+0x1a>
 8002c72:	89a3      	ldrh	r3, [r4, #12]
 8002c74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c78:	81a3      	strh	r3, [r4, #12]
 8002c7a:	e7ad      	b.n	8002bd8 <__sflush_r+0x1c>
 8002c7c:	690f      	ldr	r7, [r1, #16]
 8002c7e:	2f00      	cmp	r7, #0
 8002c80:	d0a9      	beq.n	8002bd6 <__sflush_r+0x1a>
 8002c82:	0793      	lsls	r3, r2, #30
 8002c84:	bf18      	it	ne
 8002c86:	2300      	movne	r3, #0
 8002c88:	680e      	ldr	r6, [r1, #0]
 8002c8a:	bf08      	it	eq
 8002c8c:	694b      	ldreq	r3, [r1, #20]
 8002c8e:	eba6 0807 	sub.w	r8, r6, r7
 8002c92:	600f      	str	r7, [r1, #0]
 8002c94:	608b      	str	r3, [r1, #8]
 8002c96:	f1b8 0f00 	cmp.w	r8, #0
 8002c9a:	dd9c      	ble.n	8002bd6 <__sflush_r+0x1a>
 8002c9c:	4643      	mov	r3, r8
 8002c9e:	463a      	mov	r2, r7
 8002ca0:	6a21      	ldr	r1, [r4, #32]
 8002ca2:	4628      	mov	r0, r5
 8002ca4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002ca6:	47b0      	blx	r6
 8002ca8:	2800      	cmp	r0, #0
 8002caa:	dc06      	bgt.n	8002cba <__sflush_r+0xfe>
 8002cac:	89a3      	ldrh	r3, [r4, #12]
 8002cae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cb2:	81a3      	strh	r3, [r4, #12]
 8002cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb8:	e78e      	b.n	8002bd8 <__sflush_r+0x1c>
 8002cba:	4407      	add	r7, r0
 8002cbc:	eba8 0800 	sub.w	r8, r8, r0
 8002cc0:	e7e9      	b.n	8002c96 <__sflush_r+0xda>
 8002cc2:	bf00      	nop
 8002cc4:	20400001 	.word	0x20400001

08002cc8 <_fflush_r>:
 8002cc8:	b538      	push	{r3, r4, r5, lr}
 8002cca:	690b      	ldr	r3, [r1, #16]
 8002ccc:	4605      	mov	r5, r0
 8002cce:	460c      	mov	r4, r1
 8002cd0:	b1db      	cbz	r3, 8002d0a <_fflush_r+0x42>
 8002cd2:	b118      	cbz	r0, 8002cdc <_fflush_r+0x14>
 8002cd4:	6983      	ldr	r3, [r0, #24]
 8002cd6:	b90b      	cbnz	r3, 8002cdc <_fflush_r+0x14>
 8002cd8:	f000 f860 	bl	8002d9c <__sinit>
 8002cdc:	4b0c      	ldr	r3, [pc, #48]	; (8002d10 <_fflush_r+0x48>)
 8002cde:	429c      	cmp	r4, r3
 8002ce0:	d109      	bne.n	8002cf6 <_fflush_r+0x2e>
 8002ce2:	686c      	ldr	r4, [r5, #4]
 8002ce4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ce8:	b17b      	cbz	r3, 8002d0a <_fflush_r+0x42>
 8002cea:	4621      	mov	r1, r4
 8002cec:	4628      	mov	r0, r5
 8002cee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002cf2:	f7ff bf63 	b.w	8002bbc <__sflush_r>
 8002cf6:	4b07      	ldr	r3, [pc, #28]	; (8002d14 <_fflush_r+0x4c>)
 8002cf8:	429c      	cmp	r4, r3
 8002cfa:	d101      	bne.n	8002d00 <_fflush_r+0x38>
 8002cfc:	68ac      	ldr	r4, [r5, #8]
 8002cfe:	e7f1      	b.n	8002ce4 <_fflush_r+0x1c>
 8002d00:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <_fflush_r+0x50>)
 8002d02:	429c      	cmp	r4, r3
 8002d04:	bf08      	it	eq
 8002d06:	68ec      	ldreq	r4, [r5, #12]
 8002d08:	e7ec      	b.n	8002ce4 <_fflush_r+0x1c>
 8002d0a:	2000      	movs	r0, #0
 8002d0c:	bd38      	pop	{r3, r4, r5, pc}
 8002d0e:	bf00      	nop
 8002d10:	080038b4 	.word	0x080038b4
 8002d14:	080038d4 	.word	0x080038d4
 8002d18:	08003894 	.word	0x08003894

08002d1c <std>:
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	b510      	push	{r4, lr}
 8002d20:	4604      	mov	r4, r0
 8002d22:	e9c0 3300 	strd	r3, r3, [r0]
 8002d26:	6083      	str	r3, [r0, #8]
 8002d28:	8181      	strh	r1, [r0, #12]
 8002d2a:	6643      	str	r3, [r0, #100]	; 0x64
 8002d2c:	81c2      	strh	r2, [r0, #14]
 8002d2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002d32:	6183      	str	r3, [r0, #24]
 8002d34:	4619      	mov	r1, r3
 8002d36:	2208      	movs	r2, #8
 8002d38:	305c      	adds	r0, #92	; 0x5c
 8002d3a:	f7ff fdfb 	bl	8002934 <memset>
 8002d3e:	4b05      	ldr	r3, [pc, #20]	; (8002d54 <std+0x38>)
 8002d40:	6224      	str	r4, [r4, #32]
 8002d42:	6263      	str	r3, [r4, #36]	; 0x24
 8002d44:	4b04      	ldr	r3, [pc, #16]	; (8002d58 <std+0x3c>)
 8002d46:	62a3      	str	r3, [r4, #40]	; 0x28
 8002d48:	4b04      	ldr	r3, [pc, #16]	; (8002d5c <std+0x40>)
 8002d4a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002d4c:	4b04      	ldr	r3, [pc, #16]	; (8002d60 <std+0x44>)
 8002d4e:	6323      	str	r3, [r4, #48]	; 0x30
 8002d50:	bd10      	pop	{r4, pc}
 8002d52:	bf00      	nop
 8002d54:	08003671 	.word	0x08003671
 8002d58:	08003693 	.word	0x08003693
 8002d5c:	080036cb 	.word	0x080036cb
 8002d60:	080036ef 	.word	0x080036ef

08002d64 <_cleanup_r>:
 8002d64:	4901      	ldr	r1, [pc, #4]	; (8002d6c <_cleanup_r+0x8>)
 8002d66:	f000 b885 	b.w	8002e74 <_fwalk_reent>
 8002d6a:	bf00      	nop
 8002d6c:	08002cc9 	.word	0x08002cc9

08002d70 <__sfmoreglue>:
 8002d70:	b570      	push	{r4, r5, r6, lr}
 8002d72:	2568      	movs	r5, #104	; 0x68
 8002d74:	1e4a      	subs	r2, r1, #1
 8002d76:	4355      	muls	r5, r2
 8002d78:	460e      	mov	r6, r1
 8002d7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002d7e:	f000 f947 	bl	8003010 <_malloc_r>
 8002d82:	4604      	mov	r4, r0
 8002d84:	b140      	cbz	r0, 8002d98 <__sfmoreglue+0x28>
 8002d86:	2100      	movs	r1, #0
 8002d88:	e9c0 1600 	strd	r1, r6, [r0]
 8002d8c:	300c      	adds	r0, #12
 8002d8e:	60a0      	str	r0, [r4, #8]
 8002d90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002d94:	f7ff fdce 	bl	8002934 <memset>
 8002d98:	4620      	mov	r0, r4
 8002d9a:	bd70      	pop	{r4, r5, r6, pc}

08002d9c <__sinit>:
 8002d9c:	6983      	ldr	r3, [r0, #24]
 8002d9e:	b510      	push	{r4, lr}
 8002da0:	4604      	mov	r4, r0
 8002da2:	bb33      	cbnz	r3, 8002df2 <__sinit+0x56>
 8002da4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002da8:	6503      	str	r3, [r0, #80]	; 0x50
 8002daa:	4b12      	ldr	r3, [pc, #72]	; (8002df4 <__sinit+0x58>)
 8002dac:	4a12      	ldr	r2, [pc, #72]	; (8002df8 <__sinit+0x5c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6282      	str	r2, [r0, #40]	; 0x28
 8002db2:	4298      	cmp	r0, r3
 8002db4:	bf04      	itt	eq
 8002db6:	2301      	moveq	r3, #1
 8002db8:	6183      	streq	r3, [r0, #24]
 8002dba:	f000 f81f 	bl	8002dfc <__sfp>
 8002dbe:	6060      	str	r0, [r4, #4]
 8002dc0:	4620      	mov	r0, r4
 8002dc2:	f000 f81b 	bl	8002dfc <__sfp>
 8002dc6:	60a0      	str	r0, [r4, #8]
 8002dc8:	4620      	mov	r0, r4
 8002dca:	f000 f817 	bl	8002dfc <__sfp>
 8002dce:	2200      	movs	r2, #0
 8002dd0:	60e0      	str	r0, [r4, #12]
 8002dd2:	2104      	movs	r1, #4
 8002dd4:	6860      	ldr	r0, [r4, #4]
 8002dd6:	f7ff ffa1 	bl	8002d1c <std>
 8002dda:	2201      	movs	r2, #1
 8002ddc:	2109      	movs	r1, #9
 8002dde:	68a0      	ldr	r0, [r4, #8]
 8002de0:	f7ff ff9c 	bl	8002d1c <std>
 8002de4:	2202      	movs	r2, #2
 8002de6:	2112      	movs	r1, #18
 8002de8:	68e0      	ldr	r0, [r4, #12]
 8002dea:	f7ff ff97 	bl	8002d1c <std>
 8002dee:	2301      	movs	r3, #1
 8002df0:	61a3      	str	r3, [r4, #24]
 8002df2:	bd10      	pop	{r4, pc}
 8002df4:	08003890 	.word	0x08003890
 8002df8:	08002d65 	.word	0x08002d65

08002dfc <__sfp>:
 8002dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dfe:	4b1b      	ldr	r3, [pc, #108]	; (8002e6c <__sfp+0x70>)
 8002e00:	4607      	mov	r7, r0
 8002e02:	681e      	ldr	r6, [r3, #0]
 8002e04:	69b3      	ldr	r3, [r6, #24]
 8002e06:	b913      	cbnz	r3, 8002e0e <__sfp+0x12>
 8002e08:	4630      	mov	r0, r6
 8002e0a:	f7ff ffc7 	bl	8002d9c <__sinit>
 8002e0e:	3648      	adds	r6, #72	; 0x48
 8002e10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002e14:	3b01      	subs	r3, #1
 8002e16:	d503      	bpl.n	8002e20 <__sfp+0x24>
 8002e18:	6833      	ldr	r3, [r6, #0]
 8002e1a:	b133      	cbz	r3, 8002e2a <__sfp+0x2e>
 8002e1c:	6836      	ldr	r6, [r6, #0]
 8002e1e:	e7f7      	b.n	8002e10 <__sfp+0x14>
 8002e20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002e24:	b16d      	cbz	r5, 8002e42 <__sfp+0x46>
 8002e26:	3468      	adds	r4, #104	; 0x68
 8002e28:	e7f4      	b.n	8002e14 <__sfp+0x18>
 8002e2a:	2104      	movs	r1, #4
 8002e2c:	4638      	mov	r0, r7
 8002e2e:	f7ff ff9f 	bl	8002d70 <__sfmoreglue>
 8002e32:	6030      	str	r0, [r6, #0]
 8002e34:	2800      	cmp	r0, #0
 8002e36:	d1f1      	bne.n	8002e1c <__sfp+0x20>
 8002e38:	230c      	movs	r3, #12
 8002e3a:	4604      	mov	r4, r0
 8002e3c:	603b      	str	r3, [r7, #0]
 8002e3e:	4620      	mov	r0, r4
 8002e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e42:	4b0b      	ldr	r3, [pc, #44]	; (8002e70 <__sfp+0x74>)
 8002e44:	6665      	str	r5, [r4, #100]	; 0x64
 8002e46:	e9c4 5500 	strd	r5, r5, [r4]
 8002e4a:	60a5      	str	r5, [r4, #8]
 8002e4c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002e50:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002e54:	2208      	movs	r2, #8
 8002e56:	4629      	mov	r1, r5
 8002e58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002e5c:	f7ff fd6a 	bl	8002934 <memset>
 8002e60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002e64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002e68:	e7e9      	b.n	8002e3e <__sfp+0x42>
 8002e6a:	bf00      	nop
 8002e6c:	08003890 	.word	0x08003890
 8002e70:	ffff0001 	.word	0xffff0001

08002e74 <_fwalk_reent>:
 8002e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e78:	4680      	mov	r8, r0
 8002e7a:	4689      	mov	r9, r1
 8002e7c:	2600      	movs	r6, #0
 8002e7e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002e82:	b914      	cbnz	r4, 8002e8a <_fwalk_reent+0x16>
 8002e84:	4630      	mov	r0, r6
 8002e86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e8a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8002e8e:	3f01      	subs	r7, #1
 8002e90:	d501      	bpl.n	8002e96 <_fwalk_reent+0x22>
 8002e92:	6824      	ldr	r4, [r4, #0]
 8002e94:	e7f5      	b.n	8002e82 <_fwalk_reent+0xe>
 8002e96:	89ab      	ldrh	r3, [r5, #12]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d907      	bls.n	8002eac <_fwalk_reent+0x38>
 8002e9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	d003      	beq.n	8002eac <_fwalk_reent+0x38>
 8002ea4:	4629      	mov	r1, r5
 8002ea6:	4640      	mov	r0, r8
 8002ea8:	47c8      	blx	r9
 8002eaa:	4306      	orrs	r6, r0
 8002eac:	3568      	adds	r5, #104	; 0x68
 8002eae:	e7ee      	b.n	8002e8e <_fwalk_reent+0x1a>

08002eb0 <__swhatbuf_r>:
 8002eb0:	b570      	push	{r4, r5, r6, lr}
 8002eb2:	460e      	mov	r6, r1
 8002eb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002eb8:	b096      	sub	sp, #88	; 0x58
 8002eba:	2900      	cmp	r1, #0
 8002ebc:	4614      	mov	r4, r2
 8002ebe:	461d      	mov	r5, r3
 8002ec0:	da07      	bge.n	8002ed2 <__swhatbuf_r+0x22>
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	602b      	str	r3, [r5, #0]
 8002ec6:	89b3      	ldrh	r3, [r6, #12]
 8002ec8:	061a      	lsls	r2, r3, #24
 8002eca:	d410      	bmi.n	8002eee <__swhatbuf_r+0x3e>
 8002ecc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ed0:	e00e      	b.n	8002ef0 <__swhatbuf_r+0x40>
 8002ed2:	466a      	mov	r2, sp
 8002ed4:	f000 fc32 	bl	800373c <_fstat_r>
 8002ed8:	2800      	cmp	r0, #0
 8002eda:	dbf2      	blt.n	8002ec2 <__swhatbuf_r+0x12>
 8002edc:	9a01      	ldr	r2, [sp, #4]
 8002ede:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002ee2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002ee6:	425a      	negs	r2, r3
 8002ee8:	415a      	adcs	r2, r3
 8002eea:	602a      	str	r2, [r5, #0]
 8002eec:	e7ee      	b.n	8002ecc <__swhatbuf_r+0x1c>
 8002eee:	2340      	movs	r3, #64	; 0x40
 8002ef0:	2000      	movs	r0, #0
 8002ef2:	6023      	str	r3, [r4, #0]
 8002ef4:	b016      	add	sp, #88	; 0x58
 8002ef6:	bd70      	pop	{r4, r5, r6, pc}

08002ef8 <__smakebuf_r>:
 8002ef8:	898b      	ldrh	r3, [r1, #12]
 8002efa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002efc:	079d      	lsls	r5, r3, #30
 8002efe:	4606      	mov	r6, r0
 8002f00:	460c      	mov	r4, r1
 8002f02:	d507      	bpl.n	8002f14 <__smakebuf_r+0x1c>
 8002f04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002f08:	6023      	str	r3, [r4, #0]
 8002f0a:	6123      	str	r3, [r4, #16]
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	6163      	str	r3, [r4, #20]
 8002f10:	b002      	add	sp, #8
 8002f12:	bd70      	pop	{r4, r5, r6, pc}
 8002f14:	ab01      	add	r3, sp, #4
 8002f16:	466a      	mov	r2, sp
 8002f18:	f7ff ffca 	bl	8002eb0 <__swhatbuf_r>
 8002f1c:	9900      	ldr	r1, [sp, #0]
 8002f1e:	4605      	mov	r5, r0
 8002f20:	4630      	mov	r0, r6
 8002f22:	f000 f875 	bl	8003010 <_malloc_r>
 8002f26:	b948      	cbnz	r0, 8002f3c <__smakebuf_r+0x44>
 8002f28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f2c:	059a      	lsls	r2, r3, #22
 8002f2e:	d4ef      	bmi.n	8002f10 <__smakebuf_r+0x18>
 8002f30:	f023 0303 	bic.w	r3, r3, #3
 8002f34:	f043 0302 	orr.w	r3, r3, #2
 8002f38:	81a3      	strh	r3, [r4, #12]
 8002f3a:	e7e3      	b.n	8002f04 <__smakebuf_r+0xc>
 8002f3c:	4b0d      	ldr	r3, [pc, #52]	; (8002f74 <__smakebuf_r+0x7c>)
 8002f3e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002f40:	89a3      	ldrh	r3, [r4, #12]
 8002f42:	6020      	str	r0, [r4, #0]
 8002f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f48:	81a3      	strh	r3, [r4, #12]
 8002f4a:	9b00      	ldr	r3, [sp, #0]
 8002f4c:	6120      	str	r0, [r4, #16]
 8002f4e:	6163      	str	r3, [r4, #20]
 8002f50:	9b01      	ldr	r3, [sp, #4]
 8002f52:	b15b      	cbz	r3, 8002f6c <__smakebuf_r+0x74>
 8002f54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f58:	4630      	mov	r0, r6
 8002f5a:	f000 fc01 	bl	8003760 <_isatty_r>
 8002f5e:	b128      	cbz	r0, 8002f6c <__smakebuf_r+0x74>
 8002f60:	89a3      	ldrh	r3, [r4, #12]
 8002f62:	f023 0303 	bic.w	r3, r3, #3
 8002f66:	f043 0301 	orr.w	r3, r3, #1
 8002f6a:	81a3      	strh	r3, [r4, #12]
 8002f6c:	89a3      	ldrh	r3, [r4, #12]
 8002f6e:	431d      	orrs	r5, r3
 8002f70:	81a5      	strh	r5, [r4, #12]
 8002f72:	e7cd      	b.n	8002f10 <__smakebuf_r+0x18>
 8002f74:	08002d65 	.word	0x08002d65

08002f78 <_free_r>:
 8002f78:	b538      	push	{r3, r4, r5, lr}
 8002f7a:	4605      	mov	r5, r0
 8002f7c:	2900      	cmp	r1, #0
 8002f7e:	d043      	beq.n	8003008 <_free_r+0x90>
 8002f80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f84:	1f0c      	subs	r4, r1, #4
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	bfb8      	it	lt
 8002f8a:	18e4      	addlt	r4, r4, r3
 8002f8c:	f000 fc18 	bl	80037c0 <__malloc_lock>
 8002f90:	4a1e      	ldr	r2, [pc, #120]	; (800300c <_free_r+0x94>)
 8002f92:	6813      	ldr	r3, [r2, #0]
 8002f94:	4610      	mov	r0, r2
 8002f96:	b933      	cbnz	r3, 8002fa6 <_free_r+0x2e>
 8002f98:	6063      	str	r3, [r4, #4]
 8002f9a:	6014      	str	r4, [r2, #0]
 8002f9c:	4628      	mov	r0, r5
 8002f9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fa2:	f000 bc0e 	b.w	80037c2 <__malloc_unlock>
 8002fa6:	42a3      	cmp	r3, r4
 8002fa8:	d90b      	bls.n	8002fc2 <_free_r+0x4a>
 8002faa:	6821      	ldr	r1, [r4, #0]
 8002fac:	1862      	adds	r2, r4, r1
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	bf01      	itttt	eq
 8002fb2:	681a      	ldreq	r2, [r3, #0]
 8002fb4:	685b      	ldreq	r3, [r3, #4]
 8002fb6:	1852      	addeq	r2, r2, r1
 8002fb8:	6022      	streq	r2, [r4, #0]
 8002fba:	6063      	str	r3, [r4, #4]
 8002fbc:	6004      	str	r4, [r0, #0]
 8002fbe:	e7ed      	b.n	8002f9c <_free_r+0x24>
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	b10a      	cbz	r2, 8002fca <_free_r+0x52>
 8002fc6:	42a2      	cmp	r2, r4
 8002fc8:	d9fa      	bls.n	8002fc0 <_free_r+0x48>
 8002fca:	6819      	ldr	r1, [r3, #0]
 8002fcc:	1858      	adds	r0, r3, r1
 8002fce:	42a0      	cmp	r0, r4
 8002fd0:	d10b      	bne.n	8002fea <_free_r+0x72>
 8002fd2:	6820      	ldr	r0, [r4, #0]
 8002fd4:	4401      	add	r1, r0
 8002fd6:	1858      	adds	r0, r3, r1
 8002fd8:	4282      	cmp	r2, r0
 8002fda:	6019      	str	r1, [r3, #0]
 8002fdc:	d1de      	bne.n	8002f9c <_free_r+0x24>
 8002fde:	6810      	ldr	r0, [r2, #0]
 8002fe0:	6852      	ldr	r2, [r2, #4]
 8002fe2:	4401      	add	r1, r0
 8002fe4:	6019      	str	r1, [r3, #0]
 8002fe6:	605a      	str	r2, [r3, #4]
 8002fe8:	e7d8      	b.n	8002f9c <_free_r+0x24>
 8002fea:	d902      	bls.n	8002ff2 <_free_r+0x7a>
 8002fec:	230c      	movs	r3, #12
 8002fee:	602b      	str	r3, [r5, #0]
 8002ff0:	e7d4      	b.n	8002f9c <_free_r+0x24>
 8002ff2:	6820      	ldr	r0, [r4, #0]
 8002ff4:	1821      	adds	r1, r4, r0
 8002ff6:	428a      	cmp	r2, r1
 8002ff8:	bf01      	itttt	eq
 8002ffa:	6811      	ldreq	r1, [r2, #0]
 8002ffc:	6852      	ldreq	r2, [r2, #4]
 8002ffe:	1809      	addeq	r1, r1, r0
 8003000:	6021      	streq	r1, [r4, #0]
 8003002:	6062      	str	r2, [r4, #4]
 8003004:	605c      	str	r4, [r3, #4]
 8003006:	e7c9      	b.n	8002f9c <_free_r+0x24>
 8003008:	bd38      	pop	{r3, r4, r5, pc}
 800300a:	bf00      	nop
 800300c:	20000090 	.word	0x20000090

08003010 <_malloc_r>:
 8003010:	b570      	push	{r4, r5, r6, lr}
 8003012:	1ccd      	adds	r5, r1, #3
 8003014:	f025 0503 	bic.w	r5, r5, #3
 8003018:	3508      	adds	r5, #8
 800301a:	2d0c      	cmp	r5, #12
 800301c:	bf38      	it	cc
 800301e:	250c      	movcc	r5, #12
 8003020:	2d00      	cmp	r5, #0
 8003022:	4606      	mov	r6, r0
 8003024:	db01      	blt.n	800302a <_malloc_r+0x1a>
 8003026:	42a9      	cmp	r1, r5
 8003028:	d903      	bls.n	8003032 <_malloc_r+0x22>
 800302a:	230c      	movs	r3, #12
 800302c:	6033      	str	r3, [r6, #0]
 800302e:	2000      	movs	r0, #0
 8003030:	bd70      	pop	{r4, r5, r6, pc}
 8003032:	f000 fbc5 	bl	80037c0 <__malloc_lock>
 8003036:	4a21      	ldr	r2, [pc, #132]	; (80030bc <_malloc_r+0xac>)
 8003038:	6814      	ldr	r4, [r2, #0]
 800303a:	4621      	mov	r1, r4
 800303c:	b991      	cbnz	r1, 8003064 <_malloc_r+0x54>
 800303e:	4c20      	ldr	r4, [pc, #128]	; (80030c0 <_malloc_r+0xb0>)
 8003040:	6823      	ldr	r3, [r4, #0]
 8003042:	b91b      	cbnz	r3, 800304c <_malloc_r+0x3c>
 8003044:	4630      	mov	r0, r6
 8003046:	f000 fb03 	bl	8003650 <_sbrk_r>
 800304a:	6020      	str	r0, [r4, #0]
 800304c:	4629      	mov	r1, r5
 800304e:	4630      	mov	r0, r6
 8003050:	f000 fafe 	bl	8003650 <_sbrk_r>
 8003054:	1c43      	adds	r3, r0, #1
 8003056:	d124      	bne.n	80030a2 <_malloc_r+0x92>
 8003058:	230c      	movs	r3, #12
 800305a:	4630      	mov	r0, r6
 800305c:	6033      	str	r3, [r6, #0]
 800305e:	f000 fbb0 	bl	80037c2 <__malloc_unlock>
 8003062:	e7e4      	b.n	800302e <_malloc_r+0x1e>
 8003064:	680b      	ldr	r3, [r1, #0]
 8003066:	1b5b      	subs	r3, r3, r5
 8003068:	d418      	bmi.n	800309c <_malloc_r+0x8c>
 800306a:	2b0b      	cmp	r3, #11
 800306c:	d90f      	bls.n	800308e <_malloc_r+0x7e>
 800306e:	600b      	str	r3, [r1, #0]
 8003070:	18cc      	adds	r4, r1, r3
 8003072:	50cd      	str	r5, [r1, r3]
 8003074:	4630      	mov	r0, r6
 8003076:	f000 fba4 	bl	80037c2 <__malloc_unlock>
 800307a:	f104 000b 	add.w	r0, r4, #11
 800307e:	1d23      	adds	r3, r4, #4
 8003080:	f020 0007 	bic.w	r0, r0, #7
 8003084:	1ac3      	subs	r3, r0, r3
 8003086:	d0d3      	beq.n	8003030 <_malloc_r+0x20>
 8003088:	425a      	negs	r2, r3
 800308a:	50e2      	str	r2, [r4, r3]
 800308c:	e7d0      	b.n	8003030 <_malloc_r+0x20>
 800308e:	684b      	ldr	r3, [r1, #4]
 8003090:	428c      	cmp	r4, r1
 8003092:	bf16      	itet	ne
 8003094:	6063      	strne	r3, [r4, #4]
 8003096:	6013      	streq	r3, [r2, #0]
 8003098:	460c      	movne	r4, r1
 800309a:	e7eb      	b.n	8003074 <_malloc_r+0x64>
 800309c:	460c      	mov	r4, r1
 800309e:	6849      	ldr	r1, [r1, #4]
 80030a0:	e7cc      	b.n	800303c <_malloc_r+0x2c>
 80030a2:	1cc4      	adds	r4, r0, #3
 80030a4:	f024 0403 	bic.w	r4, r4, #3
 80030a8:	42a0      	cmp	r0, r4
 80030aa:	d005      	beq.n	80030b8 <_malloc_r+0xa8>
 80030ac:	1a21      	subs	r1, r4, r0
 80030ae:	4630      	mov	r0, r6
 80030b0:	f000 face 	bl	8003650 <_sbrk_r>
 80030b4:	3001      	adds	r0, #1
 80030b6:	d0cf      	beq.n	8003058 <_malloc_r+0x48>
 80030b8:	6025      	str	r5, [r4, #0]
 80030ba:	e7db      	b.n	8003074 <_malloc_r+0x64>
 80030bc:	20000090 	.word	0x20000090
 80030c0:	20000094 	.word	0x20000094

080030c4 <__sfputc_r>:
 80030c4:	6893      	ldr	r3, [r2, #8]
 80030c6:	b410      	push	{r4}
 80030c8:	3b01      	subs	r3, #1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	6093      	str	r3, [r2, #8]
 80030ce:	da07      	bge.n	80030e0 <__sfputc_r+0x1c>
 80030d0:	6994      	ldr	r4, [r2, #24]
 80030d2:	42a3      	cmp	r3, r4
 80030d4:	db01      	blt.n	80030da <__sfputc_r+0x16>
 80030d6:	290a      	cmp	r1, #10
 80030d8:	d102      	bne.n	80030e0 <__sfputc_r+0x1c>
 80030da:	bc10      	pop	{r4}
 80030dc:	f7ff bcae 	b.w	8002a3c <__swbuf_r>
 80030e0:	6813      	ldr	r3, [r2, #0]
 80030e2:	1c58      	adds	r0, r3, #1
 80030e4:	6010      	str	r0, [r2, #0]
 80030e6:	7019      	strb	r1, [r3, #0]
 80030e8:	4608      	mov	r0, r1
 80030ea:	bc10      	pop	{r4}
 80030ec:	4770      	bx	lr

080030ee <__sfputs_r>:
 80030ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030f0:	4606      	mov	r6, r0
 80030f2:	460f      	mov	r7, r1
 80030f4:	4614      	mov	r4, r2
 80030f6:	18d5      	adds	r5, r2, r3
 80030f8:	42ac      	cmp	r4, r5
 80030fa:	d101      	bne.n	8003100 <__sfputs_r+0x12>
 80030fc:	2000      	movs	r0, #0
 80030fe:	e007      	b.n	8003110 <__sfputs_r+0x22>
 8003100:	463a      	mov	r2, r7
 8003102:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003106:	4630      	mov	r0, r6
 8003108:	f7ff ffdc 	bl	80030c4 <__sfputc_r>
 800310c:	1c43      	adds	r3, r0, #1
 800310e:	d1f3      	bne.n	80030f8 <__sfputs_r+0xa>
 8003110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003114 <_vfiprintf_r>:
 8003114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003118:	460c      	mov	r4, r1
 800311a:	b09d      	sub	sp, #116	; 0x74
 800311c:	4617      	mov	r7, r2
 800311e:	461d      	mov	r5, r3
 8003120:	4606      	mov	r6, r0
 8003122:	b118      	cbz	r0, 800312c <_vfiprintf_r+0x18>
 8003124:	6983      	ldr	r3, [r0, #24]
 8003126:	b90b      	cbnz	r3, 800312c <_vfiprintf_r+0x18>
 8003128:	f7ff fe38 	bl	8002d9c <__sinit>
 800312c:	4b7c      	ldr	r3, [pc, #496]	; (8003320 <_vfiprintf_r+0x20c>)
 800312e:	429c      	cmp	r4, r3
 8003130:	d158      	bne.n	80031e4 <_vfiprintf_r+0xd0>
 8003132:	6874      	ldr	r4, [r6, #4]
 8003134:	89a3      	ldrh	r3, [r4, #12]
 8003136:	0718      	lsls	r0, r3, #28
 8003138:	d55e      	bpl.n	80031f8 <_vfiprintf_r+0xe4>
 800313a:	6923      	ldr	r3, [r4, #16]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d05b      	beq.n	80031f8 <_vfiprintf_r+0xe4>
 8003140:	2300      	movs	r3, #0
 8003142:	9309      	str	r3, [sp, #36]	; 0x24
 8003144:	2320      	movs	r3, #32
 8003146:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800314a:	2330      	movs	r3, #48	; 0x30
 800314c:	f04f 0b01 	mov.w	fp, #1
 8003150:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003154:	9503      	str	r5, [sp, #12]
 8003156:	46b8      	mov	r8, r7
 8003158:	4645      	mov	r5, r8
 800315a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800315e:	b10b      	cbz	r3, 8003164 <_vfiprintf_r+0x50>
 8003160:	2b25      	cmp	r3, #37	; 0x25
 8003162:	d154      	bne.n	800320e <_vfiprintf_r+0xfa>
 8003164:	ebb8 0a07 	subs.w	sl, r8, r7
 8003168:	d00b      	beq.n	8003182 <_vfiprintf_r+0x6e>
 800316a:	4653      	mov	r3, sl
 800316c:	463a      	mov	r2, r7
 800316e:	4621      	mov	r1, r4
 8003170:	4630      	mov	r0, r6
 8003172:	f7ff ffbc 	bl	80030ee <__sfputs_r>
 8003176:	3001      	adds	r0, #1
 8003178:	f000 80c2 	beq.w	8003300 <_vfiprintf_r+0x1ec>
 800317c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800317e:	4453      	add	r3, sl
 8003180:	9309      	str	r3, [sp, #36]	; 0x24
 8003182:	f898 3000 	ldrb.w	r3, [r8]
 8003186:	2b00      	cmp	r3, #0
 8003188:	f000 80ba 	beq.w	8003300 <_vfiprintf_r+0x1ec>
 800318c:	2300      	movs	r3, #0
 800318e:	f04f 32ff 	mov.w	r2, #4294967295
 8003192:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003196:	9304      	str	r3, [sp, #16]
 8003198:	9307      	str	r3, [sp, #28]
 800319a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800319e:	931a      	str	r3, [sp, #104]	; 0x68
 80031a0:	46a8      	mov	r8, r5
 80031a2:	2205      	movs	r2, #5
 80031a4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80031a8:	485e      	ldr	r0, [pc, #376]	; (8003324 <_vfiprintf_r+0x210>)
 80031aa:	f000 fafb 	bl	80037a4 <memchr>
 80031ae:	9b04      	ldr	r3, [sp, #16]
 80031b0:	bb78      	cbnz	r0, 8003212 <_vfiprintf_r+0xfe>
 80031b2:	06d9      	lsls	r1, r3, #27
 80031b4:	bf44      	itt	mi
 80031b6:	2220      	movmi	r2, #32
 80031b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80031bc:	071a      	lsls	r2, r3, #28
 80031be:	bf44      	itt	mi
 80031c0:	222b      	movmi	r2, #43	; 0x2b
 80031c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80031c6:	782a      	ldrb	r2, [r5, #0]
 80031c8:	2a2a      	cmp	r2, #42	; 0x2a
 80031ca:	d02a      	beq.n	8003222 <_vfiprintf_r+0x10e>
 80031cc:	46a8      	mov	r8, r5
 80031ce:	2000      	movs	r0, #0
 80031d0:	250a      	movs	r5, #10
 80031d2:	9a07      	ldr	r2, [sp, #28]
 80031d4:	4641      	mov	r1, r8
 80031d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80031da:	3b30      	subs	r3, #48	; 0x30
 80031dc:	2b09      	cmp	r3, #9
 80031de:	d969      	bls.n	80032b4 <_vfiprintf_r+0x1a0>
 80031e0:	b360      	cbz	r0, 800323c <_vfiprintf_r+0x128>
 80031e2:	e024      	b.n	800322e <_vfiprintf_r+0x11a>
 80031e4:	4b50      	ldr	r3, [pc, #320]	; (8003328 <_vfiprintf_r+0x214>)
 80031e6:	429c      	cmp	r4, r3
 80031e8:	d101      	bne.n	80031ee <_vfiprintf_r+0xda>
 80031ea:	68b4      	ldr	r4, [r6, #8]
 80031ec:	e7a2      	b.n	8003134 <_vfiprintf_r+0x20>
 80031ee:	4b4f      	ldr	r3, [pc, #316]	; (800332c <_vfiprintf_r+0x218>)
 80031f0:	429c      	cmp	r4, r3
 80031f2:	bf08      	it	eq
 80031f4:	68f4      	ldreq	r4, [r6, #12]
 80031f6:	e79d      	b.n	8003134 <_vfiprintf_r+0x20>
 80031f8:	4621      	mov	r1, r4
 80031fa:	4630      	mov	r0, r6
 80031fc:	f7ff fc70 	bl	8002ae0 <__swsetup_r>
 8003200:	2800      	cmp	r0, #0
 8003202:	d09d      	beq.n	8003140 <_vfiprintf_r+0x2c>
 8003204:	f04f 30ff 	mov.w	r0, #4294967295
 8003208:	b01d      	add	sp, #116	; 0x74
 800320a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800320e:	46a8      	mov	r8, r5
 8003210:	e7a2      	b.n	8003158 <_vfiprintf_r+0x44>
 8003212:	4a44      	ldr	r2, [pc, #272]	; (8003324 <_vfiprintf_r+0x210>)
 8003214:	4645      	mov	r5, r8
 8003216:	1a80      	subs	r0, r0, r2
 8003218:	fa0b f000 	lsl.w	r0, fp, r0
 800321c:	4318      	orrs	r0, r3
 800321e:	9004      	str	r0, [sp, #16]
 8003220:	e7be      	b.n	80031a0 <_vfiprintf_r+0x8c>
 8003222:	9a03      	ldr	r2, [sp, #12]
 8003224:	1d11      	adds	r1, r2, #4
 8003226:	6812      	ldr	r2, [r2, #0]
 8003228:	9103      	str	r1, [sp, #12]
 800322a:	2a00      	cmp	r2, #0
 800322c:	db01      	blt.n	8003232 <_vfiprintf_r+0x11e>
 800322e:	9207      	str	r2, [sp, #28]
 8003230:	e004      	b.n	800323c <_vfiprintf_r+0x128>
 8003232:	4252      	negs	r2, r2
 8003234:	f043 0302 	orr.w	r3, r3, #2
 8003238:	9207      	str	r2, [sp, #28]
 800323a:	9304      	str	r3, [sp, #16]
 800323c:	f898 3000 	ldrb.w	r3, [r8]
 8003240:	2b2e      	cmp	r3, #46	; 0x2e
 8003242:	d10e      	bne.n	8003262 <_vfiprintf_r+0x14e>
 8003244:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003248:	2b2a      	cmp	r3, #42	; 0x2a
 800324a:	d138      	bne.n	80032be <_vfiprintf_r+0x1aa>
 800324c:	9b03      	ldr	r3, [sp, #12]
 800324e:	f108 0802 	add.w	r8, r8, #2
 8003252:	1d1a      	adds	r2, r3, #4
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	9203      	str	r2, [sp, #12]
 8003258:	2b00      	cmp	r3, #0
 800325a:	bfb8      	it	lt
 800325c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003260:	9305      	str	r3, [sp, #20]
 8003262:	4d33      	ldr	r5, [pc, #204]	; (8003330 <_vfiprintf_r+0x21c>)
 8003264:	2203      	movs	r2, #3
 8003266:	f898 1000 	ldrb.w	r1, [r8]
 800326a:	4628      	mov	r0, r5
 800326c:	f000 fa9a 	bl	80037a4 <memchr>
 8003270:	b140      	cbz	r0, 8003284 <_vfiprintf_r+0x170>
 8003272:	2340      	movs	r3, #64	; 0x40
 8003274:	1b40      	subs	r0, r0, r5
 8003276:	fa03 f000 	lsl.w	r0, r3, r0
 800327a:	9b04      	ldr	r3, [sp, #16]
 800327c:	f108 0801 	add.w	r8, r8, #1
 8003280:	4303      	orrs	r3, r0
 8003282:	9304      	str	r3, [sp, #16]
 8003284:	f898 1000 	ldrb.w	r1, [r8]
 8003288:	2206      	movs	r2, #6
 800328a:	482a      	ldr	r0, [pc, #168]	; (8003334 <_vfiprintf_r+0x220>)
 800328c:	f108 0701 	add.w	r7, r8, #1
 8003290:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003294:	f000 fa86 	bl	80037a4 <memchr>
 8003298:	2800      	cmp	r0, #0
 800329a:	d037      	beq.n	800330c <_vfiprintf_r+0x1f8>
 800329c:	4b26      	ldr	r3, [pc, #152]	; (8003338 <_vfiprintf_r+0x224>)
 800329e:	bb1b      	cbnz	r3, 80032e8 <_vfiprintf_r+0x1d4>
 80032a0:	9b03      	ldr	r3, [sp, #12]
 80032a2:	3307      	adds	r3, #7
 80032a4:	f023 0307 	bic.w	r3, r3, #7
 80032a8:	3308      	adds	r3, #8
 80032aa:	9303      	str	r3, [sp, #12]
 80032ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032ae:	444b      	add	r3, r9
 80032b0:	9309      	str	r3, [sp, #36]	; 0x24
 80032b2:	e750      	b.n	8003156 <_vfiprintf_r+0x42>
 80032b4:	fb05 3202 	mla	r2, r5, r2, r3
 80032b8:	2001      	movs	r0, #1
 80032ba:	4688      	mov	r8, r1
 80032bc:	e78a      	b.n	80031d4 <_vfiprintf_r+0xc0>
 80032be:	2300      	movs	r3, #0
 80032c0:	250a      	movs	r5, #10
 80032c2:	4619      	mov	r1, r3
 80032c4:	f108 0801 	add.w	r8, r8, #1
 80032c8:	9305      	str	r3, [sp, #20]
 80032ca:	4640      	mov	r0, r8
 80032cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80032d0:	3a30      	subs	r2, #48	; 0x30
 80032d2:	2a09      	cmp	r2, #9
 80032d4:	d903      	bls.n	80032de <_vfiprintf_r+0x1ca>
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d0c3      	beq.n	8003262 <_vfiprintf_r+0x14e>
 80032da:	9105      	str	r1, [sp, #20]
 80032dc:	e7c1      	b.n	8003262 <_vfiprintf_r+0x14e>
 80032de:	fb05 2101 	mla	r1, r5, r1, r2
 80032e2:	2301      	movs	r3, #1
 80032e4:	4680      	mov	r8, r0
 80032e6:	e7f0      	b.n	80032ca <_vfiprintf_r+0x1b6>
 80032e8:	ab03      	add	r3, sp, #12
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	4622      	mov	r2, r4
 80032ee:	4b13      	ldr	r3, [pc, #76]	; (800333c <_vfiprintf_r+0x228>)
 80032f0:	a904      	add	r1, sp, #16
 80032f2:	4630      	mov	r0, r6
 80032f4:	f3af 8000 	nop.w
 80032f8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80032fc:	4681      	mov	r9, r0
 80032fe:	d1d5      	bne.n	80032ac <_vfiprintf_r+0x198>
 8003300:	89a3      	ldrh	r3, [r4, #12]
 8003302:	065b      	lsls	r3, r3, #25
 8003304:	f53f af7e 	bmi.w	8003204 <_vfiprintf_r+0xf0>
 8003308:	9809      	ldr	r0, [sp, #36]	; 0x24
 800330a:	e77d      	b.n	8003208 <_vfiprintf_r+0xf4>
 800330c:	ab03      	add	r3, sp, #12
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	4622      	mov	r2, r4
 8003312:	4b0a      	ldr	r3, [pc, #40]	; (800333c <_vfiprintf_r+0x228>)
 8003314:	a904      	add	r1, sp, #16
 8003316:	4630      	mov	r0, r6
 8003318:	f000 f888 	bl	800342c <_printf_i>
 800331c:	e7ec      	b.n	80032f8 <_vfiprintf_r+0x1e4>
 800331e:	bf00      	nop
 8003320:	080038b4 	.word	0x080038b4
 8003324:	080038f4 	.word	0x080038f4
 8003328:	080038d4 	.word	0x080038d4
 800332c:	08003894 	.word	0x08003894
 8003330:	080038fa 	.word	0x080038fa
 8003334:	080038fe 	.word	0x080038fe
 8003338:	00000000 	.word	0x00000000
 800333c:	080030ef 	.word	0x080030ef

08003340 <_printf_common>:
 8003340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003344:	4691      	mov	r9, r2
 8003346:	461f      	mov	r7, r3
 8003348:	688a      	ldr	r2, [r1, #8]
 800334a:	690b      	ldr	r3, [r1, #16]
 800334c:	4606      	mov	r6, r0
 800334e:	4293      	cmp	r3, r2
 8003350:	bfb8      	it	lt
 8003352:	4613      	movlt	r3, r2
 8003354:	f8c9 3000 	str.w	r3, [r9]
 8003358:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800335c:	460c      	mov	r4, r1
 800335e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003362:	b112      	cbz	r2, 800336a <_printf_common+0x2a>
 8003364:	3301      	adds	r3, #1
 8003366:	f8c9 3000 	str.w	r3, [r9]
 800336a:	6823      	ldr	r3, [r4, #0]
 800336c:	0699      	lsls	r1, r3, #26
 800336e:	bf42      	ittt	mi
 8003370:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003374:	3302      	addmi	r3, #2
 8003376:	f8c9 3000 	strmi.w	r3, [r9]
 800337a:	6825      	ldr	r5, [r4, #0]
 800337c:	f015 0506 	ands.w	r5, r5, #6
 8003380:	d107      	bne.n	8003392 <_printf_common+0x52>
 8003382:	f104 0a19 	add.w	sl, r4, #25
 8003386:	68e3      	ldr	r3, [r4, #12]
 8003388:	f8d9 2000 	ldr.w	r2, [r9]
 800338c:	1a9b      	subs	r3, r3, r2
 800338e:	42ab      	cmp	r3, r5
 8003390:	dc29      	bgt.n	80033e6 <_printf_common+0xa6>
 8003392:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003396:	6822      	ldr	r2, [r4, #0]
 8003398:	3300      	adds	r3, #0
 800339a:	bf18      	it	ne
 800339c:	2301      	movne	r3, #1
 800339e:	0692      	lsls	r2, r2, #26
 80033a0:	d42e      	bmi.n	8003400 <_printf_common+0xc0>
 80033a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80033a6:	4639      	mov	r1, r7
 80033a8:	4630      	mov	r0, r6
 80033aa:	47c0      	blx	r8
 80033ac:	3001      	adds	r0, #1
 80033ae:	d021      	beq.n	80033f4 <_printf_common+0xb4>
 80033b0:	6823      	ldr	r3, [r4, #0]
 80033b2:	68e5      	ldr	r5, [r4, #12]
 80033b4:	f003 0306 	and.w	r3, r3, #6
 80033b8:	2b04      	cmp	r3, #4
 80033ba:	bf18      	it	ne
 80033bc:	2500      	movne	r5, #0
 80033be:	f8d9 2000 	ldr.w	r2, [r9]
 80033c2:	f04f 0900 	mov.w	r9, #0
 80033c6:	bf08      	it	eq
 80033c8:	1aad      	subeq	r5, r5, r2
 80033ca:	68a3      	ldr	r3, [r4, #8]
 80033cc:	6922      	ldr	r2, [r4, #16]
 80033ce:	bf08      	it	eq
 80033d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80033d4:	4293      	cmp	r3, r2
 80033d6:	bfc4      	itt	gt
 80033d8:	1a9b      	subgt	r3, r3, r2
 80033da:	18ed      	addgt	r5, r5, r3
 80033dc:	341a      	adds	r4, #26
 80033de:	454d      	cmp	r5, r9
 80033e0:	d11a      	bne.n	8003418 <_printf_common+0xd8>
 80033e2:	2000      	movs	r0, #0
 80033e4:	e008      	b.n	80033f8 <_printf_common+0xb8>
 80033e6:	2301      	movs	r3, #1
 80033e8:	4652      	mov	r2, sl
 80033ea:	4639      	mov	r1, r7
 80033ec:	4630      	mov	r0, r6
 80033ee:	47c0      	blx	r8
 80033f0:	3001      	adds	r0, #1
 80033f2:	d103      	bne.n	80033fc <_printf_common+0xbc>
 80033f4:	f04f 30ff 	mov.w	r0, #4294967295
 80033f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033fc:	3501      	adds	r5, #1
 80033fe:	e7c2      	b.n	8003386 <_printf_common+0x46>
 8003400:	2030      	movs	r0, #48	; 0x30
 8003402:	18e1      	adds	r1, r4, r3
 8003404:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003408:	1c5a      	adds	r2, r3, #1
 800340a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800340e:	4422      	add	r2, r4
 8003410:	3302      	adds	r3, #2
 8003412:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003416:	e7c4      	b.n	80033a2 <_printf_common+0x62>
 8003418:	2301      	movs	r3, #1
 800341a:	4622      	mov	r2, r4
 800341c:	4639      	mov	r1, r7
 800341e:	4630      	mov	r0, r6
 8003420:	47c0      	blx	r8
 8003422:	3001      	adds	r0, #1
 8003424:	d0e6      	beq.n	80033f4 <_printf_common+0xb4>
 8003426:	f109 0901 	add.w	r9, r9, #1
 800342a:	e7d8      	b.n	80033de <_printf_common+0x9e>

0800342c <_printf_i>:
 800342c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003430:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003434:	460c      	mov	r4, r1
 8003436:	7e09      	ldrb	r1, [r1, #24]
 8003438:	b085      	sub	sp, #20
 800343a:	296e      	cmp	r1, #110	; 0x6e
 800343c:	4617      	mov	r7, r2
 800343e:	4606      	mov	r6, r0
 8003440:	4698      	mov	r8, r3
 8003442:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003444:	f000 80b3 	beq.w	80035ae <_printf_i+0x182>
 8003448:	d822      	bhi.n	8003490 <_printf_i+0x64>
 800344a:	2963      	cmp	r1, #99	; 0x63
 800344c:	d036      	beq.n	80034bc <_printf_i+0x90>
 800344e:	d80a      	bhi.n	8003466 <_printf_i+0x3a>
 8003450:	2900      	cmp	r1, #0
 8003452:	f000 80b9 	beq.w	80035c8 <_printf_i+0x19c>
 8003456:	2958      	cmp	r1, #88	; 0x58
 8003458:	f000 8083 	beq.w	8003562 <_printf_i+0x136>
 800345c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003460:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003464:	e032      	b.n	80034cc <_printf_i+0xa0>
 8003466:	2964      	cmp	r1, #100	; 0x64
 8003468:	d001      	beq.n	800346e <_printf_i+0x42>
 800346a:	2969      	cmp	r1, #105	; 0x69
 800346c:	d1f6      	bne.n	800345c <_printf_i+0x30>
 800346e:	6820      	ldr	r0, [r4, #0]
 8003470:	6813      	ldr	r3, [r2, #0]
 8003472:	0605      	lsls	r5, r0, #24
 8003474:	f103 0104 	add.w	r1, r3, #4
 8003478:	d52a      	bpl.n	80034d0 <_printf_i+0xa4>
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6011      	str	r1, [r2, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	da03      	bge.n	800348a <_printf_i+0x5e>
 8003482:	222d      	movs	r2, #45	; 0x2d
 8003484:	425b      	negs	r3, r3
 8003486:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800348a:	486f      	ldr	r0, [pc, #444]	; (8003648 <_printf_i+0x21c>)
 800348c:	220a      	movs	r2, #10
 800348e:	e039      	b.n	8003504 <_printf_i+0xd8>
 8003490:	2973      	cmp	r1, #115	; 0x73
 8003492:	f000 809d 	beq.w	80035d0 <_printf_i+0x1a4>
 8003496:	d808      	bhi.n	80034aa <_printf_i+0x7e>
 8003498:	296f      	cmp	r1, #111	; 0x6f
 800349a:	d020      	beq.n	80034de <_printf_i+0xb2>
 800349c:	2970      	cmp	r1, #112	; 0x70
 800349e:	d1dd      	bne.n	800345c <_printf_i+0x30>
 80034a0:	6823      	ldr	r3, [r4, #0]
 80034a2:	f043 0320 	orr.w	r3, r3, #32
 80034a6:	6023      	str	r3, [r4, #0]
 80034a8:	e003      	b.n	80034b2 <_printf_i+0x86>
 80034aa:	2975      	cmp	r1, #117	; 0x75
 80034ac:	d017      	beq.n	80034de <_printf_i+0xb2>
 80034ae:	2978      	cmp	r1, #120	; 0x78
 80034b0:	d1d4      	bne.n	800345c <_printf_i+0x30>
 80034b2:	2378      	movs	r3, #120	; 0x78
 80034b4:	4865      	ldr	r0, [pc, #404]	; (800364c <_printf_i+0x220>)
 80034b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80034ba:	e055      	b.n	8003568 <_printf_i+0x13c>
 80034bc:	6813      	ldr	r3, [r2, #0]
 80034be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034c2:	1d19      	adds	r1, r3, #4
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6011      	str	r1, [r2, #0]
 80034c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80034cc:	2301      	movs	r3, #1
 80034ce:	e08c      	b.n	80035ea <_printf_i+0x1be>
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80034d6:	6011      	str	r1, [r2, #0]
 80034d8:	bf18      	it	ne
 80034da:	b21b      	sxthne	r3, r3
 80034dc:	e7cf      	b.n	800347e <_printf_i+0x52>
 80034de:	6813      	ldr	r3, [r2, #0]
 80034e0:	6825      	ldr	r5, [r4, #0]
 80034e2:	1d18      	adds	r0, r3, #4
 80034e4:	6010      	str	r0, [r2, #0]
 80034e6:	0628      	lsls	r0, r5, #24
 80034e8:	d501      	bpl.n	80034ee <_printf_i+0xc2>
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	e002      	b.n	80034f4 <_printf_i+0xc8>
 80034ee:	0668      	lsls	r0, r5, #25
 80034f0:	d5fb      	bpl.n	80034ea <_printf_i+0xbe>
 80034f2:	881b      	ldrh	r3, [r3, #0]
 80034f4:	296f      	cmp	r1, #111	; 0x6f
 80034f6:	bf14      	ite	ne
 80034f8:	220a      	movne	r2, #10
 80034fa:	2208      	moveq	r2, #8
 80034fc:	4852      	ldr	r0, [pc, #328]	; (8003648 <_printf_i+0x21c>)
 80034fe:	2100      	movs	r1, #0
 8003500:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003504:	6865      	ldr	r5, [r4, #4]
 8003506:	2d00      	cmp	r5, #0
 8003508:	60a5      	str	r5, [r4, #8]
 800350a:	f2c0 8095 	blt.w	8003638 <_printf_i+0x20c>
 800350e:	6821      	ldr	r1, [r4, #0]
 8003510:	f021 0104 	bic.w	r1, r1, #4
 8003514:	6021      	str	r1, [r4, #0]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d13d      	bne.n	8003596 <_printf_i+0x16a>
 800351a:	2d00      	cmp	r5, #0
 800351c:	f040 808e 	bne.w	800363c <_printf_i+0x210>
 8003520:	4665      	mov	r5, ip
 8003522:	2a08      	cmp	r2, #8
 8003524:	d10b      	bne.n	800353e <_printf_i+0x112>
 8003526:	6823      	ldr	r3, [r4, #0]
 8003528:	07db      	lsls	r3, r3, #31
 800352a:	d508      	bpl.n	800353e <_printf_i+0x112>
 800352c:	6923      	ldr	r3, [r4, #16]
 800352e:	6862      	ldr	r2, [r4, #4]
 8003530:	429a      	cmp	r2, r3
 8003532:	bfde      	ittt	le
 8003534:	2330      	movle	r3, #48	; 0x30
 8003536:	f805 3c01 	strble.w	r3, [r5, #-1]
 800353a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800353e:	ebac 0305 	sub.w	r3, ip, r5
 8003542:	6123      	str	r3, [r4, #16]
 8003544:	f8cd 8000 	str.w	r8, [sp]
 8003548:	463b      	mov	r3, r7
 800354a:	aa03      	add	r2, sp, #12
 800354c:	4621      	mov	r1, r4
 800354e:	4630      	mov	r0, r6
 8003550:	f7ff fef6 	bl	8003340 <_printf_common>
 8003554:	3001      	adds	r0, #1
 8003556:	d14d      	bne.n	80035f4 <_printf_i+0x1c8>
 8003558:	f04f 30ff 	mov.w	r0, #4294967295
 800355c:	b005      	add	sp, #20
 800355e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003562:	4839      	ldr	r0, [pc, #228]	; (8003648 <_printf_i+0x21c>)
 8003564:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003568:	6813      	ldr	r3, [r2, #0]
 800356a:	6821      	ldr	r1, [r4, #0]
 800356c:	1d1d      	adds	r5, r3, #4
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6015      	str	r5, [r2, #0]
 8003572:	060a      	lsls	r2, r1, #24
 8003574:	d50b      	bpl.n	800358e <_printf_i+0x162>
 8003576:	07ca      	lsls	r2, r1, #31
 8003578:	bf44      	itt	mi
 800357a:	f041 0120 	orrmi.w	r1, r1, #32
 800357e:	6021      	strmi	r1, [r4, #0]
 8003580:	b91b      	cbnz	r3, 800358a <_printf_i+0x15e>
 8003582:	6822      	ldr	r2, [r4, #0]
 8003584:	f022 0220 	bic.w	r2, r2, #32
 8003588:	6022      	str	r2, [r4, #0]
 800358a:	2210      	movs	r2, #16
 800358c:	e7b7      	b.n	80034fe <_printf_i+0xd2>
 800358e:	064d      	lsls	r5, r1, #25
 8003590:	bf48      	it	mi
 8003592:	b29b      	uxthmi	r3, r3
 8003594:	e7ef      	b.n	8003576 <_printf_i+0x14a>
 8003596:	4665      	mov	r5, ip
 8003598:	fbb3 f1f2 	udiv	r1, r3, r2
 800359c:	fb02 3311 	mls	r3, r2, r1, r3
 80035a0:	5cc3      	ldrb	r3, [r0, r3]
 80035a2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80035a6:	460b      	mov	r3, r1
 80035a8:	2900      	cmp	r1, #0
 80035aa:	d1f5      	bne.n	8003598 <_printf_i+0x16c>
 80035ac:	e7b9      	b.n	8003522 <_printf_i+0xf6>
 80035ae:	6813      	ldr	r3, [r2, #0]
 80035b0:	6825      	ldr	r5, [r4, #0]
 80035b2:	1d18      	adds	r0, r3, #4
 80035b4:	6961      	ldr	r1, [r4, #20]
 80035b6:	6010      	str	r0, [r2, #0]
 80035b8:	0628      	lsls	r0, r5, #24
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	d501      	bpl.n	80035c2 <_printf_i+0x196>
 80035be:	6019      	str	r1, [r3, #0]
 80035c0:	e002      	b.n	80035c8 <_printf_i+0x19c>
 80035c2:	066a      	lsls	r2, r5, #25
 80035c4:	d5fb      	bpl.n	80035be <_printf_i+0x192>
 80035c6:	8019      	strh	r1, [r3, #0]
 80035c8:	2300      	movs	r3, #0
 80035ca:	4665      	mov	r5, ip
 80035cc:	6123      	str	r3, [r4, #16]
 80035ce:	e7b9      	b.n	8003544 <_printf_i+0x118>
 80035d0:	6813      	ldr	r3, [r2, #0]
 80035d2:	1d19      	adds	r1, r3, #4
 80035d4:	6011      	str	r1, [r2, #0]
 80035d6:	681d      	ldr	r5, [r3, #0]
 80035d8:	6862      	ldr	r2, [r4, #4]
 80035da:	2100      	movs	r1, #0
 80035dc:	4628      	mov	r0, r5
 80035de:	f000 f8e1 	bl	80037a4 <memchr>
 80035e2:	b108      	cbz	r0, 80035e8 <_printf_i+0x1bc>
 80035e4:	1b40      	subs	r0, r0, r5
 80035e6:	6060      	str	r0, [r4, #4]
 80035e8:	6863      	ldr	r3, [r4, #4]
 80035ea:	6123      	str	r3, [r4, #16]
 80035ec:	2300      	movs	r3, #0
 80035ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035f2:	e7a7      	b.n	8003544 <_printf_i+0x118>
 80035f4:	6923      	ldr	r3, [r4, #16]
 80035f6:	462a      	mov	r2, r5
 80035f8:	4639      	mov	r1, r7
 80035fa:	4630      	mov	r0, r6
 80035fc:	47c0      	blx	r8
 80035fe:	3001      	adds	r0, #1
 8003600:	d0aa      	beq.n	8003558 <_printf_i+0x12c>
 8003602:	6823      	ldr	r3, [r4, #0]
 8003604:	079b      	lsls	r3, r3, #30
 8003606:	d413      	bmi.n	8003630 <_printf_i+0x204>
 8003608:	68e0      	ldr	r0, [r4, #12]
 800360a:	9b03      	ldr	r3, [sp, #12]
 800360c:	4298      	cmp	r0, r3
 800360e:	bfb8      	it	lt
 8003610:	4618      	movlt	r0, r3
 8003612:	e7a3      	b.n	800355c <_printf_i+0x130>
 8003614:	2301      	movs	r3, #1
 8003616:	464a      	mov	r2, r9
 8003618:	4639      	mov	r1, r7
 800361a:	4630      	mov	r0, r6
 800361c:	47c0      	blx	r8
 800361e:	3001      	adds	r0, #1
 8003620:	d09a      	beq.n	8003558 <_printf_i+0x12c>
 8003622:	3501      	adds	r5, #1
 8003624:	68e3      	ldr	r3, [r4, #12]
 8003626:	9a03      	ldr	r2, [sp, #12]
 8003628:	1a9b      	subs	r3, r3, r2
 800362a:	42ab      	cmp	r3, r5
 800362c:	dcf2      	bgt.n	8003614 <_printf_i+0x1e8>
 800362e:	e7eb      	b.n	8003608 <_printf_i+0x1dc>
 8003630:	2500      	movs	r5, #0
 8003632:	f104 0919 	add.w	r9, r4, #25
 8003636:	e7f5      	b.n	8003624 <_printf_i+0x1f8>
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1ac      	bne.n	8003596 <_printf_i+0x16a>
 800363c:	7803      	ldrb	r3, [r0, #0]
 800363e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003642:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003646:	e76c      	b.n	8003522 <_printf_i+0xf6>
 8003648:	08003905 	.word	0x08003905
 800364c:	08003916 	.word	0x08003916

08003650 <_sbrk_r>:
 8003650:	b538      	push	{r3, r4, r5, lr}
 8003652:	2300      	movs	r3, #0
 8003654:	4c05      	ldr	r4, [pc, #20]	; (800366c <_sbrk_r+0x1c>)
 8003656:	4605      	mov	r5, r0
 8003658:	4608      	mov	r0, r1
 800365a:	6023      	str	r3, [r4, #0]
 800365c:	f7ff f844 	bl	80026e8 <_sbrk>
 8003660:	1c43      	adds	r3, r0, #1
 8003662:	d102      	bne.n	800366a <_sbrk_r+0x1a>
 8003664:	6823      	ldr	r3, [r4, #0]
 8003666:	b103      	cbz	r3, 800366a <_sbrk_r+0x1a>
 8003668:	602b      	str	r3, [r5, #0]
 800366a:	bd38      	pop	{r3, r4, r5, pc}
 800366c:	20000130 	.word	0x20000130

08003670 <__sread>:
 8003670:	b510      	push	{r4, lr}
 8003672:	460c      	mov	r4, r1
 8003674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003678:	f000 f8a4 	bl	80037c4 <_read_r>
 800367c:	2800      	cmp	r0, #0
 800367e:	bfab      	itete	ge
 8003680:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003682:	89a3      	ldrhlt	r3, [r4, #12]
 8003684:	181b      	addge	r3, r3, r0
 8003686:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800368a:	bfac      	ite	ge
 800368c:	6563      	strge	r3, [r4, #84]	; 0x54
 800368e:	81a3      	strhlt	r3, [r4, #12]
 8003690:	bd10      	pop	{r4, pc}

08003692 <__swrite>:
 8003692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003696:	461f      	mov	r7, r3
 8003698:	898b      	ldrh	r3, [r1, #12]
 800369a:	4605      	mov	r5, r0
 800369c:	05db      	lsls	r3, r3, #23
 800369e:	460c      	mov	r4, r1
 80036a0:	4616      	mov	r6, r2
 80036a2:	d505      	bpl.n	80036b0 <__swrite+0x1e>
 80036a4:	2302      	movs	r3, #2
 80036a6:	2200      	movs	r2, #0
 80036a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036ac:	f000 f868 	bl	8003780 <_lseek_r>
 80036b0:	89a3      	ldrh	r3, [r4, #12]
 80036b2:	4632      	mov	r2, r6
 80036b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036b8:	81a3      	strh	r3, [r4, #12]
 80036ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036be:	463b      	mov	r3, r7
 80036c0:	4628      	mov	r0, r5
 80036c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036c6:	f000 b817 	b.w	80036f8 <_write_r>

080036ca <__sseek>:
 80036ca:	b510      	push	{r4, lr}
 80036cc:	460c      	mov	r4, r1
 80036ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036d2:	f000 f855 	bl	8003780 <_lseek_r>
 80036d6:	1c43      	adds	r3, r0, #1
 80036d8:	89a3      	ldrh	r3, [r4, #12]
 80036da:	bf15      	itete	ne
 80036dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80036de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80036e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80036e6:	81a3      	strheq	r3, [r4, #12]
 80036e8:	bf18      	it	ne
 80036ea:	81a3      	strhne	r3, [r4, #12]
 80036ec:	bd10      	pop	{r4, pc}

080036ee <__sclose>:
 80036ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036f2:	f000 b813 	b.w	800371c <_close_r>
	...

080036f8 <_write_r>:
 80036f8:	b538      	push	{r3, r4, r5, lr}
 80036fa:	4605      	mov	r5, r0
 80036fc:	4608      	mov	r0, r1
 80036fe:	4611      	mov	r1, r2
 8003700:	2200      	movs	r2, #0
 8003702:	4c05      	ldr	r4, [pc, #20]	; (8003718 <_write_r+0x20>)
 8003704:	6022      	str	r2, [r4, #0]
 8003706:	461a      	mov	r2, r3
 8003708:	f7fe ffa8 	bl	800265c <_write>
 800370c:	1c43      	adds	r3, r0, #1
 800370e:	d102      	bne.n	8003716 <_write_r+0x1e>
 8003710:	6823      	ldr	r3, [r4, #0]
 8003712:	b103      	cbz	r3, 8003716 <_write_r+0x1e>
 8003714:	602b      	str	r3, [r5, #0]
 8003716:	bd38      	pop	{r3, r4, r5, pc}
 8003718:	20000130 	.word	0x20000130

0800371c <_close_r>:
 800371c:	b538      	push	{r3, r4, r5, lr}
 800371e:	2300      	movs	r3, #0
 8003720:	4c05      	ldr	r4, [pc, #20]	; (8003738 <_close_r+0x1c>)
 8003722:	4605      	mov	r5, r0
 8003724:	4608      	mov	r0, r1
 8003726:	6023      	str	r3, [r4, #0]
 8003728:	f7fe ffae 	bl	8002688 <_close>
 800372c:	1c43      	adds	r3, r0, #1
 800372e:	d102      	bne.n	8003736 <_close_r+0x1a>
 8003730:	6823      	ldr	r3, [r4, #0]
 8003732:	b103      	cbz	r3, 8003736 <_close_r+0x1a>
 8003734:	602b      	str	r3, [r5, #0]
 8003736:	bd38      	pop	{r3, r4, r5, pc}
 8003738:	20000130 	.word	0x20000130

0800373c <_fstat_r>:
 800373c:	b538      	push	{r3, r4, r5, lr}
 800373e:	2300      	movs	r3, #0
 8003740:	4c06      	ldr	r4, [pc, #24]	; (800375c <_fstat_r+0x20>)
 8003742:	4605      	mov	r5, r0
 8003744:	4608      	mov	r0, r1
 8003746:	4611      	mov	r1, r2
 8003748:	6023      	str	r3, [r4, #0]
 800374a:	f7fe ffa8 	bl	800269e <_fstat>
 800374e:	1c43      	adds	r3, r0, #1
 8003750:	d102      	bne.n	8003758 <_fstat_r+0x1c>
 8003752:	6823      	ldr	r3, [r4, #0]
 8003754:	b103      	cbz	r3, 8003758 <_fstat_r+0x1c>
 8003756:	602b      	str	r3, [r5, #0]
 8003758:	bd38      	pop	{r3, r4, r5, pc}
 800375a:	bf00      	nop
 800375c:	20000130 	.word	0x20000130

08003760 <_isatty_r>:
 8003760:	b538      	push	{r3, r4, r5, lr}
 8003762:	2300      	movs	r3, #0
 8003764:	4c05      	ldr	r4, [pc, #20]	; (800377c <_isatty_r+0x1c>)
 8003766:	4605      	mov	r5, r0
 8003768:	4608      	mov	r0, r1
 800376a:	6023      	str	r3, [r4, #0]
 800376c:	f7fe ffa6 	bl	80026bc <_isatty>
 8003770:	1c43      	adds	r3, r0, #1
 8003772:	d102      	bne.n	800377a <_isatty_r+0x1a>
 8003774:	6823      	ldr	r3, [r4, #0]
 8003776:	b103      	cbz	r3, 800377a <_isatty_r+0x1a>
 8003778:	602b      	str	r3, [r5, #0]
 800377a:	bd38      	pop	{r3, r4, r5, pc}
 800377c:	20000130 	.word	0x20000130

08003780 <_lseek_r>:
 8003780:	b538      	push	{r3, r4, r5, lr}
 8003782:	4605      	mov	r5, r0
 8003784:	4608      	mov	r0, r1
 8003786:	4611      	mov	r1, r2
 8003788:	2200      	movs	r2, #0
 800378a:	4c05      	ldr	r4, [pc, #20]	; (80037a0 <_lseek_r+0x20>)
 800378c:	6022      	str	r2, [r4, #0]
 800378e:	461a      	mov	r2, r3
 8003790:	f7fe ff9e 	bl	80026d0 <_lseek>
 8003794:	1c43      	adds	r3, r0, #1
 8003796:	d102      	bne.n	800379e <_lseek_r+0x1e>
 8003798:	6823      	ldr	r3, [r4, #0]
 800379a:	b103      	cbz	r3, 800379e <_lseek_r+0x1e>
 800379c:	602b      	str	r3, [r5, #0]
 800379e:	bd38      	pop	{r3, r4, r5, pc}
 80037a0:	20000130 	.word	0x20000130

080037a4 <memchr>:
 80037a4:	b510      	push	{r4, lr}
 80037a6:	b2c9      	uxtb	r1, r1
 80037a8:	4402      	add	r2, r0
 80037aa:	4290      	cmp	r0, r2
 80037ac:	4603      	mov	r3, r0
 80037ae:	d101      	bne.n	80037b4 <memchr+0x10>
 80037b0:	2300      	movs	r3, #0
 80037b2:	e003      	b.n	80037bc <memchr+0x18>
 80037b4:	781c      	ldrb	r4, [r3, #0]
 80037b6:	3001      	adds	r0, #1
 80037b8:	428c      	cmp	r4, r1
 80037ba:	d1f6      	bne.n	80037aa <memchr+0x6>
 80037bc:	4618      	mov	r0, r3
 80037be:	bd10      	pop	{r4, pc}

080037c0 <__malloc_lock>:
 80037c0:	4770      	bx	lr

080037c2 <__malloc_unlock>:
 80037c2:	4770      	bx	lr

080037c4 <_read_r>:
 80037c4:	b538      	push	{r3, r4, r5, lr}
 80037c6:	4605      	mov	r5, r0
 80037c8:	4608      	mov	r0, r1
 80037ca:	4611      	mov	r1, r2
 80037cc:	2200      	movs	r2, #0
 80037ce:	4c05      	ldr	r4, [pc, #20]	; (80037e4 <_read_r+0x20>)
 80037d0:	6022      	str	r2, [r4, #0]
 80037d2:	461a      	mov	r2, r3
 80037d4:	f7fe ff24 	bl	8002620 <_read>
 80037d8:	1c43      	adds	r3, r0, #1
 80037da:	d102      	bne.n	80037e2 <_read_r+0x1e>
 80037dc:	6823      	ldr	r3, [r4, #0]
 80037de:	b103      	cbz	r3, 80037e2 <_read_r+0x1e>
 80037e0:	602b      	str	r3, [r5, #0]
 80037e2:	bd38      	pop	{r3, r4, r5, pc}
 80037e4:	20000130 	.word	0x20000130

080037e8 <_init>:
 80037e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ea:	bf00      	nop
 80037ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ee:	bc08      	pop	{r3}
 80037f0:	469e      	mov	lr, r3
 80037f2:	4770      	bx	lr

080037f4 <_fini>:
 80037f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037f6:	bf00      	nop
 80037f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037fa:	bc08      	pop	{r3}
 80037fc:	469e      	mov	lr, r3
 80037fe:	4770      	bx	lr
